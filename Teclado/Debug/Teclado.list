
Teclado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ec4  08001ec4  00011ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000020  08001ee8  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000044  08001ee8  00020044  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   000036e6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f41  00000000  00000000  0002372e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003c0  00000000  00000000  00024670  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  00024a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c1c  00000000  00000000  00024d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000013ae  00000000  00000000  00026974  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027d22  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000b60  00000000  00000000  00027da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e04 	.word	0x08001e04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08001e04 	.word	0x08001e04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fd4d 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <HAL_InitTick+0x5c>)
 8000252:	681c      	ldr	r4, [r3, #0]
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <HAL_InitTick+0x60>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	0019      	movs	r1, r3
 800025a:	23fa      	movs	r3, #250	; 0xfa
 800025c:	0098      	lsls	r0, r3, #2
 800025e:	f7ff ff53 	bl	8000108 <__udivsi3>
 8000262:	0003      	movs	r3, r0
 8000264:	0019      	movs	r1, r3
 8000266:	0020      	movs	r0, r4
 8000268:	f7ff ff4e 	bl	8000108 <__udivsi3>
 800026c:	0003      	movs	r3, r0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 f8e2 	bl	8000438 <HAL_SYSTICK_Config>
 8000274:	1e03      	subs	r3, r0, #0
 8000276:	d001      	beq.n	800027c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000278:	2301      	movs	r3, #1
 800027a:	e00f      	b.n	800029c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b03      	cmp	r3, #3
 8000280:	d80b      	bhi.n	800029a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	2301      	movs	r3, #1
 8000286:	425b      	negs	r3, r3
 8000288:	2200      	movs	r2, #0
 800028a:	0018      	movs	r0, r3
 800028c:	f000 f8be 	bl	800040c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_InitTick+0x64>)
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b003      	add	sp, #12
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	2000001c 	.word	0x2000001c
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	001a      	movs	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	18d2      	adds	r2, r2, r3
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000040 	.word	0x20000040

080002d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	0018      	movs	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	20000040 	.word	0x20000040

080002e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b5b0      	push	{r4, r5, r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d828      	bhi.n	8000350 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4c2f      	ldr	r4, [pc, #188]	; (80003bc <__NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b25b      	sxtb	r3, r3
 8000306:	089b      	lsrs	r3, r3, #2
 8000308:	492c      	ldr	r1, [pc, #176]	; (80003bc <__NVIC_SetPriority+0xd4>)
 800030a:	1dfa      	adds	r2, r7, #7
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	b252      	sxtb	r2, r2
 8000310:	0892      	lsrs	r2, r2, #2
 8000312:	32c0      	adds	r2, #192	; 0xc0
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	5852      	ldr	r2, [r2, r1]
 8000318:	1df9      	adds	r1, r7, #7
 800031a:	7809      	ldrb	r1, [r1, #0]
 800031c:	0008      	movs	r0, r1
 800031e:	2103      	movs	r1, #3
 8000320:	4001      	ands	r1, r0
 8000322:	00c9      	lsls	r1, r1, #3
 8000324:	20ff      	movs	r0, #255	; 0xff
 8000326:	4088      	lsls	r0, r1
 8000328:	0001      	movs	r1, r0
 800032a:	43c9      	mvns	r1, r1
 800032c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	0192      	lsls	r2, r2, #6
 8000332:	20ff      	movs	r0, #255	; 0xff
 8000334:	4010      	ands	r0, r2
 8000336:	1dfa      	adds	r2, r7, #7
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	0015      	movs	r5, r2
 800033c:	2203      	movs	r2, #3
 800033e:	402a      	ands	r2, r5
 8000340:	00d2      	lsls	r2, r2, #3
 8000342:	4090      	lsls	r0, r2
 8000344:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	430a      	orrs	r2, r1
 8000348:	33c0      	adds	r3, #192	; 0xc0
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800034e:	e031      	b.n	80003b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000350:	4c1b      	ldr	r4, [pc, #108]	; (80003c0 <__NVIC_SetPriority+0xd8>)
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	001a      	movs	r2, r3
 8000358:	230f      	movs	r3, #15
 800035a:	4013      	ands	r3, r2
 800035c:	3b08      	subs	r3, #8
 800035e:	0899      	lsrs	r1, r3, #2
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <__NVIC_SetPriority+0xd8>)
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	0018      	movs	r0, r3
 8000368:	230f      	movs	r3, #15
 800036a:	4003      	ands	r3, r0
 800036c:	3b08      	subs	r3, #8
 800036e:	089b      	lsrs	r3, r3, #2
 8000370:	3306      	adds	r3, #6
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	18d3      	adds	r3, r2, r3
 8000376:	3304      	adds	r3, #4
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	1dfa      	adds	r2, r7, #7
 800037c:	7812      	ldrb	r2, [r2, #0]
 800037e:	0010      	movs	r0, r2
 8000380:	2203      	movs	r2, #3
 8000382:	4002      	ands	r2, r0
 8000384:	00d2      	lsls	r2, r2, #3
 8000386:	20ff      	movs	r0, #255	; 0xff
 8000388:	4090      	lsls	r0, r2
 800038a:	0002      	movs	r2, r0
 800038c:	43d2      	mvns	r2, r2
 800038e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	019b      	lsls	r3, r3, #6
 8000394:	20ff      	movs	r0, #255	; 0xff
 8000396:	4018      	ands	r0, r3
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	001d      	movs	r5, r3
 800039e:	2303      	movs	r3, #3
 80003a0:	402b      	ands	r3, r5
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4098      	lsls	r0, r3
 80003a6:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a8:	431a      	orrs	r2, r3
 80003aa:	1d8b      	adds	r3, r1, #6
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	18e3      	adds	r3, r4, r3
 80003b0:	3304      	adds	r3, #4
 80003b2:	601a      	str	r2, [r3, #0]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bdb0      	pop	{r4, r5, r7, pc}
 80003bc:	e000e100 	.word	0xe000e100
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	230f      	movs	r3, #15
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	230f      	movs	r3, #15
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b25b      	sxtb	r3, r3
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ff5c 	bl	80002e8 <__NVIC_SetPriority>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b004      	add	sp, #16
 8000436:	bd80      	pop	{r7, pc}

08000438 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff ffbe 	bl	80003c4 <SysTick_Config>
 8000448:	0003      	movs	r3, r0
}
 800044a:	0018      	movs	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000462:	e14f      	b.n	8000704 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	697a      	ldr	r2, [r7, #20]
 800046c:	4091      	lsls	r1, r2
 800046e:	000a      	movs	r2, r1
 8000470:	4013      	ands	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d100      	bne.n	800047c <HAL_GPIO_Init+0x28>
 800047a:	e140      	b.n	80006fe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d003      	beq.n	800048c <HAL_GPIO_Init+0x38>
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	2b12      	cmp	r3, #18
 800048a:	d123      	bne.n	80004d4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	08da      	lsrs	r2, r3, #3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3208      	adds	r2, #8
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	58d3      	ldr	r3, [r2, r3]
 8000498:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	2207      	movs	r2, #7
 800049e:	4013      	ands	r3, r2
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	220f      	movs	r2, #15
 80004a4:	409a      	lsls	r2, r3
 80004a6:	0013      	movs	r3, r2
 80004a8:	43da      	mvns	r2, r3
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	4013      	ands	r3, r2
 80004ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	691a      	ldr	r2, [r3, #16]
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	2107      	movs	r1, #7
 80004b8:	400b      	ands	r3, r1
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	409a      	lsls	r2, r3
 80004be:	0013      	movs	r3, r2
 80004c0:	693a      	ldr	r2, [r7, #16]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	08da      	lsrs	r2, r3, #3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3208      	adds	r2, #8
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	6939      	ldr	r1, [r7, #16]
 80004d2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	2203      	movs	r2, #3
 80004e0:	409a      	lsls	r2, r3
 80004e2:	0013      	movs	r3, r2
 80004e4:	43da      	mvns	r2, r3
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	4013      	ands	r3, r2
 80004ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2203      	movs	r2, #3
 80004f2:	401a      	ands	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	693a      	ldr	r2, [r7, #16]
 80004fe:	4313      	orrs	r3, r2
 8000500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d00b      	beq.n	8000528 <HAL_GPIO_Init+0xd4>
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	2b02      	cmp	r3, #2
 8000516:	d007      	beq.n	8000528 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	2b11      	cmp	r3, #17
 800051e:	d003      	beq.n	8000528 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	2b12      	cmp	r3, #18
 8000526:	d130      	bne.n	800058a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2203      	movs	r2, #3
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	43da      	mvns	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	68da      	ldr	r2, [r3, #12]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4313      	orrs	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800055e:	2201      	movs	r2, #1
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	409a      	lsls	r2, r3
 8000564:	0013      	movs	r3, r2
 8000566:	43da      	mvns	r2, r3
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	4013      	ands	r3, r2
 800056c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	091b      	lsrs	r3, r3, #4
 8000574:	2201      	movs	r2, #1
 8000576:	401a      	ands	r2, r3
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	409a      	lsls	r2, r3
 800057c:	0013      	movs	r3, r2
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	4313      	orrs	r3, r2
 8000582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	2203      	movs	r2, #3
 8000596:	409a      	lsls	r2, r3
 8000598:	0013      	movs	r3, r2
 800059a:	43da      	mvns	r2, r3
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	4013      	ands	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0013      	movs	r3, r2
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	055b      	lsls	r3, r3, #21
 80005c2:	4013      	ands	r3, r2
 80005c4:	d100      	bne.n	80005c8 <HAL_GPIO_Init+0x174>
 80005c6:	e09a      	b.n	80006fe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c8:	4b54      	ldr	r3, [pc, #336]	; (800071c <HAL_GPIO_Init+0x2c8>)
 80005ca:	4a54      	ldr	r2, [pc, #336]	; (800071c <HAL_GPIO_Init+0x2c8>)
 80005cc:	6992      	ldr	r2, [r2, #24]
 80005ce:	2101      	movs	r1, #1
 80005d0:	430a      	orrs	r2, r1
 80005d2:	619a      	str	r2, [r3, #24]
 80005d4:	4b51      	ldr	r3, [pc, #324]	; (800071c <HAL_GPIO_Init+0x2c8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	2201      	movs	r2, #1
 80005da:	4013      	ands	r3, r2
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80005e0:	4a4f      	ldr	r2, [pc, #316]	; (8000720 <HAL_GPIO_Init+0x2cc>)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	3302      	adds	r3, #2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	589b      	ldr	r3, [r3, r2]
 80005ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2203      	movs	r2, #3
 80005f2:	4013      	ands	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	220f      	movs	r2, #15
 80005f8:	409a      	lsls	r2, r3
 80005fa:	0013      	movs	r3, r2
 80005fc:	43da      	mvns	r2, r3
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	2390      	movs	r3, #144	; 0x90
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	429a      	cmp	r2, r3
 800060c:	d013      	beq.n	8000636 <HAL_GPIO_Init+0x1e2>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a44      	ldr	r2, [pc, #272]	; (8000724 <HAL_GPIO_Init+0x2d0>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d00d      	beq.n	8000632 <HAL_GPIO_Init+0x1de>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a43      	ldr	r2, [pc, #268]	; (8000728 <HAL_GPIO_Init+0x2d4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d007      	beq.n	800062e <HAL_GPIO_Init+0x1da>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a42      	ldr	r2, [pc, #264]	; (800072c <HAL_GPIO_Init+0x2d8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d101      	bne.n	800062a <HAL_GPIO_Init+0x1d6>
 8000626:	2303      	movs	r3, #3
 8000628:	e006      	b.n	8000638 <HAL_GPIO_Init+0x1e4>
 800062a:	2305      	movs	r3, #5
 800062c:	e004      	b.n	8000638 <HAL_GPIO_Init+0x1e4>
 800062e:	2302      	movs	r3, #2
 8000630:	e002      	b.n	8000638 <HAL_GPIO_Init+0x1e4>
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <HAL_GPIO_Init+0x1e4>
 8000636:	2300      	movs	r3, #0
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	2103      	movs	r1, #3
 800063c:	400a      	ands	r2, r1
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	4093      	lsls	r3, r2
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4313      	orrs	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000648:	4935      	ldr	r1, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2cc>)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	3302      	adds	r3, #2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000656:	4b36      	ldr	r3, [pc, #216]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	43da      	mvns	r2, r3
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	4013      	ands	r3, r2
 8000664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	025b      	lsls	r3, r3, #9
 800066e:	4013      	ands	r3, r2
 8000670:	d003      	beq.n	800067a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4313      	orrs	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	43da      	mvns	r2, r3
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	029b      	lsls	r3, r3, #10
 8000698:	4013      	ands	r3, r2
 800069a:	d003      	beq.n	80006a4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43da      	mvns	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	035b      	lsls	r3, r3, #13
 80006c2:	4013      	ands	r3, r2
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43da      	mvns	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	039b      	lsls	r3, r3, #14
 80006ec:	4013      	ands	r3, r2
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_GPIO_Init+0x2dc>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	40da      	lsrs	r2, r3
 800070c:	1e13      	subs	r3, r2, #0
 800070e:	d000      	beq.n	8000712 <HAL_GPIO_Init+0x2be>
 8000710:	e6a8      	b.n	8000464 <HAL_GPIO_Init+0x10>
  } 
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b006      	add	sp, #24
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000
 8000724:	48000400 	.word	0x48000400
 8000728:	48000800 	.word	0x48000800
 800072c:	48000c00 	.word	0x48000c00
 8000730:	40010400 	.word	0x40010400

08000734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	000a      	movs	r2, r1
 800073e:	1cbb      	adds	r3, r7, #2
 8000740:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	1cba      	adds	r2, r7, #2
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	4013      	ands	r3, r2
 800074c:	d004      	beq.n	8000758 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e003      	b.n	8000760 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000758:	230f      	movs	r3, #15
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000760:	230f      	movs	r3, #15
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	781b      	ldrb	r3, [r3, #0]
  }
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	0008      	movs	r0, r1
 8000778:	0011      	movs	r1, r2
 800077a:	1cbb      	adds	r3, r7, #2
 800077c:	1c02      	adds	r2, r0, #0
 800077e:	801a      	strh	r2, [r3, #0]
 8000780:	1c7b      	adds	r3, r7, #1
 8000782:	1c0a      	adds	r2, r1, #0
 8000784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000786:	1c7b      	adds	r3, r7, #1
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d004      	beq.n	8000798 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800078e:	1cbb      	adds	r3, r7, #2
 8000790:	881a      	ldrh	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000796:	e003      	b.n	80007a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000798:	1cbb      	adds	r3, r7, #2
 800079a:	881a      	ldrh	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e302      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	d100      	bne.n	80007c6 <HAL_RCC_OscConfig+0x1e>
 80007c4:	e08d      	b.n	80008e2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007c6:	4bc4      	ldr	r3, [pc, #784]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	220c      	movs	r2, #12
 80007cc:	4013      	ands	r3, r2
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d00e      	beq.n	80007f0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d2:	4bc1      	ldr	r3, [pc, #772]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	220c      	movs	r2, #12
 80007d8:	4013      	ands	r3, r2
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d116      	bne.n	800080c <HAL_RCC_OscConfig+0x64>
 80007de:	4bbe      	ldr	r3, [pc, #760]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	025b      	lsls	r3, r3, #9
 80007e6:	401a      	ands	r2, r3
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	025b      	lsls	r3, r3, #9
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10d      	bne.n	800080c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007f0:	4bb9      	ldr	r3, [pc, #740]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	029b      	lsls	r3, r3, #10
 80007f8:	4013      	ands	r3, r2
 80007fa:	d100      	bne.n	80007fe <HAL_RCC_OscConfig+0x56>
 80007fc:	e070      	b.n	80008e0 <HAL_RCC_OscConfig+0x138>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <HAL_RCC_OscConfig+0x60>
 8000806:	e06b      	b.n	80008e0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	e2d9      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d107      	bne.n	8000824 <HAL_RCC_OscConfig+0x7c>
 8000814:	4bb0      	ldr	r3, [pc, #704]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000816:	4ab0      	ldr	r2, [pc, #704]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000818:	6812      	ldr	r2, [r2, #0]
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	0249      	lsls	r1, r1, #9
 800081e:	430a      	orrs	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e02f      	b.n	8000884 <HAL_RCC_OscConfig+0xdc>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10c      	bne.n	8000846 <HAL_RCC_OscConfig+0x9e>
 800082c:	4baa      	ldr	r3, [pc, #680]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800082e:	4aaa      	ldr	r2, [pc, #680]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	49aa      	ldr	r1, [pc, #680]	; (8000adc <HAL_RCC_OscConfig+0x334>)
 8000834:	400a      	ands	r2, r1
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	4ba7      	ldr	r3, [pc, #668]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800083a:	4aa7      	ldr	r2, [pc, #668]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	49a8      	ldr	r1, [pc, #672]	; (8000ae0 <HAL_RCC_OscConfig+0x338>)
 8000840:	400a      	ands	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e01e      	b.n	8000884 <HAL_RCC_OscConfig+0xdc>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b05      	cmp	r3, #5
 800084c:	d10e      	bne.n	800086c <HAL_RCC_OscConfig+0xc4>
 800084e:	4ba2      	ldr	r3, [pc, #648]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000850:	4aa1      	ldr	r2, [pc, #644]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	02c9      	lsls	r1, r1, #11
 8000858:	430a      	orrs	r2, r1
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800085e:	4a9e      	ldr	r2, [pc, #632]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	0249      	lsls	r1, r1, #9
 8000866:	430a      	orrs	r2, r1
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	e00b      	b.n	8000884 <HAL_RCC_OscConfig+0xdc>
 800086c:	4b9a      	ldr	r3, [pc, #616]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800086e:	4a9a      	ldr	r2, [pc, #616]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	499a      	ldr	r1, [pc, #616]	; (8000adc <HAL_RCC_OscConfig+0x334>)
 8000874:	400a      	ands	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	4b97      	ldr	r3, [pc, #604]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800087a:	4a97      	ldr	r2, [pc, #604]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	4998      	ldr	r1, [pc, #608]	; (8000ae0 <HAL_RCC_OscConfig+0x338>)
 8000880:	400a      	ands	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d014      	beq.n	80008b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800088c:	f7ff fd22 	bl	80002d4 <HAL_GetTick>
 8000890:	0003      	movs	r3, r0
 8000892:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000894:	e008      	b.n	80008a8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000896:	f7ff fd1d 	bl	80002d4 <HAL_GetTick>
 800089a:	0002      	movs	r2, r0
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	2b64      	cmp	r3, #100	; 0x64
 80008a2:	d901      	bls.n	80008a8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80008a4:	2303      	movs	r3, #3
 80008a6:	e28b      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a8:	4b8b      	ldr	r3, [pc, #556]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	4013      	ands	r3, r2
 80008b2:	d0f0      	beq.n	8000896 <HAL_RCC_OscConfig+0xee>
 80008b4:	e015      	b.n	80008e2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008b6:	f7ff fd0d 	bl	80002d4 <HAL_GetTick>
 80008ba:	0003      	movs	r3, r0
 80008bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008be:	e008      	b.n	80008d2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008c0:	f7ff fd08 	bl	80002d4 <HAL_GetTick>
 80008c4:	0002      	movs	r2, r0
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b64      	cmp	r3, #100	; 0x64
 80008cc:	d901      	bls.n	80008d2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e276      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d2:	4b81      	ldr	r3, [pc, #516]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	029b      	lsls	r3, r3, #10
 80008da:	4013      	ands	r3, r2
 80008dc:	d1f0      	bne.n	80008c0 <HAL_RCC_OscConfig+0x118>
 80008de:	e000      	b.n	80008e2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	d100      	bne.n	80008ee <HAL_RCC_OscConfig+0x146>
 80008ec:	e069      	b.n	80009c2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008ee:	4b7a      	ldr	r3, [pc, #488]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	220c      	movs	r2, #12
 80008f4:	4013      	ands	r3, r2
 80008f6:	d00b      	beq.n	8000910 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008f8:	4b77      	ldr	r3, [pc, #476]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	220c      	movs	r2, #12
 80008fe:	4013      	ands	r3, r2
 8000900:	2b08      	cmp	r3, #8
 8000902:	d11c      	bne.n	800093e <HAL_RCC_OscConfig+0x196>
 8000904:	4b74      	ldr	r3, [pc, #464]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	025b      	lsls	r3, r3, #9
 800090c:	4013      	ands	r3, r2
 800090e:	d116      	bne.n	800093e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000910:	4b71      	ldr	r3, [pc, #452]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2202      	movs	r2, #2
 8000916:	4013      	ands	r3, r2
 8000918:	d005      	beq.n	8000926 <HAL_RCC_OscConfig+0x17e>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d001      	beq.n	8000926 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e24c      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000926:	4a6c      	ldr	r2, [pc, #432]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000928:	4b6b      	ldr	r3, [pc, #428]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	21f8      	movs	r1, #248	; 0xf8
 800092e:	438b      	bics	r3, r1
 8000930:	0019      	movs	r1, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	430b      	orrs	r3, r1
 800093a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800093c:	e041      	b.n	80009c2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d024      	beq.n	8000990 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000946:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000948:	4a63      	ldr	r2, [pc, #396]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000952:	f7ff fcbf 	bl	80002d4 <HAL_GetTick>
 8000956:	0003      	movs	r3, r0
 8000958:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800095a:	e008      	b.n	800096e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800095c:	f7ff fcba 	bl	80002d4 <HAL_GetTick>
 8000960:	0002      	movs	r2, r0
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	2b02      	cmp	r3, #2
 8000968:	d901      	bls.n	800096e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800096a:	2303      	movs	r3, #3
 800096c:	e228      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2202      	movs	r2, #2
 8000974:	4013      	ands	r3, r2
 8000976:	d0f1      	beq.n	800095c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000978:	4a57      	ldr	r2, [pc, #348]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800097a:	4b57      	ldr	r3, [pc, #348]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	21f8      	movs	r1, #248	; 0xf8
 8000980:	438b      	bics	r3, r1
 8000982:	0019      	movs	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	430b      	orrs	r3, r1
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	e018      	b.n	80009c2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000990:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000992:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	2101      	movs	r1, #1
 8000998:	438a      	bics	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800099c:	f7ff fc9a 	bl	80002d4 <HAL_GetTick>
 80009a0:	0003      	movs	r3, r0
 80009a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a4:	e008      	b.n	80009b8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a6:	f7ff fc95 	bl	80002d4 <HAL_GetTick>
 80009aa:	0002      	movs	r2, r0
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d901      	bls.n	80009b8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80009b4:	2303      	movs	r3, #3
 80009b6:	e203      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b8:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2202      	movs	r2, #2
 80009be:	4013      	ands	r3, r2
 80009c0:	d1f1      	bne.n	80009a6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2208      	movs	r2, #8
 80009c8:	4013      	ands	r3, r2
 80009ca:	d036      	beq.n	8000a3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d019      	beq.n	8000a08 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009d4:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80009d6:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80009d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009da:	2101      	movs	r1, #1
 80009dc:	430a      	orrs	r2, r1
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009e0:	f7ff fc78 	bl	80002d4 <HAL_GetTick>
 80009e4:	0003      	movs	r3, r0
 80009e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e8:	e008      	b.n	80009fc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ea:	f7ff fc73 	bl	80002d4 <HAL_GetTick>
 80009ee:	0002      	movs	r2, r0
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d901      	bls.n	80009fc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e1e1      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009fc:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 80009fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a00:	2202      	movs	r2, #2
 8000a02:	4013      	ands	r3, r2
 8000a04:	d0f1      	beq.n	80009ea <HAL_RCC_OscConfig+0x242>
 8000a06:	e018      	b.n	8000a3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a08:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000a0a:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a0e:	2101      	movs	r1, #1
 8000a10:	438a      	bics	r2, r1
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a14:	f7ff fc5e 	bl	80002d4 <HAL_GetTick>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a1c:	e008      	b.n	8000a30 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a1e:	f7ff fc59 	bl	80002d4 <HAL_GetTick>
 8000a22:	0002      	movs	r2, r0
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d901      	bls.n	8000a30 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e1c7      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a34:	2202      	movs	r2, #2
 8000a36:	4013      	ands	r3, r2
 8000a38:	d1f1      	bne.n	8000a1e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4013      	ands	r3, r2
 8000a42:	d100      	bne.n	8000a46 <HAL_RCC_OscConfig+0x29e>
 8000a44:	e0b6      	b.n	8000bb4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a46:	231f      	movs	r3, #31
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	055b      	lsls	r3, r3, #21
 8000a56:	4013      	ands	r3, r2
 8000a58:	d111      	bne.n	8000a7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000a5e:	69d2      	ldr	r2, [r2, #28]
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0549      	lsls	r1, r1, #21
 8000a64:	430a      	orrs	r2, r1
 8000a66:	61da      	str	r2, [r3, #28]
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000a6a:	69da      	ldr	r2, [r3, #28]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	055b      	lsls	r3, r3, #21
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a76:	231f      	movs	r3, #31
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_RCC_OscConfig+0x33c>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4013      	ands	r3, r2
 8000a88:	d11a      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_RCC_OscConfig+0x33c>)
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <HAL_RCC_OscConfig+0x33c>)
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	0049      	lsls	r1, r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a98:	f7ff fc1c 	bl	80002d4 <HAL_GetTick>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa0:	e008      	b.n	8000ab4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aa2:	f7ff fc17 	bl	80002d4 <HAL_GetTick>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b64      	cmp	r3, #100	; 0x64
 8000aae:	d901      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e185      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_RCC_OscConfig+0x33c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	d0f0      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d10f      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x340>
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_RCC_OscConfig+0x330>)
 8000acc:	6a12      	ldr	r2, [r2, #32]
 8000ace:	2101      	movs	r1, #1
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	621a      	str	r2, [r3, #32]
 8000ad4:	e036      	b.n	8000b44 <HAL_RCC_OscConfig+0x39c>
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	fffeffff 	.word	0xfffeffff
 8000ae0:	fffbffff 	.word	0xfffbffff
 8000ae4:	40007000 	.word	0x40007000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10c      	bne.n	8000b0a <HAL_RCC_OscConfig+0x362>
 8000af0:	4bb5      	ldr	r3, [pc, #724]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000af2:	4ab5      	ldr	r2, [pc, #724]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000af4:	6a12      	ldr	r2, [r2, #32]
 8000af6:	2101      	movs	r1, #1
 8000af8:	438a      	bics	r2, r1
 8000afa:	621a      	str	r2, [r3, #32]
 8000afc:	4bb2      	ldr	r3, [pc, #712]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000afe:	4ab2      	ldr	r2, [pc, #712]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b00:	6a12      	ldr	r2, [r2, #32]
 8000b02:	2104      	movs	r1, #4
 8000b04:	438a      	bics	r2, r1
 8000b06:	621a      	str	r2, [r3, #32]
 8000b08:	e01c      	b.n	8000b44 <HAL_RCC_OscConfig+0x39c>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	2b05      	cmp	r3, #5
 8000b10:	d10c      	bne.n	8000b2c <HAL_RCC_OscConfig+0x384>
 8000b12:	4bad      	ldr	r3, [pc, #692]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b14:	4aac      	ldr	r2, [pc, #688]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b16:	6a12      	ldr	r2, [r2, #32]
 8000b18:	2104      	movs	r1, #4
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	621a      	str	r2, [r3, #32]
 8000b1e:	4baa      	ldr	r3, [pc, #680]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b20:	4aa9      	ldr	r2, [pc, #676]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b22:	6a12      	ldr	r2, [r2, #32]
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	621a      	str	r2, [r3, #32]
 8000b2a:	e00b      	b.n	8000b44 <HAL_RCC_OscConfig+0x39c>
 8000b2c:	4ba6      	ldr	r3, [pc, #664]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b2e:	4aa6      	ldr	r2, [pc, #664]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b30:	6a12      	ldr	r2, [r2, #32]
 8000b32:	2101      	movs	r1, #1
 8000b34:	438a      	bics	r2, r1
 8000b36:	621a      	str	r2, [r3, #32]
 8000b38:	4ba3      	ldr	r3, [pc, #652]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b3a:	4aa3      	ldr	r2, [pc, #652]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b3c:	6a12      	ldr	r2, [r2, #32]
 8000b3e:	2104      	movs	r1, #4
 8000b40:	438a      	bics	r2, r1
 8000b42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d014      	beq.n	8000b76 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b4c:	f7ff fbc2 	bl	80002d4 <HAL_GetTick>
 8000b50:	0003      	movs	r3, r0
 8000b52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b54:	e009      	b.n	8000b6a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b56:	f7ff fbbd 	bl	80002d4 <HAL_GetTick>
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <HAL_RCC_OscConfig+0x624>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d901      	bls.n	8000b6a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000b66:	2303      	movs	r3, #3
 8000b68:	e12a      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b6a:	4b97      	ldr	r3, [pc, #604]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4013      	ands	r3, r2
 8000b72:	d0f0      	beq.n	8000b56 <HAL_RCC_OscConfig+0x3ae>
 8000b74:	e013      	b.n	8000b9e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b76:	f7ff fbad 	bl	80002d4 <HAL_GetTick>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b7e:	e009      	b.n	8000b94 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b80:	f7ff fba8 	bl	80002d4 <HAL_GetTick>
 8000b84:	0002      	movs	r2, r0
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	4a90      	ldr	r2, [pc, #576]	; (8000dcc <HAL_RCC_OscConfig+0x624>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d901      	bls.n	8000b94 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000b90:	2303      	movs	r3, #3
 8000b92:	e115      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b94:	4b8c      	ldr	r3, [pc, #560]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d1f0      	bne.n	8000b80 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b9e:	231f      	movs	r3, #31
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d105      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ba8:	4b87      	ldr	r3, [pc, #540]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000baa:	4a87      	ldr	r2, [pc, #540]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000bac:	69d2      	ldr	r2, [r2, #28]
 8000bae:	4988      	ldr	r1, [pc, #544]	; (8000dd0 <HAL_RCC_OscConfig+0x628>)
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2210      	movs	r2, #16
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d063      	beq.n	8000c86 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d12a      	bne.n	8000c1c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bc6:	4b80      	ldr	r3, [pc, #512]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000bc8:	4a7f      	ldr	r2, [pc, #508]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000bca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bcc:	2104      	movs	r1, #4
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000bd2:	4b7d      	ldr	r3, [pc, #500]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000bd4:	4a7c      	ldr	r2, [pc, #496]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000bd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bd8:	2101      	movs	r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bde:	f7ff fb79 	bl	80002d4 <HAL_GetTick>
 8000be2:	0003      	movs	r3, r0
 8000be4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000be8:	f7ff fb74 	bl	80002d4 <HAL_GetTick>
 8000bec:	0002      	movs	r2, r0
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e0e2      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bfa:	4b73      	ldr	r3, [pc, #460]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4013      	ands	r3, r2
 8000c02:	d0f1      	beq.n	8000be8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c04:	4a70      	ldr	r2, [pc, #448]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c06:	4b70      	ldr	r3, [pc, #448]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0a:	21f8      	movs	r1, #248	; 0xf8
 8000c0c:	438b      	bics	r3, r1
 8000c0e:	0019      	movs	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	430b      	orrs	r3, r1
 8000c18:	6353      	str	r3, [r2, #52]	; 0x34
 8000c1a:	e034      	b.n	8000c86 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	3305      	adds	r3, #5
 8000c22:	d111      	bne.n	8000c48 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c24:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c26:	4a68      	ldr	r2, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	438a      	bics	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c30:	4a65      	ldr	r2, [pc, #404]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c32:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	21f8      	movs	r1, #248	; 0xf8
 8000c38:	438b      	bics	r3, r1
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6353      	str	r3, [r2, #52]	; 0x34
 8000c46:	e01e      	b.n	8000c86 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c48:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c4a:	4a5f      	ldr	r2, [pc, #380]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c4e:	2104      	movs	r1, #4
 8000c50:	430a      	orrs	r2, r1
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c54:	4b5c      	ldr	r3, [pc, #368]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c56:	4a5c      	ldr	r2, [pc, #368]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	438a      	bics	r2, r1
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c60:	f7ff fb38 	bl	80002d4 <HAL_GetTick>
 8000c64:	0003      	movs	r3, r0
 8000c66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c6a:	f7ff fb33 	bl	80002d4 <HAL_GetTick>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e0a1      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c7c:	4b52      	ldr	r3, [pc, #328]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c80:	2202      	movs	r2, #2
 8000c82:	4013      	ands	r3, r2
 8000c84:	d1f1      	bne.n	8000c6a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <HAL_RCC_OscConfig+0x4e8>
 8000c8e:	e096      	b.n	8000dbe <HAL_RCC_OscConfig+0x616>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	220c      	movs	r2, #12
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d100      	bne.n	8000c9e <HAL_RCC_OscConfig+0x4f6>
 8000c9c:	e06a      	b.n	8000d74 <HAL_RCC_OscConfig+0x5cc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d14b      	bne.n	8000d3e <HAL_RCC_OscConfig+0x596>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ca6:	4b48      	ldr	r3, [pc, #288]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000ca8:	4a47      	ldr	r2, [pc, #284]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	4949      	ldr	r1, [pc, #292]	; (8000dd4 <HAL_RCC_OscConfig+0x62c>)
 8000cae:	400a      	ands	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fb0f 	bl	80002d4 <HAL_GetTick>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cbc:	f7ff fb0a 	bl	80002d4 <HAL_GetTick>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e078      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cce:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	049b      	lsls	r3, r3, #18
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d1f0      	bne.n	8000cbc <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cda:	4a3b      	ldr	r2, [pc, #236]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	438b      	bics	r3, r1
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	430b      	orrs	r3, r1
 8000cec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cee:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000cf0:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4938      	ldr	r1, [pc, #224]	; (8000dd8 <HAL_RCC_OscConfig+0x630>)
 8000cf6:	4019      	ands	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	4303      	orrs	r3, r0
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0449      	lsls	r1, r1, #17
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fade 	bl	80002d4 <HAL_GetTick>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x588>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d1e:	f7ff fad9 	bl	80002d4 <HAL_GetTick>
 8000d22:	0002      	movs	r2, r0
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x588>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e047      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	049b      	lsls	r3, r3, #18
 8000d38:	4013      	ands	r3, r2
 8000d3a:	d0f0      	beq.n	8000d1e <HAL_RCC_OscConfig+0x576>
 8000d3c:	e03f      	b.n	8000dbe <HAL_RCC_OscConfig+0x616>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	4923      	ldr	r1, [pc, #140]	; (8000dd4 <HAL_RCC_OscConfig+0x62c>)
 8000d46:	400a      	ands	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fac3 	bl	80002d4 <HAL_GetTick>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x5be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d54:	f7ff fabe 	bl	80002d4 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x5be>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e02c      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	049b      	lsls	r3, r3, #18
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_OscConfig+0x5ac>
 8000d72:	e024      	b.n	8000dbe <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <HAL_RCC_OscConfig+0x5d8>
      {
        return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e01f      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_RCC_OscConfig+0x620>)
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	025b      	lsls	r3, r3, #9
 8000d92:	401a      	ands	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d10e      	bne.n	8000dba <HAL_RCC_OscConfig+0x612>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	220f      	movs	r2, #15
 8000da0:	401a      	ands	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d107      	bne.n	8000dba <HAL_RCC_OscConfig+0x612>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	23f0      	movs	r3, #240	; 0xf0
 8000dae:	039b      	lsls	r3, r3, #14
 8000db0:	401a      	ands	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d001      	beq.n	8000dbe <HAL_RCC_OscConfig+0x616>
        {
          return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <HAL_RCC_OscConfig+0x618>
        }
      }
    }
  }

  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b008      	add	sp, #32
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	00001388 	.word	0x00001388
 8000dd0:	efffffff 	.word	0xefffffff
 8000dd4:	feffffff 	.word	0xfeffffff
 8000dd8:	ffc2ffff 	.word	0xffc2ffff

08000ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e0b2      	b.n	8000f56 <HAL_RCC_ClockConfig+0x17a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000df0:	4b5b      	ldr	r3, [pc, #364]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2201      	movs	r2, #1
 8000df6:	401a      	ands	r2, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d211      	bcs.n	8000e22 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dfe:	4b58      	ldr	r3, [pc, #352]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000e00:	4a57      	ldr	r2, [pc, #348]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	438a      	bics	r2, r1
 8000e08:	0011      	movs	r1, r2
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e10:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	401a      	ands	r2, r3
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d001      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e099      	b.n	8000f56 <HAL_RCC_ClockConfig+0x17a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2202      	movs	r2, #2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d015      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2204      	movs	r2, #4
 8000e32:	4013      	ands	r3, r2
 8000e34:	d006      	beq.n	8000e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000e36:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000e38:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000e3a:	6852      	ldr	r2, [r2, #4]
 8000e3c:	21e0      	movs	r1, #224	; 0xe0
 8000e3e:	00c9      	lsls	r1, r1, #3
 8000e40:	430a      	orrs	r2, r1
 8000e42:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e44:	4a47      	ldr	r2, [pc, #284]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	21f0      	movs	r1, #240	; 0xf0
 8000e4c:	438b      	bics	r3, r1
 8000e4e:	0019      	movs	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d040      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d107      	bne.n	8000e7a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6a:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	029b      	lsls	r3, r3, #10
 8000e72:	4013      	ands	r3, r2
 8000e74:	d114      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e06d      	b.n	8000f56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d107      	bne.n	8000e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	049b      	lsls	r3, r3, #18
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d108      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e061      	b.n	8000f56 <HAL_RCC_ClockConfig+0x17a>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2202      	movs	r2, #2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e05a      	b.n	8000f56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ea0:	4a30      	ldr	r2, [pc, #192]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000ea2:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	438b      	bics	r3, r1
 8000eaa:	0019      	movs	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000eb4:	f7ff fa0e 	bl	80002d4 <HAL_GetTick>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ebc:	e009      	b.n	8000ed2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebe:	f7ff fa09 	bl	80002d4 <HAL_GetTick>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <HAL_RCC_ClockConfig+0x18c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e041      	b.n	8000f56 <HAL_RCC_ClockConfig+0x17a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	401a      	ands	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d1ec      	bne.n	8000ebe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	401a      	ands	r2, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d911      	bls.n	8000f16 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	438a      	bics	r2, r1
 8000efc:	0011      	movs	r1, r2
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_RCC_ClockConfig+0x184>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d001      	beq.n	8000f16 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e01f      	b.n	8000f56 <HAL_RCC_ClockConfig+0x17a>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d008      	beq.n	8000f32 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f20:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4911      	ldr	r1, [pc, #68]	; (8000f6c <HAL_RCC_ClockConfig+0x190>)
 8000f28:	4019      	ands	r1, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f32:	f000 f821 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
 8000f36:	0001      	movs	r1, r0
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_RCC_ClockConfig+0x188>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	220f      	movs	r2, #15
 8000f40:	4013      	ands	r3, r2
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_RCC_ClockConfig+0x194>)
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
 8000f46:	000a      	movs	r2, r1
 8000f48:	40da      	lsrs	r2, r3
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_RCC_ClockConfig+0x198>)
 8000f4c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff f97a 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40022000 	.word	0x40022000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	00001388 	.word	0x00001388
 8000f6c:	fffff8ff 	.word	0xfffff8ff
 8000f70:	08001eb0 	.word	0x08001eb0
 8000f74:	2000001c 	.word	0x2000001c

08000f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08f      	sub	sp, #60	; 0x3c
 8000f7c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f7e:	2314      	movs	r3, #20
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_RCC_GetSysClockFreq+0xac>)
 8000f84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f86:	c313      	stmia	r3!, {r0, r1, r4}
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f92:	c313      	stmia	r3!, {r0, r1, r4}
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d002      	beq.n	8000fc2 <HAL_RCC_GetSysClockFreq+0x4a>
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d003      	beq.n	8000fc8 <HAL_RCC_GetSysClockFreq+0x50>
 8000fc0:	e027      	b.n	8001012 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fc6:	e027      	b.n	8001018 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	220f      	movs	r2, #15
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2214      	movs	r2, #20
 8000fd2:	18ba      	adds	r2, r7, r2
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	220f      	movs	r2, #15
 8000fde:	4013      	ands	r3, r2
 8000fe0:	1d3a      	adds	r2, r7, #4
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	025b      	lsls	r3, r3, #9
 8000fec:	4013      	ands	r3, r2
 8000fee:	d009      	beq.n	8001004 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ff2:	480f      	ldr	r0, [pc, #60]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ff4:	f7ff f888 	bl	8000108 <__udivsi3>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	4353      	muls	r3, r2
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
 8001002:	e003      	b.n	800100c <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001008:	4353      	muls	r3, r2
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001010:	e002      	b.n	8001018 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001016:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b00f      	add	sp, #60	; 0x3c
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	08001e1c 	.word	0x08001e1c
 8001028:	08001e2c 	.word	0x08001e2c
 800102c:	40021000 	.word	0x40021000
 8001030:	007a1200 	.word	0x007a1200
 8001034:	003d0900 	.word	0x003d0900

08001038 <scanForClick>:
#include "TecladoFuncoes.h"

char scanForClick(unsigned long *tecladoOut, unsigned long *tecladoIn, int N,
		int M) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < N; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e00e      	b.n	800106a <scanForClick+0x32>
		HAL_GPIO_WritePin(GPIOA, tecladoOut[i], LOW);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	18d3      	adds	r3, r2, r3
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b299      	uxth	r1, r3
 8001058:	2390      	movs	r3, #144	; 0x90
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	2200      	movs	r2, #0
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff fb85 	bl	800076e <HAL_GPIO_WritePin>
	for (int i = 0; i < N; i++) {
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbec      	blt.n	800104c <scanForClick+0x14>
	}

	while (1) {
		HAL_GPIO_WritePin(GPIOA, tecladoOut[N - 1], LOW);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a26      	ldr	r2, [pc, #152]	; (8001110 <scanForClick+0xd8>)
 8001076:	4694      	mov	ip, r2
 8001078:	4463      	add	r3, ip
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	18d3      	adds	r3, r2, r3
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b299      	uxth	r1, r3
 8001084:	2390      	movs	r3, #144	; 0x90
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	2200      	movs	r2, #0
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff fb6f 	bl	800076e <HAL_GPIO_WritePin>

		for (int i = 0; i < N; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	e033      	b.n	80010fe <scanForClick+0xc6>
			HAL_GPIO_WritePin(GPIOA, tecladoOut[i], HIGH);
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	2390      	movs	r3, #144	; 0x90
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	2201      	movs	r2, #1
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fb60 	bl	800076e <HAL_GPIO_WritePin>

			if (i > 0)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	dd0e      	ble.n	80010d2 <scanForClick+0x9a>
				HAL_GPIO_WritePin(GPIOA, tecladoOut[i - 1], LOW);
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <scanForClick+0xd8>)
 80010b8:	4694      	mov	ip, r2
 80010ba:	4463      	add	r3, ip
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	18d3      	adds	r3, r2, r3
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	b299      	uxth	r1, r3
 80010c6:	2390      	movs	r3, #144	; 0x90
 80010c8:	05db      	lsls	r3, r3, #23
 80010ca:	2200      	movs	r2, #0
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff fb4e 	bl	800076e <HAL_GPIO_WritePin>

			int col = colPressed(tecladoIn, M);
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 f81b 	bl	8001114 <colPressed>
 80010de:	0003      	movs	r3, r0
 80010e0:	617b      	str	r3, [r7, #20]

			if (col >= 0) {
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db07      	blt.n	80010f8 <scanForClick+0xc0>
				return numPressed(i, col);
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	0011      	movs	r1, r2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 f85e 	bl	80011b0 <numPressed>
 80010f4:	0003      	movs	r3, r0
 80010f6:	e007      	b.n	8001108 <scanForClick+0xd0>
		for (int i = 0; i < N; i++) {
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	3301      	adds	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	dbc7      	blt.n	8001096 <scanForClick+0x5e>
		HAL_GPIO_WritePin(GPIOA, tecladoOut[N - 1], LOW);
 8001106:	e7b4      	b.n	8001072 <scanForClick+0x3a>
			}
		}
	}
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b008      	add	sp, #32
 800110e:	bd80      	pop	{r7, pc}
 8001110:	3fffffff 	.word	0x3fffffff

08001114 <colPressed>:

int colPressed(unsigned long *tecladoIn, int M) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < M; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e012      	b.n	800114a <colPressed+0x36>
		if (HAL_GPIO_ReadPin(GPIOA, tecladoIn[i])) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29a      	uxth	r2, r3
 8001130:	2390      	movs	r3, #144	; 0x90
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff fafc 	bl	8000734 <HAL_GPIO_ReadPin>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d001      	beq.n	8001144 <colPressed+0x30>
			return i;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	e008      	b.n	8001156 <colPressed+0x42>
	for (int i = 0; i < M; i++) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbe8      	blt.n	8001124 <colPressed+0x10>
		}
	}

	return -1;
 8001152:	2301      	movs	r3, #1
 8001154:	425b      	negs	r3, r3
}
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}

0800115e <getDigito>:

char getDigito(unsigned long *tecladoOut, unsigned long *tecladoIn, int N, int M) {
 800115e:	b590      	push	{r4, r7, lr}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800116c:	2390      	movs	r3, #144	; 0x90
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	2201      	movs	r2, #1
 8001172:	2102      	movs	r1, #2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fafa 	bl	800076e <HAL_GPIO_WritePin>
	char digito = scanForClick(tecladoOut, tecladoIn, N, M);
 800117a:	2317      	movs	r3, #23
 800117c:	18fc      	adds	r4, r7, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff ff57 	bl	8001038 <scanForClick>
 800118a:	0003      	movs	r3, r0
 800118c:	7023      	strb	r3, [r4, #0]
	while (colPressed(tecladoIn, 4) != -1)
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2104      	movs	r1, #4
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ffbd 	bl	8001114 <colPressed>
 800119a:	0003      	movs	r3, r0
 800119c:	3301      	adds	r3, #1
 800119e:	d1f7      	bne.n	8001190 <getDigito+0x32>
			;

	return digito;
 80011a0:	2317      	movs	r3, #23
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	781b      	ldrb	r3, [r3, #0]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b007      	add	sp, #28
 80011ac:	bd90      	pop	{r4, r7, pc}
	...

080011b0 <numPressed>:

char numPressed(int linha, int coluna) {
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	char mat[4][4] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' }, { '7', '8', '9', 'C' },
 80011ba:	2308      	movs	r3, #8
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <numPressed+0x30>)
 80011c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011c2:	c313      	stmia	r3!, {r0, r1, r4}
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	601a      	str	r2, [r3, #0]
			{ '*', '0', '#', 'D' } };

	return mat[linha][coluna];
 80011c8:	2308      	movs	r3, #8
 80011ca:	18fa      	adds	r2, r7, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	18d2      	adds	r2, r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	781b      	ldrb	r3, [r3, #0]
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b007      	add	sp, #28
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	08001e3c 	.word	0x08001e3c

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b093      	sub	sp, #76	; 0x4c
 80011e8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f7ff f819 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 fa21 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f000 fa63 	bl	80016bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Inicializa os vetores que armazenam os pinos do teclado
	unsigned long tecladoOut[4] = { GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
 80011f6:	2318      	movs	r3, #24
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	4ad1      	ldr	r2, [pc, #836]	; (8001540 <main+0x35c>)
 80011fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	601a      	str	r2, [r3, #0]
	unsigned long tecladoIn[4] = { GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};
 8001204:	2308      	movs	r3, #8
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	4ace      	ldr	r2, [pc, #824]	; (8001544 <main+0x360>)
 800120a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800120c:	c313      	stmia	r3!, {r0, r1, r4}
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  char digito = getDigito(tecladoOut, tecladoIn, 4, 4);
 8001212:	232b      	movs	r3, #43	; 0x2b
 8001214:	18fc      	adds	r4, r7, r3
 8001216:	2308      	movs	r3, #8
 8001218:	18f9      	adds	r1, r7, r3
 800121a:	2318      	movs	r3, #24
 800121c:	18f8      	adds	r0, r7, r3
 800121e:	2304      	movs	r3, #4
 8001220:	2204      	movs	r2, #4
 8001222:	f7ff ff9c 	bl	800115e <getDigito>
 8001226:	0003      	movs	r3, r0
 8001228:	7023      	strb	r3, [r4, #0]
	  char senha_entrada[4] = {'0', '0', '0', '0'};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4ac6      	ldr	r2, [pc, #792]	; (8001548 <main+0x364>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	601a      	str	r2, [r3, #0]

	  	 if(tentativa < 3 )
 8001232:	4bc6      	ldr	r3, [pc, #792]	; (800154c <main+0x368>)
 8001234:	2200      	movs	r2, #0
 8001236:	5e9b      	ldrsh	r3, [r3, r2]
 8001238:	2b02      	cmp	r3, #2
 800123a:	dd00      	ble.n	800123e <main+0x5a>
 800123c:	e1b3      	b.n	80015a6 <main+0x3c2>
	  	 {
	  		 if (digito == '#')
 800123e:	232b      	movs	r3, #43	; 0x2b
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b23      	cmp	r3, #35	; 0x23
 8001246:	d000      	beq.n	800124a <main+0x66>
 8001248:	e095      	b.n	8001376 <main+0x192>
	  		 {
	  			 for (int i = 0; i < 4; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
 800124e:	e022      	b.n	8001296 <main+0xb2>
	  			 {
	  				 senha_entrada[i] = getDigito(tecladoOut, tecladoIn, 4, 4);
 8001250:	2308      	movs	r3, #8
 8001252:	18f9      	adds	r1, r7, r3
 8001254:	2318      	movs	r3, #24
 8001256:	18f8      	adds	r0, r7, r3
 8001258:	2304      	movs	r3, #4
 800125a:	2204      	movs	r2, #4
 800125c:	f7ff ff7f 	bl	800115e <getDigito>
 8001260:	0003      	movs	r3, r0
 8001262:	0019      	movs	r1, r3
 8001264:	1d3a      	adds	r2, r7, #4
 8001266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	1c0a      	adds	r2, r1, #0
 800126c:	701a      	strb	r2, [r3, #0]
	  				 switch (i)
 800126e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001270:	2b01      	cmp	r3, #1
 8001272:	d007      	beq.n	8001284 <main+0xa0>
 8001274:	2b02      	cmp	r3, #2
 8001276:	d008      	beq.n	800128a <main+0xa6>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d000      	beq.n	800127e <main+0x9a>
	  					break;
	  				 case 2:
	  					Estrela3();
	  					break;
	  				default:
	  					break;
 800127c:	e008      	b.n	8001290 <main+0xac>
	  					Estrela1();
 800127e:	f000 fad3 	bl	8001828 <Estrela1>
	  					break;
 8001282:	e005      	b.n	8001290 <main+0xac>
	  					Estrela2();
 8001284:	f000 faee 	bl	8001864 <Estrela2>
	  					break;
 8001288:	e002      	b.n	8001290 <main+0xac>
	  					Estrela3();
 800128a:	f000 fb01 	bl	8001890 <Estrela3>
	  					break;
 800128e:	46c0      	nop			; (mov r8, r8)
	  			 for (int i = 0; i < 4; i++)
 8001290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001292:	3301      	adds	r3, #1
 8001294:	647b      	str	r3, [r7, #68]	; 0x44
 8001296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001298:	2b03      	cmp	r3, #3
 800129a:	ddd9      	ble.n	8001250 <main+0x6c>
	  				 }
	  			 }
	  			 if (comp(senha_entrada, senha1) == 1)
 800129c:	4aac      	ldr	r2, [pc, #688]	; (8001550 <main+0x36c>)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fa8c 	bl	80017c0 <comp>
 80012a8:	0003      	movs	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d106      	bne.n	80012bc <main+0xd8>
	  			 {
	  				 MandaBits(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 fb24 	bl	80018fc <MandaBits>
	  				 tentativa = 0;
 80012b4:	4ba5      	ldr	r3, [pc, #660]	; (800154c <main+0x368>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	801a      	strh	r2, [r3, #0]
 80012ba:	e05c      	b.n	8001376 <main+0x192>
	  			 }
	  			 else if (comp(senha_entrada, senha2) == 1)
 80012bc:	4aa5      	ldr	r2, [pc, #660]	; (8001554 <main+0x370>)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 fa7c 	bl	80017c0 <comp>
 80012c8:	0003      	movs	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d106      	bne.n	80012dc <main+0xf8>
	  			 {
	  				 MandaBits(2);
 80012ce:	2002      	movs	r0, #2
 80012d0:	f000 fb14 	bl	80018fc <MandaBits>
					 tentativa = 0;
 80012d4:	4b9d      	ldr	r3, [pc, #628]	; (800154c <main+0x368>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]
 80012da:	e04c      	b.n	8001376 <main+0x192>
	  			 }
	  			 else if (comp(senha_entrada, senha3) == 1)
 80012dc:	4a9e      	ldr	r2, [pc, #632]	; (8001558 <main+0x374>)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fa6c 	bl	80017c0 <comp>
 80012e8:	0003      	movs	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d106      	bne.n	80012fc <main+0x118>
				 {
					 MandaBits(3);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f000 fb04 	bl	80018fc <MandaBits>
					 tentativa = 0;
 80012f4:	4b95      	ldr	r3, [pc, #596]	; (800154c <main+0x368>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	e03c      	b.n	8001376 <main+0x192>
				 }
	  			 else if(comp(senha_entrada, senha4) == 1)
 80012fc:	4a97      	ldr	r2, [pc, #604]	; (800155c <main+0x378>)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	0011      	movs	r1, r2
 8001302:	0018      	movs	r0, r3
 8001304:	f000 fa5c 	bl	80017c0 <comp>
 8001308:	0003      	movs	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d106      	bne.n	800131c <main+0x138>
				 {
	  				 MandaBits(4);
 800130e:	2004      	movs	r0, #4
 8001310:	f000 faf4 	bl	80018fc <MandaBits>
					 tentativa = 0;
 8001314:	4b8d      	ldr	r3, [pc, #564]	; (800154c <main+0x368>)
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	e02c      	b.n	8001376 <main+0x192>
				 }
	  			 else if(comp(senha_entrada, senha_m) == 1){
 800131c:	4a90      	ldr	r2, [pc, #576]	; (8001560 <main+0x37c>)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	0011      	movs	r1, r2
 8001322:	0018      	movs	r0, r3
 8001324:	f000 fa4c 	bl	80017c0 <comp>
 8001328:	0003      	movs	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d106      	bne.n	800133c <main+0x158>
	  				 MandaBits(0);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fae4 	bl	80018fc <MandaBits>
	  				 tentativa = 0;
 8001334:	4b85      	ldr	r3, [pc, #532]	; (800154c <main+0x368>)
 8001336:	2200      	movs	r2, #0
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	e01c      	b.n	8001376 <main+0x192>
	  			 }
	  			 else
	  			 {
	  				tentativa++;
 800133c:	4b83      	ldr	r3, [pc, #524]	; (800154c <main+0x368>)
 800133e:	2200      	movs	r2, #0
 8001340:	5e9b      	ldrsh	r3, [r3, r2]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b80      	ldr	r3, [pc, #512]	; (800154c <main+0x368>)
 800134c:	801a      	strh	r2, [r3, #0]
	  				switch (tentativa)
 800134e:	4b7f      	ldr	r3, [pc, #508]	; (800154c <main+0x368>)
 8001350:	2200      	movs	r2, #0
 8001352:	5e9b      	ldrsh	r3, [r3, r2]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d007      	beq.n	8001368 <main+0x184>
 8001358:	2b03      	cmp	r3, #3
 800135a:	d009      	beq.n	8001370 <main+0x18c>
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10a      	bne.n	8001376 <main+0x192>
	  				{
	  				case 1:
	  					MandaBits(8);
 8001360:	2008      	movs	r0, #8
 8001362:	f000 facb 	bl	80018fc <MandaBits>
	  					break;
 8001366:	e006      	b.n	8001376 <main+0x192>
	  				case 2:
	  					MandaBits(9);
 8001368:	2009      	movs	r0, #9
 800136a:	f000 fac7 	bl	80018fc <MandaBits>
	  					break;
 800136e:	e002      	b.n	8001376 <main+0x192>
	  				case 3:
	  					MandaBits(6);
 8001370:	2006      	movs	r0, #6
 8001372:	f000 fac3 	bl	80018fc <MandaBits>
	  				}
	  			 }
	  		 }

	  		 if(digito == '*')
 8001376:	232b      	movs	r3, #43	; 0x2b
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b2a      	cmp	r3, #42	; 0x2a
 800137e:	d000      	beq.n	8001382 <main+0x19e>
 8001380:	e747      	b.n	8001212 <main+0x2e>
	  		 {
	  			MandaBits(5);
 8001382:	2005      	movs	r0, #5
 8001384:	f000 faba 	bl	80018fc <MandaBits>
	  			char n = '0';
 8001388:	232a      	movs	r3, #42	; 0x2a
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	2230      	movs	r2, #48	; 0x30
 800138e:	701a      	strb	r2, [r3, #0]
	  			n = getDigito(tecladoOut, tecladoIn, 4, 4);
 8001390:	232a      	movs	r3, #42	; 0x2a
 8001392:	18fc      	adds	r4, r7, r3
 8001394:	2308      	movs	r3, #8
 8001396:	18f9      	adds	r1, r7, r3
 8001398:	2318      	movs	r3, #24
 800139a:	18f8      	adds	r0, r7, r3
 800139c:	2304      	movs	r3, #4
 800139e:	2204      	movs	r2, #4
 80013a0:	f7ff fedd 	bl	800115e <getDigito>
 80013a4:	0003      	movs	r3, r0
 80013a6:	7023      	strb	r3, [r4, #0]
	  			for(int i = 0; i < 4; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
 80013ac:	e022      	b.n	80013f4 <main+0x210>
	  			{
	  				 senha_entrada[i] = getDigito(tecladoOut, tecladoIn, 4, 4);
 80013ae:	2308      	movs	r3, #8
 80013b0:	18f9      	adds	r1, r7, r3
 80013b2:	2318      	movs	r3, #24
 80013b4:	18f8      	adds	r0, r7, r3
 80013b6:	2304      	movs	r3, #4
 80013b8:	2204      	movs	r2, #4
 80013ba:	f7ff fed0 	bl	800115e <getDigito>
 80013be:	0003      	movs	r3, r0
 80013c0:	0019      	movs	r1, r3
 80013c2:	1d3a      	adds	r2, r7, #4
 80013c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	1c0a      	adds	r2, r1, #0
 80013ca:	701a      	strb	r2, [r3, #0]
	  				 switch (i)
 80013cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d007      	beq.n	80013e2 <main+0x1fe>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d008      	beq.n	80013e8 <main+0x204>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d000      	beq.n	80013dc <main+0x1f8>
						break;
					 case 2:
						Estrela3();
						break;
					 default:
					 	break;
 80013da:	e008      	b.n	80013ee <main+0x20a>
						Estrela1();
 80013dc:	f000 fa24 	bl	8001828 <Estrela1>
						break;
 80013e0:	e005      	b.n	80013ee <main+0x20a>
						Estrela2();
 80013e2:	f000 fa3f 	bl	8001864 <Estrela2>
						break;
 80013e6:	e002      	b.n	80013ee <main+0x20a>
						Estrela3();
 80013e8:	f000 fa52 	bl	8001890 <Estrela3>
						break;
 80013ec:	46c0      	nop			; (mov r8, r8)
	  			for(int i = 0; i < 4; i++)
 80013ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f0:	3301      	adds	r3, #1
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
 80013f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	ddd9      	ble.n	80013ae <main+0x1ca>
					 }
	  			}
	  			if ((n == '1') && (comp(senha_entrada, senha_m)))
 80013fa:	232a      	movs	r3, #42	; 0x2a
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b31      	cmp	r3, #49	; 0x31
 8001402:	d12a      	bne.n	800145a <main+0x276>
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <main+0x37c>)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f000 f9d8 	bl	80017c0 <comp>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d022      	beq.n	800145a <main+0x276>
	  			{
	  				MandaBits(7);
 8001414:	2007      	movs	r0, #7
 8001416:	f000 fa71 	bl	80018fc <MandaBits>
	  				for (int i = 0; i < 4; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800141e:	e015      	b.n	800144c <main+0x268>
					 {
						 senha1[i] = getDigito(tecladoOut, tecladoIn, 4, 4);
 8001420:	2308      	movs	r3, #8
 8001422:	18f9      	adds	r1, r7, r3
 8001424:	2318      	movs	r3, #24
 8001426:	18f8      	adds	r0, r7, r3
 8001428:	2304      	movs	r3, #4
 800142a:	2204      	movs	r2, #4
 800142c:	f7ff fe97 	bl	800115e <getDigito>
 8001430:	0003      	movs	r3, r0
 8001432:	0019      	movs	r1, r3
 8001434:	4a46      	ldr	r2, [pc, #280]	; (8001550 <main+0x36c>)
 8001436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001438:	18d3      	adds	r3, r2, r3
 800143a:	1c0a      	adds	r2, r1, #0
 800143c:	701a      	strb	r2, [r3, #0]
						 Estrelas (i);
 800143e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001440:	0018      	movs	r0, r3
 8001442:	f000 fa41 	bl	80018c8 <Estrelas>
	  				for (int i = 0; i < 4; i++)
 8001446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001448:	3301      	adds	r3, #1
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800144c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800144e:	2b03      	cmp	r3, #3
 8001450:	dde6      	ble.n	8001420 <main+0x23c>
					 }
	  				MandaBits(15);
 8001452:	200f      	movs	r0, #15
 8001454:	f000 fa52 	bl	80018fc <MandaBits>
 8001458:	e0e4      	b.n	8001624 <main+0x440>
	  			}
	  			else if ((n == '2') && (comp(senha_entrada, senha_m)))
 800145a:	232a      	movs	r3, #42	; 0x2a
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b32      	cmp	r3, #50	; 0x32
 8001462:	d12a      	bne.n	80014ba <main+0x2d6>
 8001464:	4a3e      	ldr	r2, [pc, #248]	; (8001560 <main+0x37c>)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	0011      	movs	r1, r2
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f9a8 	bl	80017c0 <comp>
 8001470:	1e03      	subs	r3, r0, #0
 8001472:	d022      	beq.n	80014ba <main+0x2d6>
				{
	  				MandaBits(7);
 8001474:	2007      	movs	r0, #7
 8001476:	f000 fa41 	bl	80018fc <MandaBits>
					for (int i = 0; i < 4; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
 800147e:	e015      	b.n	80014ac <main+0x2c8>
					 {
						 senha2[i] = getDigito(tecladoOut, tecladoIn, 4, 4);
 8001480:	2308      	movs	r3, #8
 8001482:	18f9      	adds	r1, r7, r3
 8001484:	2318      	movs	r3, #24
 8001486:	18f8      	adds	r0, r7, r3
 8001488:	2304      	movs	r3, #4
 800148a:	2204      	movs	r2, #4
 800148c:	f7ff fe67 	bl	800115e <getDigito>
 8001490:	0003      	movs	r3, r0
 8001492:	0019      	movs	r1, r3
 8001494:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <main+0x370>)
 8001496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001498:	18d3      	adds	r3, r2, r3
 800149a:	1c0a      	adds	r2, r1, #0
 800149c:	701a      	strb	r2, [r3, #0]
						 Estrelas (i);
 800149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fa11 	bl	80018c8 <Estrelas>
					for (int i = 0; i < 4; i++)
 80014a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a8:	3301      	adds	r3, #1
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80014ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	dde6      	ble.n	8001480 <main+0x29c>
					 }
					MandaBits(15);
 80014b2:	200f      	movs	r0, #15
 80014b4:	f000 fa22 	bl	80018fc <MandaBits>
 80014b8:	e0b4      	b.n	8001624 <main+0x440>
				}
	  			else if ((n == '3') && (comp(senha_entrada, senha_m)))
 80014ba:	232a      	movs	r3, #42	; 0x2a
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b33      	cmp	r3, #51	; 0x33
 80014c2:	d12a      	bne.n	800151a <main+0x336>
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <main+0x37c>)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 f978 	bl	80017c0 <comp>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d022      	beq.n	800151a <main+0x336>
				{
	  				MandaBits(7);
 80014d4:	2007      	movs	r0, #7
 80014d6:	f000 fa11 	bl	80018fc <MandaBits>
					for (int i = 0; i < 4; i++)
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
 80014de:	e015      	b.n	800150c <main+0x328>
					 {
						 senha3[i] = getDigito(tecladoOut, tecladoIn, 4, 4);
 80014e0:	2308      	movs	r3, #8
 80014e2:	18f9      	adds	r1, r7, r3
 80014e4:	2318      	movs	r3, #24
 80014e6:	18f8      	adds	r0, r7, r3
 80014e8:	2304      	movs	r3, #4
 80014ea:	2204      	movs	r2, #4
 80014ec:	f7ff fe37 	bl	800115e <getDigito>
 80014f0:	0003      	movs	r3, r0
 80014f2:	0019      	movs	r1, r3
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <main+0x374>)
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	1c0a      	adds	r2, r1, #0
 80014fc:	701a      	strb	r2, [r3, #0]
						 Estrelas (i);
 80014fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001500:	0018      	movs	r0, r3
 8001502:	f000 f9e1 	bl	80018c8 <Estrelas>
					for (int i = 0; i < 4; i++)
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	3301      	adds	r3, #1
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
 800150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150e:	2b03      	cmp	r3, #3
 8001510:	dde6      	ble.n	80014e0 <main+0x2fc>
					 }
					MandaBits(15);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f9f2 	bl	80018fc <MandaBits>
 8001518:	e084      	b.n	8001624 <main+0x440>
				}
	  			else if ((n == '4') && (comp(senha_entrada, senha_m)))
 800151a:	232a      	movs	r3, #42	; 0x2a
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b34      	cmp	r3, #52	; 0x34
 8001522:	d13c      	bne.n	800159e <main+0x3ba>
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <main+0x37c>)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	0011      	movs	r1, r2
 800152a:	0018      	movs	r0, r3
 800152c:	f000 f948 	bl	80017c0 <comp>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d034      	beq.n	800159e <main+0x3ba>
				{
	  				MandaBits(7);
 8001534:	2007      	movs	r0, #7
 8001536:	f000 f9e1 	bl	80018fc <MandaBits>
					for (int i = 0; i < 4; i++)
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
 800153e:	e027      	b.n	8001590 <main+0x3ac>
 8001540:	08001e4c 	.word	0x08001e4c
 8001544:	08001e5c 	.word	0x08001e5c
 8001548:	08001e6c 	.word	0x08001e6c
 800154c:	2000003c 	.word	0x2000003c
 8001550:	20000008 	.word	0x20000008
 8001554:	2000000c 	.word	0x2000000c
 8001558:	20000010 	.word	0x20000010
 800155c:	20000014 	.word	0x20000014
 8001560:	20000018 	.word	0x20000018
					 {
						 senha4[i] = getDigito(tecladoOut, tecladoIn, 4, 4);
 8001564:	2308      	movs	r3, #8
 8001566:	18f9      	adds	r1, r7, r3
 8001568:	2318      	movs	r3, #24
 800156a:	18f8      	adds	r0, r7, r3
 800156c:	2304      	movs	r3, #4
 800156e:	2204      	movs	r2, #4
 8001570:	f7ff fdf5 	bl	800115e <getDigito>
 8001574:	0003      	movs	r3, r0
 8001576:	0019      	movs	r1, r3
 8001578:	4a2b      	ldr	r2, [pc, #172]	; (8001628 <main+0x444>)
 800157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157c:	18d3      	adds	r3, r2, r3
 800157e:	1c0a      	adds	r2, r1, #0
 8001580:	701a      	strb	r2, [r3, #0]
						 Estrelas (i);
 8001582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001584:	0018      	movs	r0, r3
 8001586:	f000 f99f 	bl	80018c8 <Estrelas>
					for (int i = 0; i < 4; i++)
 800158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158c:	3301      	adds	r3, #1
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	2b03      	cmp	r3, #3
 8001594:	dde6      	ble.n	8001564 <main+0x380>
					 }
					MandaBits(15);
 8001596:	200f      	movs	r0, #15
 8001598:	f000 f9b0 	bl	80018fc <MandaBits>
 800159c:	e042      	b.n	8001624 <main+0x440>
				}
	  			else
	  			{
	  				MandaBits(14);
 800159e:	200e      	movs	r0, #14
 80015a0:	f000 f9ac 	bl	80018fc <MandaBits>
 80015a4:	e635      	b.n	8001212 <main+0x2e>

	  		 }
	  	 }
	  	 else
	  	 {
	  		 if (digito == '#')
 80015a6:	232b      	movs	r3, #43	; 0x2b
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b23      	cmp	r3, #35	; 0x23
 80015ae:	d000      	beq.n	80015b2 <main+0x3ce>
 80015b0:	e62f      	b.n	8001212 <main+0x2e>
	  		 {
	  			 for (int i = 0; i < 4; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b6:	e022      	b.n	80015fe <main+0x41a>
	  			 {
	  				 senha_entrada[i] = getDigito(tecladoOut, tecladoIn, 4, 4);
 80015b8:	2308      	movs	r3, #8
 80015ba:	18f9      	adds	r1, r7, r3
 80015bc:	2318      	movs	r3, #24
 80015be:	18f8      	adds	r0, r7, r3
 80015c0:	2304      	movs	r3, #4
 80015c2:	2204      	movs	r2, #4
 80015c4:	f7ff fdcb 	bl	800115e <getDigito>
 80015c8:	0003      	movs	r3, r0
 80015ca:	0019      	movs	r1, r3
 80015cc:	1d3a      	adds	r2, r7, #4
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	18d3      	adds	r3, r2, r3
 80015d2:	1c0a      	adds	r2, r1, #0
 80015d4:	701a      	strb	r2, [r3, #0]
	  				 switch (i)
 80015d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d007      	beq.n	80015ec <main+0x408>
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d008      	beq.n	80015f2 <main+0x40e>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d000      	beq.n	80015e6 <main+0x402>
						break;
					 case 2:
						Estrela3();
						break;
					 default:
						 break;
 80015e4:	e008      	b.n	80015f8 <main+0x414>
						Estrela1();
 80015e6:	f000 f91f 	bl	8001828 <Estrela1>
						break;
 80015ea:	e005      	b.n	80015f8 <main+0x414>
						Estrela2();
 80015ec:	f000 f93a 	bl	8001864 <Estrela2>
						break;
 80015f0:	e002      	b.n	80015f8 <main+0x414>
						Estrela3();
 80015f2:	f000 f94d 	bl	8001890 <Estrela3>
						break;
 80015f6:	46c0      	nop			; (mov r8, r8)
	  			 for (int i = 0; i < 4; i++)
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	3301      	adds	r3, #1
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	2b03      	cmp	r3, #3
 8001602:	ddd9      	ble.n	80015b8 <main+0x3d4>
					 }
	  			 }
	  			 if ((comp(senha_entrada, senha_m) == 1))
 8001604:	4a09      	ldr	r2, [pc, #36]	; (800162c <main+0x448>)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	0011      	movs	r1, r2
 800160a:	0018      	movs	r0, r3
 800160c:	f000 f8d8 	bl	80017c0 <comp>
 8001610:	0003      	movs	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d000      	beq.n	8001618 <main+0x434>
 8001616:	e5fc      	b.n	8001212 <main+0x2e>
	  			 {
	  				MandaBits(10);
 8001618:	200a      	movs	r0, #10
 800161a:	f000 f96f 	bl	80018fc <MandaBits>
	  				tentativa = 0;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <main+0x44c>)
 8001620:	2200      	movs	r2, #0
 8001622:	801a      	strh	r2, [r3, #0]
  {
 8001624:	e5f5      	b.n	8001212 <main+0x2e>
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	20000014 	.word	0x20000014
 800162c:	20000018 	.word	0x20000018
 8001630:	2000003c 	.word	0x2000003c

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b090      	sub	sp, #64	; 0x40
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	2310      	movs	r3, #16
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	0018      	movs	r0, r3
 8001640:	2330      	movs	r3, #48	; 0x30
 8001642:	001a      	movs	r2, r3
 8001644:	2100      	movs	r1, #0
 8001646:	f000 fbd5 	bl	8001df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164a:	003b      	movs	r3, r7
 800164c:	0018      	movs	r0, r3
 800164e:	2310      	movs	r3, #16
 8001650:	001a      	movs	r2, r3
 8001652:	2100      	movs	r1, #0
 8001654:	f000 fbce 	bl	8001df4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001658:	2310      	movs	r3, #16
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2202      	movs	r2, #2
 800165e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001660:	2310      	movs	r3, #16
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	2201      	movs	r2, #1
 8001666:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001668:	2310      	movs	r3, #16
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	2210      	movs	r2, #16
 800166e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001670:	2310      	movs	r3, #16
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001678:	2310      	movs	r3, #16
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff f893 	bl	80007a8 <HAL_RCC_OscConfig>
 8001682:	1e03      	subs	r3, r0, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001686:	f000 fb1f 	bl	8001cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168a:	003b      	movs	r3, r7
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001690:	003b      	movs	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	003b      	movs	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169c:	003b      	movs	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016a2:	003b      	movs	r3, r7
 80016a4:	2100      	movs	r1, #0
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff fb98 	bl	8000ddc <HAL_RCC_ClockConfig>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80016b0:	f000 fb0a 	bl	8001cc8 <Error_Handler>
  }
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b010      	add	sp, #64	; 0x40
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	230c      	movs	r3, #12
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	0018      	movs	r0, r3
 80016c8:	2314      	movs	r3, #20
 80016ca:	001a      	movs	r2, r3
 80016cc:	2100      	movs	r1, #0
 80016ce:	f000 fb91 	bl	8001df4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <MX_GPIO_Init+0xf8>)
 80016d4:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <MX_GPIO_Init+0xf8>)
 80016d6:	6952      	ldr	r2, [r2, #20]
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	03c9      	lsls	r1, r1, #15
 80016dc:	430a      	orrs	r2, r1
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <MX_GPIO_Init+0xf8>)
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	03db      	lsls	r3, r3, #15
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <MX_GPIO_Init+0xf8>)
 80016f0:	4a30      	ldr	r2, [pc, #192]	; (80017b4 <MX_GPIO_Init+0xf8>)
 80016f2:	6952      	ldr	r2, [r2, #20]
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	0289      	lsls	r1, r1, #10
 80016f8:	430a      	orrs	r2, r1
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <MX_GPIO_Init+0xf8>)
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	029b      	lsls	r3, r3, #10
 8001704:	4013      	ands	r3, r2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <MX_GPIO_Init+0xfc>)
 800170c:	2200      	movs	r2, #0
 800170e:	2103      	movs	r1, #3
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff f82c 	bl	800076e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001716:	4929      	ldr	r1, [pc, #164]	; (80017bc <MX_GPIO_Init+0x100>)
 8001718:	2390      	movs	r3, #144	; 0x90
 800171a:	05db      	lsls	r3, r3, #23
 800171c:	2200      	movs	r2, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff f825 	bl	800076e <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001724:	230c      	movs	r3, #12
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2203      	movs	r2, #3
 800172a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	230c      	movs	r3, #12
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2201      	movs	r2, #1
 8001732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	230c      	movs	r3, #12
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	230c      	movs	r3, #12
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001744:	230c      	movs	r3, #12
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <MX_GPIO_Init+0xfc>)
 800174a:	0019      	movs	r1, r3
 800174c:	0010      	movs	r0, r2
 800174e:	f7fe fe81 	bl	8000454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001752:	230c      	movs	r3, #12
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	4a19      	ldr	r2, [pc, #100]	; (80017bc <MX_GPIO_Init+0x100>)
 8001758:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	230c      	movs	r3, #12
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2201      	movs	r2, #1
 8001760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	230c      	movs	r3, #12
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	230c      	movs	r3, #12
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	230c      	movs	r3, #12
 8001774:	18fa      	adds	r2, r7, r3
 8001776:	2390      	movs	r3, #144	; 0x90
 8001778:	05db      	lsls	r3, r3, #23
 800177a:	0011      	movs	r1, r2
 800177c:	0018      	movs	r0, r3
 800177e:	f7fe fe69 	bl	8000454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001782:	230c      	movs	r3, #12
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	22f0      	movs	r2, #240	; 0xf0
 8001788:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178a:	230c      	movs	r3, #12
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001792:	230c      	movs	r3, #12
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2202      	movs	r2, #2
 8001798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	230c      	movs	r3, #12
 800179c:	18fa      	adds	r2, r7, r3
 800179e:	2390      	movs	r3, #144	; 0x90
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	0011      	movs	r1, r2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7fe fe55 	bl	8000454 <HAL_GPIO_Init>

}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b008      	add	sp, #32
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48001400 	.word	0x48001400
 80017bc:	0000060f 	.word	0x0000060f

080017c0 <comp>:

/* USER CODE BEGIN 4 */
int comp(char *valor1,char *valor2){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	short ok = 0;
 80017ca:	230e      	movs	r3, #14
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<4;i++){
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	e016      	b.n	8001806 <comp+0x46>
		if(valor1[i]==valor2[i]){
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	18d3      	adds	r3, r2, r3
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	6839      	ldr	r1, [r7, #0]
 80017e4:	18cb      	adds	r3, r1, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d109      	bne.n	8001800 <comp+0x40>
			ok++;
 80017ec:	230e      	movs	r3, #14
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2200      	movs	r2, #0
 80017f2:	5e9b      	ldrsh	r3, [r3, r2]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	230e      	movs	r3, #14
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<4;i++){
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	3301      	adds	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b03      	cmp	r3, #3
 800180a:	dde5      	ble.n	80017d8 <comp+0x18>
		}
	}
	if (ok == 4)
 800180c:	230e      	movs	r3, #14
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	2200      	movs	r2, #0
 8001812:	5e9b      	ldrsh	r3, [r3, r2]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d101      	bne.n	800181c <comp+0x5c>
		return 1;
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <comp+0x5e>
	else
		return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <Estrela1>:
		valor1[i]=valor2[i];
	}
}

void Estrela1 ()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <Estrela1+0x38>)
 800182e:	2201      	movs	r2, #1
 8001830:	2103      	movs	r1, #3
 8001832:	0018      	movs	r0, r3
 8001834:	f7fe ff9b 	bl	800076e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	00d9      	lsls	r1, r3, #3
 800183c:	2390      	movs	r3, #144	; 0x90
 800183e:	05db      	lsls	r3, r3, #23
 8001840:	2201      	movs	r2, #1
 8001842:	0018      	movs	r0, r3
 8001844:	f7fe ff93 	bl	800076e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	0099      	lsls	r1, r3, #2
 800184c:	2390      	movs	r3, #144	; 0x90
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	2200      	movs	r2, #0
 8001852:	0018      	movs	r0, r3
 8001854:	f7fe ff8b 	bl	800076e <HAL_GPIO_WritePin>
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	48001400 	.word	0x48001400

08001864 <Estrela2>:

void Estrela2 ()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <Estrela2+0x28>)
 800186a:	2200      	movs	r2, #0
 800186c:	2103      	movs	r1, #3
 800186e:	0018      	movs	r0, r3
 8001870:	f7fe ff7d 	bl	800076e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10 | GPIO_PIN_9, GPIO_PIN_SET);
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	00d9      	lsls	r1, r3, #3
 8001878:	2390      	movs	r3, #144	; 0x90
 800187a:	05db      	lsls	r3, r3, #23
 800187c:	2201      	movs	r2, #1
 800187e:	0018      	movs	r0, r3
 8001880:	f7fe ff75 	bl	800076e <HAL_GPIO_WritePin>
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	48001400 	.word	0x48001400

08001890 <Estrela3>:

void Estrela3 ()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <Estrela3+0x34>)
 8001896:	2201      	movs	r2, #1
 8001898:	2101      	movs	r1, #1
 800189a:	0018      	movs	r0, r3
 800189c:	f7fe ff67 	bl	800076e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_SET);
 80018a0:	23c0      	movs	r3, #192	; 0xc0
 80018a2:	00d9      	lsls	r1, r3, #3
 80018a4:	2390      	movs	r3, #144	; 0x90
 80018a6:	05db      	lsls	r3, r3, #23
 80018a8:	2201      	movs	r2, #1
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7fe ff5f 	bl	800076e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <Estrela3+0x34>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	2102      	movs	r1, #2
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe ff59 	bl	800076e <HAL_GPIO_WritePin>
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	48001400 	.word	0x48001400

080018c8 <Estrelas>:


void Estrelas (int i)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	switch (i)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d007      	beq.n	80018e6 <Estrelas+0x1e>
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d008      	beq.n	80018ec <Estrelas+0x24>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d000      	beq.n	80018e0 <Estrelas+0x18>
		break;
	 case 2:
		Estrela3();
		break;
	 default:
	 	break;
 80018de:	e008      	b.n	80018f2 <Estrelas+0x2a>
		Estrela1();
 80018e0:	f7ff ffa2 	bl	8001828 <Estrela1>
		break;
 80018e4:	e005      	b.n	80018f2 <Estrelas+0x2a>
		Estrela2();
 80018e6:	f7ff ffbd 	bl	8001864 <Estrela2>
		break;
 80018ea:	e002      	b.n	80018f2 <Estrelas+0x2a>
		Estrela3();
 80018ec:	f7ff ffd0 	bl	8001890 <Estrela3>
		break;
 80018f0:	46c0      	nop			; (mov r8, r8)
	 }
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <MandaBits>:

void MandaBits(int x){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

	switch (x)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	d900      	bls.n	800190c <MandaBits+0x10>
 800190a:	e1d5      	b.n	8001cb8 <MandaBits+0x3bc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	009a      	lsls	r2, r3, #2
 8001910:	4beb      	ldr	r3, [pc, #940]	; (8001cc0 <MandaBits+0x3c4>)
 8001912:	18d3      	adds	r3, r2, r3
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	469f      	mov	pc, r3
	 {
	case 0:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001918:	4bea      	ldr	r3, [pc, #936]	; (8001cc4 <MandaBits+0x3c8>)
 800191a:	2200      	movs	r2, #0
 800191c:	2102      	movs	r1, #2
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe ff25 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	0099      	lsls	r1, r3, #2
 8001928:	2390      	movs	r3, #144	; 0x90
 800192a:	05db      	lsls	r3, r3, #23
 800192c:	2200      	movs	r2, #0
 800192e:	0018      	movs	r0, r3
 8001930:	f7fe ff1d 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001934:	4be3      	ldr	r3, [pc, #908]	; (8001cc4 <MandaBits+0x3c8>)
 8001936:	2200      	movs	r2, #0
 8001938:	2101      	movs	r1, #1
 800193a:	0018      	movs	r0, r3
 800193c:	f7fe ff17 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	00d9      	lsls	r1, r3, #3
 8001944:	2390      	movs	r3, #144	; 0x90
 8001946:	05db      	lsls	r3, r3, #23
 8001948:	2200      	movs	r2, #0
 800194a:	0018      	movs	r0, r3
 800194c:	f7fe ff0f 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001950:	e1b2      	b.n	8001cb8 <MandaBits+0x3bc>
	case 1:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001952:	4bdc      	ldr	r3, [pc, #880]	; (8001cc4 <MandaBits+0x3c8>)
 8001954:	2200      	movs	r2, #0
 8001956:	2102      	movs	r1, #2
 8001958:	0018      	movs	r0, r3
 800195a:	f7fe ff08 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	0099      	lsls	r1, r3, #2
 8001962:	2390      	movs	r3, #144	; 0x90
 8001964:	05db      	lsls	r3, r3, #23
 8001966:	2200      	movs	r2, #0
 8001968:	0018      	movs	r0, r3
 800196a:	f7fe ff00 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 800196e:	4bd5      	ldr	r3, [pc, #852]	; (8001cc4 <MandaBits+0x3c8>)
 8001970:	2201      	movs	r2, #1
 8001972:	2101      	movs	r1, #1
 8001974:	0018      	movs	r0, r3
 8001976:	f7fe fefa 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	00d9      	lsls	r1, r3, #3
 800197e:	2390      	movs	r3, #144	; 0x90
 8001980:	05db      	lsls	r3, r3, #23
 8001982:	2200      	movs	r2, #0
 8001984:	0018      	movs	r0, r3
 8001986:	f7fe fef2 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 800198a:	e195      	b.n	8001cb8 <MandaBits+0x3bc>

	case 2:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 800198c:	4bcd      	ldr	r3, [pc, #820]	; (8001cc4 <MandaBits+0x3c8>)
 800198e:	2201      	movs	r2, #1
 8001990:	2102      	movs	r1, #2
 8001992:	0018      	movs	r0, r3
 8001994:	f7fe feeb 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	0099      	lsls	r1, r3, #2
 800199c:	2390      	movs	r3, #144	; 0x90
 800199e:	05db      	lsls	r3, r3, #23
 80019a0:	2200      	movs	r2, #0
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7fe fee3 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80019a8:	4bc6      	ldr	r3, [pc, #792]	; (8001cc4 <MandaBits+0x3c8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7fe fedd 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	00d9      	lsls	r1, r3, #3
 80019b8:	2390      	movs	r3, #144	; 0x90
 80019ba:	05db      	lsls	r3, r3, #23
 80019bc:	2200      	movs	r2, #0
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe fed5 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 80019c4:	e178      	b.n	8001cb8 <MandaBits+0x3bc>

	case 3:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 80019c6:	4bbf      	ldr	r3, [pc, #764]	; (8001cc4 <MandaBits+0x3c8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	2102      	movs	r1, #2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7fe fece 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	0099      	lsls	r1, r3, #2
 80019d6:	2390      	movs	r3, #144	; 0x90
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	2200      	movs	r2, #0
 80019dc:	0018      	movs	r0, r3
 80019de:	f7fe fec6 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 80019e2:	4bb8      	ldr	r3, [pc, #736]	; (8001cc4 <MandaBits+0x3c8>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	2101      	movs	r1, #1
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7fe fec0 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	00d9      	lsls	r1, r3, #3
 80019f2:	2390      	movs	r3, #144	; 0x90
 80019f4:	05db      	lsls	r3, r3, #23
 80019f6:	2200      	movs	r2, #0
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7fe feb8 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 80019fe:	e15b      	b.n	8001cb8 <MandaBits+0x3bc>

	case 4:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a00:	4bb0      	ldr	r3, [pc, #704]	; (8001cc4 <MandaBits+0x3c8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	2102      	movs	r1, #2
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7fe feb1 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	2390      	movs	r3, #144	; 0x90
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	2201      	movs	r2, #1
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7fe fea9 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a1c:	4ba9      	ldr	r3, [pc, #676]	; (8001cc4 <MandaBits+0x3c8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7fe fea3 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	00d9      	lsls	r1, r3, #3
 8001a2c:	2390      	movs	r3, #144	; 0x90
 8001a2e:	05db      	lsls	r3, r3, #23
 8001a30:	2200      	movs	r2, #0
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7fe fe9b 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001a38:	e13e      	b.n	8001cb8 <MandaBits+0x3bc>

	case 5:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a3a:	4ba2      	ldr	r3, [pc, #648]	; (8001cc4 <MandaBits+0x3c8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2102      	movs	r1, #2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7fe fe94 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	0099      	lsls	r1, r3, #2
 8001a4a:	2390      	movs	r3, #144	; 0x90
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	2201      	movs	r2, #1
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7fe fe8c 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001a56:	4b9b      	ldr	r3, [pc, #620]	; (8001cc4 <MandaBits+0x3c8>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7fe fe86 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	00d9      	lsls	r1, r3, #3
 8001a66:	2390      	movs	r3, #144	; 0x90
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7fe fe7e 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001a72:	e121      	b.n	8001cb8 <MandaBits+0x3bc>

	case 6:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8001a74:	4b93      	ldr	r3, [pc, #588]	; (8001cc4 <MandaBits+0x3c8>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	2102      	movs	r1, #2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7fe fe77 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	0099      	lsls	r1, r3, #2
 8001a84:	2390      	movs	r3, #144	; 0x90
 8001a86:	05db      	lsls	r3, r3, #23
 8001a88:	2201      	movs	r2, #1
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7fe fe6f 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a90:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <MandaBits+0x3c8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	2101      	movs	r1, #1
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7fe fe69 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	00d9      	lsls	r1, r3, #3
 8001aa0:	2390      	movs	r3, #144	; 0x90
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7fe fe61 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001aac:	e104      	b.n	8001cb8 <MandaBits+0x3bc>

	case 7:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <MandaBits+0x3c8>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe fe5a 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	0099      	lsls	r1, r3, #2
 8001abe:	2390      	movs	r3, #144	; 0x90
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7fe fe52 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001aca:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <MandaBits+0x3c8>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	2101      	movs	r1, #1
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7fe fe4c 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	00d9      	lsls	r1, r3, #3
 8001ada:	2390      	movs	r3, #144	; 0x90
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	2200      	movs	r2, #0
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7fe fe44 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001ae6:	e0e7      	b.n	8001cb8 <MandaBits+0x3bc>

	case 8:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ae8:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <MandaBits+0x3c8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	2102      	movs	r1, #2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fe3d 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	0099      	lsls	r1, r3, #2
 8001af8:	2390      	movs	r3, #144	; 0x90
 8001afa:	05db      	lsls	r3, r3, #23
 8001afc:	2200      	movs	r2, #0
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7fe fe35 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <MandaBits+0x3c8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	2101      	movs	r1, #1
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7fe fe2f 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	00d9      	lsls	r1, r3, #3
 8001b14:	2390      	movs	r3, #144	; 0x90
 8001b16:	05db      	lsls	r3, r3, #23
 8001b18:	2201      	movs	r2, #1
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7fe fe27 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001b20:	e0ca      	b.n	8001cb8 <MandaBits+0x3bc>

	case 9:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b22:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <MandaBits+0x3c8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	2102      	movs	r1, #2
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7fe fe20 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	0099      	lsls	r1, r3, #2
 8001b32:	2390      	movs	r3, #144	; 0x90
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	2200      	movs	r2, #0
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7fe fe18 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <MandaBits+0x3c8>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	2101      	movs	r1, #1
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7fe fe12 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	00d9      	lsls	r1, r3, #3
 8001b4e:	2390      	movs	r3, #144	; 0x90
 8001b50:	05db      	lsls	r3, r3, #23
 8001b52:	2201      	movs	r2, #1
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7fe fe0a 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001b5a:	e0ad      	b.n	8001cb8 <MandaBits+0x3bc>

	case 10:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <MandaBits+0x3c8>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2102      	movs	r1, #2
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7fe fe03 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	0099      	lsls	r1, r3, #2
 8001b6c:	2390      	movs	r3, #144	; 0x90
 8001b6e:	05db      	lsls	r3, r3, #23
 8001b70:	2200      	movs	r2, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7fe fdfb 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b78:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <MandaBits+0x3c8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7fe fdf5 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	00d9      	lsls	r1, r3, #3
 8001b88:	2390      	movs	r3, #144	; 0x90
 8001b8a:	05db      	lsls	r3, r3, #23
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7fe fded 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001b94:	e090      	b.n	8001cb8 <MandaBits+0x3bc>

	case 11:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8001b96:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <MandaBits+0x3c8>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7fe fde6 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	0099      	lsls	r1, r3, #2
 8001ba6:	2390      	movs	r3, #144	; 0x90
 8001ba8:	05db      	lsls	r3, r3, #23
 8001baa:	2200      	movs	r2, #0
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7fe fdde 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <MandaBits+0x3c8>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fdd8 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	00d9      	lsls	r1, r3, #3
 8001bc2:	2390      	movs	r3, #144	; 0x90
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7fe fdd0 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001bce:	e073      	b.n	8001cb8 <MandaBits+0x3bc>

	case 12:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <MandaBits+0x3c8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7fe fdc9 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	0099      	lsls	r1, r3, #2
 8001be0:	2390      	movs	r3, #144	; 0x90
 8001be2:	05db      	lsls	r3, r3, #23
 8001be4:	2201      	movs	r2, #1
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7fe fdc1 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <MandaBits+0x3c8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7fe fdbb 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	00d9      	lsls	r1, r3, #3
 8001bfc:	2390      	movs	r3, #144	; 0x90
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	2201      	movs	r2, #1
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7fe fdb3 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001c08:	e056      	b.n	8001cb8 <MandaBits+0x3bc>

	case 13:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <MandaBits+0x3c8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2102      	movs	r1, #2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe fdac 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	0099      	lsls	r1, r3, #2
 8001c1a:	2390      	movs	r3, #144	; 0x90
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	2201      	movs	r2, #1
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7fe fda4 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <MandaBits+0x3c8>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7fe fd9e 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	00d9      	lsls	r1, r3, #3
 8001c36:	2390      	movs	r3, #144	; 0x90
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7fe fd96 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001c42:	e039      	b.n	8001cb8 <MandaBits+0x3bc>

	case 14:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MandaBits+0x3c8>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	2102      	movs	r1, #2
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7fe fd8f 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	0099      	lsls	r1, r3, #2
 8001c54:	2390      	movs	r3, #144	; 0x90
 8001c56:	05db      	lsls	r3, r3, #23
 8001c58:	2201      	movs	r2, #1
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7fe fd87 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MandaBits+0x3c8>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	2101      	movs	r1, #1
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fd81 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	00d9      	lsls	r1, r3, #3
 8001c70:	2390      	movs	r3, #144	; 0x90
 8001c72:	05db      	lsls	r3, r3, #23
 8001c74:	2201      	movs	r2, #1
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7fe fd79 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001c7c:	e01c      	b.n	8001cb8 <MandaBits+0x3bc>
	case 15:
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MandaBits+0x3c8>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	2102      	movs	r1, #2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fd72 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	0099      	lsls	r1, r3, #2
 8001c8e:	2390      	movs	r3, #144	; 0x90
 8001c90:	05db      	lsls	r3, r3, #23
 8001c92:	2201      	movs	r2, #1
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7fe fd6a 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MandaBits+0x3c8>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe fd64 	bl	800076e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	00d9      	lsls	r1, r3, #3
 8001caa:	2390      	movs	r3, #144	; 0x90
 8001cac:	05db      	lsls	r3, r3, #23
 8001cae:	2201      	movs	r2, #1
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7fe fd5c 	bl	800076e <HAL_GPIO_WritePin>
		   break;
 8001cb6:	46c0      	nop			; (mov r8, r8)
	}




}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08001e70 	.word	0x08001e70
 8001cc4:	48001400 	.word	0x48001400

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_MspInit+0x44>)
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_MspInit+0x44>)
 8001cde:	6992      	ldr	r2, [r2, #24]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	619a      	str	r2, [r3, #24]
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_MspInit+0x44>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2201      	movs	r2, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_MspInit+0x44>)
 8001cf4:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_MspInit+0x44>)
 8001cf6:	69d2      	ldr	r2, [r2, #28]
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0549      	lsls	r1, r1, #21
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	61da      	str	r2, [r3, #28]
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_MspInit+0x44>)
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	055b      	lsls	r3, r3, #21
 8001d08:	4013      	ands	r3, r2
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40021000 	.word	0x40021000

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f7fe fab4 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d74:	4c0b      	ldr	r4, [pc, #44]	; (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d82:	f7ff ffe4 	bl	8001d4e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d86:	f000 f811 	bl	8001dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8a:	f7ff fa2b 	bl	80011e4 <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   r0, =_estack
 8001d90:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001d9c:	08001ec8 	.word	0x08001ec8
  ldr r2, =_sbss
 8001da0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001da4:	20000044 	.word	0x20000044

08001da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_IRQHandler>
	...

08001dac <__libc_init_array>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	2600      	movs	r6, #0
 8001db0:	4d0c      	ldr	r5, [pc, #48]	; (8001de4 <__libc_init_array+0x38>)
 8001db2:	4c0d      	ldr	r4, [pc, #52]	; (8001de8 <__libc_init_array+0x3c>)
 8001db4:	1b64      	subs	r4, r4, r5
 8001db6:	10a4      	asrs	r4, r4, #2
 8001db8:	42a6      	cmp	r6, r4
 8001dba:	d109      	bne.n	8001dd0 <__libc_init_array+0x24>
 8001dbc:	2600      	movs	r6, #0
 8001dbe:	f000 f821 	bl	8001e04 <_init>
 8001dc2:	4d0a      	ldr	r5, [pc, #40]	; (8001dec <__libc_init_array+0x40>)
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	; (8001df0 <__libc_init_array+0x44>)
 8001dc6:	1b64      	subs	r4, r4, r5
 8001dc8:	10a4      	asrs	r4, r4, #2
 8001dca:	42a6      	cmp	r6, r4
 8001dcc:	d105      	bne.n	8001dda <__libc_init_array+0x2e>
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	00b3      	lsls	r3, r6, #2
 8001dd2:	58eb      	ldr	r3, [r5, r3]
 8001dd4:	4798      	blx	r3
 8001dd6:	3601      	adds	r6, #1
 8001dd8:	e7ee      	b.n	8001db8 <__libc_init_array+0xc>
 8001dda:	00b3      	lsls	r3, r6, #2
 8001ddc:	58eb      	ldr	r3, [r5, r3]
 8001dde:	4798      	blx	r3
 8001de0:	3601      	adds	r6, #1
 8001de2:	e7f2      	b.n	8001dca <__libc_init_array+0x1e>
 8001de4:	08001ec0 	.word	0x08001ec0
 8001de8:	08001ec0 	.word	0x08001ec0
 8001dec:	08001ec0 	.word	0x08001ec0
 8001df0:	08001ec4 	.word	0x08001ec4

08001df4 <memset>:
 8001df4:	0003      	movs	r3, r0
 8001df6:	1882      	adds	r2, r0, r2
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d100      	bne.n	8001dfe <memset+0xa>
 8001dfc:	4770      	bx	lr
 8001dfe:	7019      	strb	r1, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	e7f9      	b.n	8001df8 <memset+0x4>

08001e04 <_init>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr

08001e10 <_fini>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr
