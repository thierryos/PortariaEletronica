
ControleDeEntrada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  20000000  08003d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000044c  200000b4  08003e40  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000500  08003e40  00020500  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000089da  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a59  00000000  00000000  00028ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009b8  00000000  00000000  0002a510  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a0  00000000  00000000  0002aec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003ee4  00000000  00000000  0002b768  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ba0  00000000  00000000  0002f64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000321ec  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000020cc  00000000  00000000  00032268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b4 	.word	0x200000b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036a0 	.word	0x080036a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b8 	.word	0x200000b8
 8000104:	080036a0 	.word	0x080036a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fc:	6812      	ldr	r2, [r2, #0]
 80003fe:	2110      	movs	r1, #16
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f809 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040a:	f003 f80d 	bl	8003428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <HAL_InitTick+0x5c>)
 8000426:	681c      	ldr	r4, [r3, #0]
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <HAL_InitTick+0x60>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	0019      	movs	r1, r3
 800042e:	23fa      	movs	r3, #250	; 0xfa
 8000430:	0098      	lsls	r0, r3, #2
 8000432:	f7ff fe69 	bl	8000108 <__udivsi3>
 8000436:	0003      	movs	r3, r0
 8000438:	0019      	movs	r1, r3
 800043a:	0020      	movs	r0, r4
 800043c:	f7ff fe64 	bl	8000108 <__udivsi3>
 8000440:	0003      	movs	r3, r0
 8000442:	0018      	movs	r0, r3
 8000444:	f000 f904 	bl	8000650 <HAL_SYSTICK_Config>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800044c:	2301      	movs	r3, #1
 800044e:	e00f      	b.n	8000470 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d80b      	bhi.n	800046e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	2301      	movs	r3, #1
 800045a:	425b      	negs	r3, r3
 800045c:	2200      	movs	r2, #0
 800045e:	0018      	movs	r0, r3
 8000460:	f000 f8e0 	bl	8000624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_InitTick+0x64>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800046a:	2300      	movs	r3, #0
 800046c:	e000      	b.n	8000470 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
}
 8000470:	0018      	movs	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	b003      	add	sp, #12
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	200000b0 	.word	0x200000b0
 800047c:	20000004 	.word	0x20000004
 8000480:	20000000 	.word	0x20000000

08000484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_IncTick+0x1c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	001a      	movs	r2, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HAL_IncTick+0x20>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	18d2      	adds	r2, r2, r3
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <HAL_IncTick+0x20>)
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	20000004 	.word	0x20000004
 80004a4:	200000d0 	.word	0x200000d0

080004a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  return uwTick;
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <HAL_GetTick+0x10>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	200000d0 	.word	0x200000d0

080004bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004c4:	f7ff fff0 	bl	80004a8 <HAL_GetTick>
 80004c8:	0003      	movs	r3, r0
 80004ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	d005      	beq.n	80004e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_Delay+0x40>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	001a      	movs	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	189b      	adds	r3, r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	f7ff ffe0 	bl	80004a8 <HAL_GetTick>
 80004e8:	0002      	movs	r2, r0
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	1ad2      	subs	r2, r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3f7      	bcc.n	80004e4 <HAL_Delay+0x28>
  {
  }
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000004 	.word	0x20000004

08000500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b7f      	cmp	r3, #127	; 0x7f
 8000514:	d828      	bhi.n	8000568 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000516:	4c2f      	ldr	r4, [pc, #188]	; (80005d4 <__NVIC_SetPriority+0xd4>)
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b25b      	sxtb	r3, r3
 800051e:	089b      	lsrs	r3, r3, #2
 8000520:	492c      	ldr	r1, [pc, #176]	; (80005d4 <__NVIC_SetPriority+0xd4>)
 8000522:	1dfa      	adds	r2, r7, #7
 8000524:	7812      	ldrb	r2, [r2, #0]
 8000526:	b252      	sxtb	r2, r2
 8000528:	0892      	lsrs	r2, r2, #2
 800052a:	32c0      	adds	r2, #192	; 0xc0
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	5852      	ldr	r2, [r2, r1]
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	7809      	ldrb	r1, [r1, #0]
 8000534:	0008      	movs	r0, r1
 8000536:	2103      	movs	r1, #3
 8000538:	4001      	ands	r1, r0
 800053a:	00c9      	lsls	r1, r1, #3
 800053c:	20ff      	movs	r0, #255	; 0xff
 800053e:	4088      	lsls	r0, r1
 8000540:	0001      	movs	r1, r0
 8000542:	43c9      	mvns	r1, r1
 8000544:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	0192      	lsls	r2, r2, #6
 800054a:	20ff      	movs	r0, #255	; 0xff
 800054c:	4010      	ands	r0, r2
 800054e:	1dfa      	adds	r2, r7, #7
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	0015      	movs	r5, r2
 8000554:	2203      	movs	r2, #3
 8000556:	402a      	ands	r2, r5
 8000558:	00d2      	lsls	r2, r2, #3
 800055a:	4090      	lsls	r0, r2
 800055c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055e:	430a      	orrs	r2, r1
 8000560:	33c0      	adds	r3, #192	; 0xc0
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000566:	e031      	b.n	80005cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000568:	4c1b      	ldr	r4, [pc, #108]	; (80005d8 <__NVIC_SetPriority+0xd8>)
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	001a      	movs	r2, r3
 8000570:	230f      	movs	r3, #15
 8000572:	4013      	ands	r3, r2
 8000574:	3b08      	subs	r3, #8
 8000576:	0899      	lsrs	r1, r3, #2
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <__NVIC_SetPriority+0xd8>)
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	0018      	movs	r0, r3
 8000580:	230f      	movs	r3, #15
 8000582:	4003      	ands	r3, r0
 8000584:	3b08      	subs	r3, #8
 8000586:	089b      	lsrs	r3, r3, #2
 8000588:	3306      	adds	r3, #6
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	3304      	adds	r3, #4
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	1dfa      	adds	r2, r7, #7
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	0010      	movs	r0, r2
 8000598:	2203      	movs	r2, #3
 800059a:	4002      	ands	r2, r0
 800059c:	00d2      	lsls	r2, r2, #3
 800059e:	20ff      	movs	r0, #255	; 0xff
 80005a0:	4090      	lsls	r0, r2
 80005a2:	0002      	movs	r2, r0
 80005a4:	43d2      	mvns	r2, r2
 80005a6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	20ff      	movs	r0, #255	; 0xff
 80005ae:	4018      	ands	r0, r3
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	001d      	movs	r5, r3
 80005b6:	2303      	movs	r3, #3
 80005b8:	402b      	ands	r3, r5
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	4098      	lsls	r0, r3
 80005be:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005c0:	431a      	orrs	r2, r3
 80005c2:	1d8b      	adds	r3, r1, #6
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	18e3      	adds	r3, r4, r3
 80005c8:	3304      	adds	r3, #4
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bdb0      	pop	{r4, r5, r7, pc}
 80005d4:	e000e100 	.word	0xe000e100
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <SysTick_Config+0x40>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d901      	bls.n	80005f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ee:	2301      	movs	r3, #1
 80005f0:	e010      	b.n	8000614 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <SysTick_Config+0x44>)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	3a01      	subs	r2, #1
 80005f8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005fa:	2301      	movs	r3, #1
 80005fc:	425b      	negs	r3, r3
 80005fe:	2103      	movs	r1, #3
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ff7d 	bl	8000500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SysTick_Config+0x44>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <SysTick_Config+0x44>)
 800060e:	2207      	movs	r2, #7
 8000610:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000612:	2300      	movs	r3, #0
}
 8000614:	0018      	movs	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}
 800061c:	00ffffff 	.word	0x00ffffff
 8000620:	e000e010 	.word	0xe000e010

08000624 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
 800062e:	230f      	movs	r3, #15
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	1c02      	adds	r2, r0, #0
 8000634:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	230f      	movs	r3, #15
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff ff5c 	bl	8000500 <__NVIC_SetPriority>
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b004      	add	sp, #16
 800064e:	bd80      	pop	{r7, pc}

08000650 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff ffbe 	bl	80005dc <SysTick_Config>
 8000660:	0003      	movs	r3, r0
}
 8000662:	0018      	movs	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800067a:	e14f      	b.n	800091c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2101      	movs	r1, #1
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	4091      	lsls	r1, r2
 8000686:	000a      	movs	r2, r1
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d100      	bne.n	8000694 <HAL_GPIO_Init+0x28>
 8000692:	e140      	b.n	8000916 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d003      	beq.n	80006a4 <HAL_GPIO_Init+0x38>
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	2b12      	cmp	r3, #18
 80006a2:	d123      	bne.n	80006ec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	08da      	lsrs	r2, r3, #3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3208      	adds	r2, #8
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	58d3      	ldr	r3, [r2, r3]
 80006b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2207      	movs	r2, #7
 80006b6:	4013      	ands	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	220f      	movs	r2, #15
 80006bc:	409a      	lsls	r2, r3
 80006be:	0013      	movs	r3, r2
 80006c0:	43da      	mvns	r2, r3
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	4013      	ands	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	691a      	ldr	r2, [r3, #16]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2107      	movs	r1, #7
 80006d0:	400b      	ands	r3, r1
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	409a      	lsls	r2, r3
 80006d6:	0013      	movs	r3, r2
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	4313      	orrs	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	08da      	lsrs	r2, r3, #3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3208      	adds	r2, #8
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	6939      	ldr	r1, [r7, #16]
 80006ea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2203      	movs	r2, #3
 80006f8:	409a      	lsls	r2, r3
 80006fa:	0013      	movs	r3, r2
 80006fc:	43da      	mvns	r2, r3
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2203      	movs	r2, #3
 800070a:	401a      	ands	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	409a      	lsls	r2, r3
 8000712:	0013      	movs	r3, r2
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	4313      	orrs	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d00b      	beq.n	8000740 <HAL_GPIO_Init+0xd4>
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d007      	beq.n	8000740 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000734:	2b11      	cmp	r3, #17
 8000736:	d003      	beq.n	8000740 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b12      	cmp	r3, #18
 800073e:	d130      	bne.n	80007a2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	2203      	movs	r2, #3
 800074c:	409a      	lsls	r2, r3
 800074e:	0013      	movs	r3, r2
 8000750:	43da      	mvns	r2, r3
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	4013      	ands	r3, r2
 8000756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	409a      	lsls	r2, r3
 8000762:	0013      	movs	r3, r2
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	4313      	orrs	r3, r2
 8000768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000776:	2201      	movs	r2, #1
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
 800077c:	0013      	movs	r3, r2
 800077e:	43da      	mvns	r2, r3
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	4013      	ands	r3, r2
 8000784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	091b      	lsrs	r3, r3, #4
 800078c:	2201      	movs	r2, #1
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
 8000794:	0013      	movs	r3, r2
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	4313      	orrs	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2203      	movs	r2, #3
 80007ae:	409a      	lsls	r2, r3
 80007b0:	0013      	movs	r3, r2
 80007b2:	43da      	mvns	r2, r3
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	4013      	ands	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	409a      	lsls	r2, r3
 80007c4:	0013      	movs	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	055b      	lsls	r3, r3, #21
 80007da:	4013      	ands	r3, r2
 80007dc:	d100      	bne.n	80007e0 <HAL_GPIO_Init+0x174>
 80007de:	e09a      	b.n	8000916 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e0:	4b54      	ldr	r3, [pc, #336]	; (8000934 <HAL_GPIO_Init+0x2c8>)
 80007e2:	4a54      	ldr	r2, [pc, #336]	; (8000934 <HAL_GPIO_Init+0x2c8>)
 80007e4:	6992      	ldr	r2, [r2, #24]
 80007e6:	2101      	movs	r1, #1
 80007e8:	430a      	orrs	r2, r1
 80007ea:	619a      	str	r2, [r3, #24]
 80007ec:	4b51      	ldr	r3, [pc, #324]	; (8000934 <HAL_GPIO_Init+0x2c8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	2201      	movs	r2, #1
 80007f2:	4013      	ands	r3, r2
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80007f8:	4a4f      	ldr	r2, [pc, #316]	; (8000938 <HAL_GPIO_Init+0x2cc>)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	3302      	adds	r3, #2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	589b      	ldr	r3, [r3, r2]
 8000804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2203      	movs	r2, #3
 800080a:	4013      	ands	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	220f      	movs	r2, #15
 8000810:	409a      	lsls	r2, r3
 8000812:	0013      	movs	r3, r2
 8000814:	43da      	mvns	r2, r3
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	2390      	movs	r3, #144	; 0x90
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	429a      	cmp	r2, r3
 8000824:	d013      	beq.n	800084e <HAL_GPIO_Init+0x1e2>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a44      	ldr	r2, [pc, #272]	; (800093c <HAL_GPIO_Init+0x2d0>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d00d      	beq.n	800084a <HAL_GPIO_Init+0x1de>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a43      	ldr	r2, [pc, #268]	; (8000940 <HAL_GPIO_Init+0x2d4>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d007      	beq.n	8000846 <HAL_GPIO_Init+0x1da>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a42      	ldr	r2, [pc, #264]	; (8000944 <HAL_GPIO_Init+0x2d8>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_GPIO_Init+0x1d6>
 800083e:	2303      	movs	r3, #3
 8000840:	e006      	b.n	8000850 <HAL_GPIO_Init+0x1e4>
 8000842:	2305      	movs	r3, #5
 8000844:	e004      	b.n	8000850 <HAL_GPIO_Init+0x1e4>
 8000846:	2302      	movs	r3, #2
 8000848:	e002      	b.n	8000850 <HAL_GPIO_Init+0x1e4>
 800084a:	2301      	movs	r3, #1
 800084c:	e000      	b.n	8000850 <HAL_GPIO_Init+0x1e4>
 800084e:	2300      	movs	r3, #0
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	2103      	movs	r1, #3
 8000854:	400a      	ands	r2, r1
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	4093      	lsls	r3, r2
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000860:	4935      	ldr	r1, [pc, #212]	; (8000938 <HAL_GPIO_Init+0x2cc>)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	089b      	lsrs	r3, r3, #2
 8000866:	3302      	adds	r3, #2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	43da      	mvns	r2, r3
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	025b      	lsls	r3, r3, #9
 8000886:	4013      	ands	r3, r2
 8000888:	d003      	beq.n	8000892 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4313      	orrs	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	43da      	mvns	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	4013      	ands	r3, r2
 80008b2:	d003      	beq.n	80008bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	43da      	mvns	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	035b      	lsls	r3, r3, #13
 80008da:	4013      	ands	r3, r2
 80008dc:	d003      	beq.n	80008e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	43da      	mvns	r2, r3
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	039b      	lsls	r3, r3, #14
 8000904:	4013      	ands	r3, r2
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	40da      	lsrs	r2, r3
 8000924:	1e13      	subs	r3, r2, #0
 8000926:	d000      	beq.n	800092a <HAL_GPIO_Init+0x2be>
 8000928:	e6a8      	b.n	800067c <HAL_GPIO_Init+0x10>
  } 
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b006      	add	sp, #24
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	40010000 	.word	0x40010000
 800093c:	48000400 	.word	0x48000400
 8000940:	48000800 	.word	0x48000800
 8000944:	48000c00 	.word	0x48000c00
 8000948:	40010400 	.word	0x40010400

0800094c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	000a      	movs	r2, r1
 8000956:	1cbb      	adds	r3, r7, #2
 8000958:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	1cba      	adds	r2, r7, #2
 8000960:	8812      	ldrh	r2, [r2, #0]
 8000962:	4013      	ands	r3, r2
 8000964:	d004      	beq.n	8000970 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000966:	230f      	movs	r3, #15
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e003      	b.n	8000978 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000970:	230f      	movs	r3, #15
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000978:	230f      	movs	r3, #15
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	781b      	ldrb	r3, [r3, #0]
  }
 800097e:	0018      	movs	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	0008      	movs	r0, r1
 8000990:	0011      	movs	r1, r2
 8000992:	1cbb      	adds	r3, r7, #2
 8000994:	1c02      	adds	r2, r0, #0
 8000996:	801a      	strh	r2, [r3, #0]
 8000998:	1c7b      	adds	r3, r7, #1
 800099a:	1c0a      	adds	r2, r1, #0
 800099c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800099e:	1c7b      	adds	r3, r7, #1
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009a6:	1cbb      	adds	r3, r7, #2
 80009a8:	881a      	ldrh	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009ae:	e003      	b.n	80009b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009b0:	1cbb      	adds	r3, r7, #2
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d101      	bne.n	80009d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e302      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	d100      	bne.n	80009de <HAL_RCC_OscConfig+0x1e>
 80009dc:	e08d      	b.n	8000afa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009de:	4bc4      	ldr	r3, [pc, #784]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	220c      	movs	r2, #12
 80009e4:	4013      	ands	r3, r2
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d00e      	beq.n	8000a08 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009ea:	4bc1      	ldr	r3, [pc, #772]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	220c      	movs	r2, #12
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d116      	bne.n	8000a24 <HAL_RCC_OscConfig+0x64>
 80009f6:	4bbe      	ldr	r3, [pc, #760]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	025b      	lsls	r3, r3, #9
 80009fe:	401a      	ands	r2, r3
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	025b      	lsls	r3, r3, #9
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d10d      	bne.n	8000a24 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a08:	4bb9      	ldr	r3, [pc, #740]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	029b      	lsls	r3, r3, #10
 8000a10:	4013      	ands	r3, r2
 8000a12:	d100      	bne.n	8000a16 <HAL_RCC_OscConfig+0x56>
 8000a14:	e070      	b.n	8000af8 <HAL_RCC_OscConfig+0x138>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d000      	beq.n	8000a20 <HAL_RCC_OscConfig+0x60>
 8000a1e:	e06b      	b.n	8000af8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e2d9      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d107      	bne.n	8000a3c <HAL_RCC_OscConfig+0x7c>
 8000a2c:	4bb0      	ldr	r3, [pc, #704]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a2e:	4ab0      	ldr	r2, [pc, #704]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	0249      	lsls	r1, r1, #9
 8000a36:	430a      	orrs	r2, r1
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e02f      	b.n	8000a9c <HAL_RCC_OscConfig+0xdc>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10c      	bne.n	8000a5e <HAL_RCC_OscConfig+0x9e>
 8000a44:	4baa      	ldr	r3, [pc, #680]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a46:	4aaa      	ldr	r2, [pc, #680]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	49aa      	ldr	r1, [pc, #680]	; (8000cf4 <HAL_RCC_OscConfig+0x334>)
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	4ba7      	ldr	r3, [pc, #668]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a52:	4aa7      	ldr	r2, [pc, #668]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	49a8      	ldr	r1, [pc, #672]	; (8000cf8 <HAL_RCC_OscConfig+0x338>)
 8000a58:	400a      	ands	r2, r1
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e01e      	b.n	8000a9c <HAL_RCC_OscConfig+0xdc>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d10e      	bne.n	8000a84 <HAL_RCC_OscConfig+0xc4>
 8000a66:	4ba2      	ldr	r3, [pc, #648]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a68:	4aa1      	ldr	r2, [pc, #644]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	02c9      	lsls	r1, r1, #11
 8000a70:	430a      	orrs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	4b9e      	ldr	r3, [pc, #632]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a76:	4a9e      	ldr	r2, [pc, #632]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a78:	6812      	ldr	r2, [r2, #0]
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0249      	lsls	r1, r1, #9
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e00b      	b.n	8000a9c <HAL_RCC_OscConfig+0xdc>
 8000a84:	4b9a      	ldr	r3, [pc, #616]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a86:	4a9a      	ldr	r2, [pc, #616]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	499a      	ldr	r1, [pc, #616]	; (8000cf4 <HAL_RCC_OscConfig+0x334>)
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	4b97      	ldr	r3, [pc, #604]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a92:	4a97      	ldr	r2, [pc, #604]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	4998      	ldr	r1, [pc, #608]	; (8000cf8 <HAL_RCC_OscConfig+0x338>)
 8000a98:	400a      	ands	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d014      	beq.n	8000ace <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fd00 	bl	80004a8 <HAL_GetTick>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aac:	e008      	b.n	8000ac0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aae:	f7ff fcfb 	bl	80004a8 <HAL_GetTick>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	2b64      	cmp	r3, #100	; 0x64
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e28b      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac0:	4b8b      	ldr	r3, [pc, #556]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	029b      	lsls	r3, r3, #10
 8000ac8:	4013      	ands	r3, r2
 8000aca:	d0f0      	beq.n	8000aae <HAL_RCC_OscConfig+0xee>
 8000acc:	e015      	b.n	8000afa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ace:	f7ff fceb 	bl	80004a8 <HAL_GetTick>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad8:	f7ff fce6 	bl	80004a8 <HAL_GetTick>
 8000adc:	0002      	movs	r2, r0
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b64      	cmp	r3, #100	; 0x64
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e276      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aea:	4b81      	ldr	r3, [pc, #516]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	029b      	lsls	r3, r3, #10
 8000af2:	4013      	ands	r3, r2
 8000af4:	d1f0      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x118>
 8000af6:	e000      	b.n	8000afa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2202      	movs	r2, #2
 8000b00:	4013      	ands	r3, r2
 8000b02:	d100      	bne.n	8000b06 <HAL_RCC_OscConfig+0x146>
 8000b04:	e069      	b.n	8000bda <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b06:	4b7a      	ldr	r3, [pc, #488]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d00b      	beq.n	8000b28 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b10:	4b77      	ldr	r3, [pc, #476]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	220c      	movs	r2, #12
 8000b16:	4013      	ands	r3, r2
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d11c      	bne.n	8000b56 <HAL_RCC_OscConfig+0x196>
 8000b1c:	4b74      	ldr	r3, [pc, #464]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	025b      	lsls	r3, r3, #9
 8000b24:	4013      	ands	r3, r2
 8000b26:	d116      	bne.n	8000b56 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b28:	4b71      	ldr	r3, [pc, #452]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d005      	beq.n	8000b3e <HAL_RCC_OscConfig+0x17e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d001      	beq.n	8000b3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e24c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3e:	4a6c      	ldr	r2, [pc, #432]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b40:	4b6b      	ldr	r3, [pc, #428]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	21f8      	movs	r1, #248	; 0xf8
 8000b46:	438b      	bics	r3, r1
 8000b48:	0019      	movs	r1, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	430b      	orrs	r3, r1
 8000b52:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b54:	e041      	b.n	8000bda <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d024      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b5e:	4b64      	ldr	r3, [pc, #400]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b60:	4a63      	ldr	r2, [pc, #396]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6a:	f7ff fc9d 	bl	80004a8 <HAL_GetTick>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b72:	e008      	b.n	8000b86 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b74:	f7ff fc98 	bl	80004a8 <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d901      	bls.n	8000b86 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e228      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b86:	4b5a      	ldr	r3, [pc, #360]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	d0f1      	beq.n	8000b74 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b90:	4a57      	ldr	r2, [pc, #348]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b92:	4b57      	ldr	r3, [pc, #348]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	21f8      	movs	r1, #248	; 0xf8
 8000b98:	438b      	bics	r3, r1
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e018      	b.n	8000bda <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ba8:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000baa:	4a51      	ldr	r2, [pc, #324]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fc78 	bl	80004a8 <HAL_GetTick>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bbe:	f7ff fc73 	bl	80004a8 <HAL_GetTick>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e203      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd0:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d1f1      	bne.n	8000bbe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2208      	movs	r2, #8
 8000be0:	4013      	ands	r3, r2
 8000be2:	d036      	beq.n	8000c52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d019      	beq.n	8000c20 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bec:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000bee:	4a40      	ldr	r2, [pc, #256]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf8:	f7ff fc56 	bl	80004a8 <HAL_GetTick>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c00:	e008      	b.n	8000c14 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c02:	f7ff fc51 	bl	80004a8 <HAL_GetTick>
 8000c06:	0002      	movs	r2, r0
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d901      	bls.n	8000c14 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e1e1      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	2202      	movs	r2, #2
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d0f1      	beq.n	8000c02 <HAL_RCC_OscConfig+0x242>
 8000c1e:	e018      	b.n	8000c52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c20:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c22:	4a33      	ldr	r2, [pc, #204]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c26:	2101      	movs	r1, #1
 8000c28:	438a      	bics	r2, r1
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2c:	f7ff fc3c 	bl	80004a8 <HAL_GetTick>
 8000c30:	0003      	movs	r3, r0
 8000c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c34:	e008      	b.n	8000c48 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c36:	f7ff fc37 	bl	80004a8 <HAL_GetTick>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d901      	bls.n	8000c48 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e1c7      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d1f1      	bne.n	8000c36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2204      	movs	r2, #4
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d100      	bne.n	8000c5e <HAL_RCC_OscConfig+0x29e>
 8000c5c:	e0b6      	b.n	8000dcc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c5e:	231f      	movs	r3, #31
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	055b      	lsls	r3, r3, #21
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d111      	bne.n	8000c96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c74:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c76:	69d2      	ldr	r2, [r2, #28]
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	0549      	lsls	r1, r1, #21
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	61da      	str	r2, [r3, #28]
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000c82:	69da      	ldr	r2, [r3, #28]
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	055b      	lsls	r3, r3, #21
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c8e:	231f      	movs	r3, #31
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_RCC_OscConfig+0x33c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d11a      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_RCC_OscConfig+0x33c>)
 8000ca4:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <HAL_RCC_OscConfig+0x33c>)
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cb0:	f7ff fbfa 	bl	80004a8 <HAL_GetTick>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb8:	e008      	b.n	8000ccc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cba:	f7ff fbf5 	bl	80004a8 <HAL_GetTick>
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b64      	cmp	r3, #100	; 0x64
 8000cc6:	d901      	bls.n	8000ccc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e185      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_RCC_OscConfig+0x33c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d0f0      	beq.n	8000cba <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d10f      	bne.n	8000d00 <HAL_RCC_OscConfig+0x340>
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_RCC_OscConfig+0x330>)
 8000ce4:	6a12      	ldr	r2, [r2, #32]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	621a      	str	r2, [r3, #32]
 8000cec:	e036      	b.n	8000d5c <HAL_RCC_OscConfig+0x39c>
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	fffeffff 	.word	0xfffeffff
 8000cf8:	fffbffff 	.word	0xfffbffff
 8000cfc:	40007000 	.word	0x40007000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10c      	bne.n	8000d22 <HAL_RCC_OscConfig+0x362>
 8000d08:	4bb5      	ldr	r3, [pc, #724]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d0a:	4ab5      	ldr	r2, [pc, #724]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d0c:	6a12      	ldr	r2, [r2, #32]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	438a      	bics	r2, r1
 8000d12:	621a      	str	r2, [r3, #32]
 8000d14:	4bb2      	ldr	r3, [pc, #712]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d16:	4ab2      	ldr	r2, [pc, #712]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d18:	6a12      	ldr	r2, [r2, #32]
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	621a      	str	r2, [r3, #32]
 8000d20:	e01c      	b.n	8000d5c <HAL_RCC_OscConfig+0x39c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b05      	cmp	r3, #5
 8000d28:	d10c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x384>
 8000d2a:	4bad      	ldr	r3, [pc, #692]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d2c:	4aac      	ldr	r2, [pc, #688]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d2e:	6a12      	ldr	r2, [r2, #32]
 8000d30:	2104      	movs	r1, #4
 8000d32:	430a      	orrs	r2, r1
 8000d34:	621a      	str	r2, [r3, #32]
 8000d36:	4baa      	ldr	r3, [pc, #680]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d38:	4aa9      	ldr	r2, [pc, #676]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d3a:	6a12      	ldr	r2, [r2, #32]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	621a      	str	r2, [r3, #32]
 8000d42:	e00b      	b.n	8000d5c <HAL_RCC_OscConfig+0x39c>
 8000d44:	4ba6      	ldr	r3, [pc, #664]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d46:	4aa6      	ldr	r2, [pc, #664]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d48:	6a12      	ldr	r2, [r2, #32]
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	438a      	bics	r2, r1
 8000d4e:	621a      	str	r2, [r3, #32]
 8000d50:	4ba3      	ldr	r3, [pc, #652]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d52:	4aa3      	ldr	r2, [pc, #652]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d54:	6a12      	ldr	r2, [r2, #32]
 8000d56:	2104      	movs	r1, #4
 8000d58:	438a      	bics	r2, r1
 8000d5a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d014      	beq.n	8000d8e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d64:	f7ff fba0 	bl	80004a8 <HAL_GetTick>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d6c:	e009      	b.n	8000d82 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fb9b 	bl	80004a8 <HAL_GetTick>
 8000d72:	0002      	movs	r2, r0
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	4a9a      	ldr	r2, [pc, #616]	; (8000fe4 <HAL_RCC_OscConfig+0x624>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e12a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d82:	4b97      	ldr	r3, [pc, #604]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	2202      	movs	r2, #2
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d0f0      	beq.n	8000d6e <HAL_RCC_OscConfig+0x3ae>
 8000d8c:	e013      	b.n	8000db6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fb8b 	bl	80004a8 <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d96:	e009      	b.n	8000dac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d98:	f7ff fb86 	bl	80004a8 <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	4a90      	ldr	r2, [pc, #576]	; (8000fe4 <HAL_RCC_OscConfig+0x624>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e115      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dac:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	2202      	movs	r2, #2
 8000db2:	4013      	ands	r3, r2
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000db6:	231f      	movs	r3, #31
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d105      	bne.n	8000dcc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc0:	4b87      	ldr	r3, [pc, #540]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000dc2:	4a87      	ldr	r2, [pc, #540]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000dc4:	69d2      	ldr	r2, [r2, #28]
 8000dc6:	4988      	ldr	r1, [pc, #544]	; (8000fe8 <HAL_RCC_OscConfig+0x628>)
 8000dc8:	400a      	ands	r2, r1
 8000dca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d063      	beq.n	8000e9e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d12a      	bne.n	8000e34 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dde:	4b80      	ldr	r3, [pc, #512]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000de0:	4a7f      	ldr	r2, [pc, #508]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000de4:	2104      	movs	r1, #4
 8000de6:	430a      	orrs	r2, r1
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000dea:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000dec:	4a7c      	ldr	r2, [pc, #496]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000dee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000df0:	2101      	movs	r1, #1
 8000df2:	430a      	orrs	r2, r1
 8000df4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fb57 	bl	80004a8 <HAL_GetTick>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e00:	f7ff fb52 	bl	80004a8 <HAL_GetTick>
 8000e04:	0002      	movs	r2, r0
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e0e2      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e12:	4b73      	ldr	r3, [pc, #460]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d0f1      	beq.n	8000e00 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e1c:	4a70      	ldr	r2, [pc, #448]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e1e:	4b70      	ldr	r3, [pc, #448]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e22:	21f8      	movs	r1, #248	; 0xf8
 8000e24:	438b      	bics	r3, r1
 8000e26:	0019      	movs	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	6353      	str	r3, [r2, #52]	; 0x34
 8000e32:	e034      	b.n	8000e9e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	3305      	adds	r3, #5
 8000e3a:	d111      	bne.n	8000e60 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e3c:	4b68      	ldr	r3, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e3e:	4a68      	ldr	r2, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e42:	2104      	movs	r1, #4
 8000e44:	438a      	bics	r2, r1
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e48:	4a65      	ldr	r2, [pc, #404]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e4a:	4b65      	ldr	r3, [pc, #404]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	21f8      	movs	r1, #248	; 0xf8
 8000e50:	438b      	bics	r3, r1
 8000e52:	0019      	movs	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e5e:	e01e      	b.n	8000e9e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e60:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e62:	4a5f      	ldr	r2, [pc, #380]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e66:	2104      	movs	r1, #4
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000e6c:	4b5c      	ldr	r3, [pc, #368]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e72:	2101      	movs	r1, #1
 8000e74:	438a      	bics	r2, r1
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e78:	f7ff fb16 	bl	80004a8 <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e82:	f7ff fb11 	bl	80004a8 <HAL_GetTick>
 8000e86:	0002      	movs	r2, r0
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e0a1      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e94:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e98:	2202      	movs	r2, #2
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d1f1      	bne.n	8000e82 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x4e8>
 8000ea6:	e096      	b.n	8000fd6 <HAL_RCC_OscConfig+0x616>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea8:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	220c      	movs	r2, #12
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d100      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x4f6>
 8000eb4:	e06a      	b.n	8000f8c <HAL_RCC_OscConfig+0x5cc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d14b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x596>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebe:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	4949      	ldr	r1, [pc, #292]	; (8000fec <HAL_RCC_OscConfig+0x62c>)
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff faed 	bl	80004a8 <HAL_GetTick>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed4:	f7ff fae8 	bl	80004a8 <HAL_GetTick>
 8000ed8:	0002      	movs	r2, r0
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e078      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	049b      	lsls	r3, r3, #18
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ef2:	4a3b      	ldr	r2, [pc, #236]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	210f      	movs	r1, #15
 8000efa:	438b      	bics	r3, r1
 8000efc:	0019      	movs	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	430b      	orrs	r3, r1
 8000f04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f06:	4a36      	ldr	r2, [pc, #216]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4938      	ldr	r1, [pc, #224]	; (8000ff0 <HAL_RCC_OscConfig+0x630>)
 8000f0e:	4019      	ands	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	4303      	orrs	r3, r0
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f20:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0449      	lsls	r1, r1, #17
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fabc 	bl	80004a8 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x588>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fab7 	bl	80004a8 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x588>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e047      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	049b      	lsls	r3, r3, #18
 8000f50:	4013      	ands	r3, r2
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x576>
 8000f54:	e03f      	b.n	8000fd6 <HAL_RCC_OscConfig+0x616>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	4923      	ldr	r1, [pc, #140]	; (8000fec <HAL_RCC_OscConfig+0x62c>)
 8000f5e:	400a      	ands	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff faa1 	bl	80004a8 <HAL_GetTick>
 8000f66:	0003      	movs	r3, r0
 8000f68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x5be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff fa9c 	bl	80004a8 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x5be>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e02c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	049b      	lsls	r3, r3, #18
 8000f86:	4013      	ands	r3, r2
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0x5ac>
 8000f8a:	e024      	b.n	8000fd6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5d8>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e01f      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_RCC_OscConfig+0x620>)
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	401a      	ands	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d10e      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x612>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	401a      	ands	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d107      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x612>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	23f0      	movs	r3, #240	; 0xf0
 8000fc6:	039b      	lsls	r3, r3, #14
 8000fc8:	401a      	ands	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x616>
        {
          return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x618>
        }
      }
    }
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b008      	add	sp, #32
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	00001388 	.word	0x00001388
 8000fe8:	efffffff 	.word	0xefffffff
 8000fec:	feffffff 	.word	0xfeffffff
 8000ff0:	ffc2ffff 	.word	0xffc2ffff

08000ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0b2      	b.n	800116e <HAL_RCC_ClockConfig+0x17a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001008:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	401a      	ands	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d211      	bcs.n	800103a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001016:	4b58      	ldr	r3, [pc, #352]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 8001018:	4a57      	ldr	r2, [pc, #348]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	438a      	bics	r2, r1
 8001020:	0011      	movs	r1, r2
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001028:	4b53      	ldr	r3, [pc, #332]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2201      	movs	r2, #1
 800102e:	401a      	ands	r2, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d001      	beq.n	800103a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e099      	b.n	800116e <HAL_RCC_ClockConfig+0x17a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	d015      	beq.n	8001070 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2204      	movs	r2, #4
 800104a:	4013      	ands	r3, r2
 800104c:	d006      	beq.n	800105c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800104e:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 8001050:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 8001052:	6852      	ldr	r2, [r2, #4]
 8001054:	21e0      	movs	r1, #224	; 0xe0
 8001056:	00c9      	lsls	r1, r1, #3
 8001058:	430a      	orrs	r2, r1
 800105a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800105c:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	21f0      	movs	r1, #240	; 0xf0
 8001064:	438b      	bics	r3, r1
 8001066:	0019      	movs	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	430b      	orrs	r3, r1
 800106e:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	4013      	ands	r3, r2
 8001078:	d040      	beq.n	80010fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d107      	bne.n	8001092 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	4b3e      	ldr	r3, [pc, #248]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	029b      	lsls	r3, r3, #10
 800108a:	4013      	ands	r3, r2
 800108c:	d114      	bne.n	80010b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e06d      	b.n	800116e <HAL_RCC_ClockConfig+0x17a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d107      	bne.n	80010aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	049b      	lsls	r3, r3, #18
 80010a2:	4013      	ands	r3, r2
 80010a4:	d108      	bne.n	80010b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e061      	b.n	800116e <HAL_RCC_ClockConfig+0x17a>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	d101      	bne.n	80010b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e05a      	b.n	800116e <HAL_RCC_ClockConfig+0x17a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2103      	movs	r1, #3
 80010c0:	438b      	bics	r3, r1
 80010c2:	0019      	movs	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	430b      	orrs	r3, r1
 80010ca:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010cc:	f7ff f9ec 	bl	80004a8 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d4:	e009      	b.n	80010ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d6:	f7ff f9e7 	bl	80004a8 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <HAL_RCC_ClockConfig+0x18c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e041      	b.n	800116e <HAL_RCC_ClockConfig+0x17a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	220c      	movs	r2, #12
 80010f0:	401a      	ands	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d1ec      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	401a      	ands	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d911      	bls.n	800112e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	438a      	bics	r2, r1
 8001114:	0011      	movs	r1, r2
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_RCC_ClockConfig+0x184>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2201      	movs	r2, #1
 8001122:	401a      	ands	r2, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d001      	beq.n	800112e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e01f      	b.n	800116e <HAL_RCC_ClockConfig+0x17a>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2204      	movs	r2, #4
 8001134:	4013      	ands	r3, r2
 8001136:	d008      	beq.n	800114a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4911      	ldr	r1, [pc, #68]	; (8001184 <HAL_RCC_ClockConfig+0x190>)
 8001140:	4019      	ands	r1, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	430b      	orrs	r3, r1
 8001148:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800114a:	f000 f821 	bl	8001190 <HAL_RCC_GetSysClockFreq>
 800114e:	0001      	movs	r1, r0
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_RCC_ClockConfig+0x188>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	220f      	movs	r2, #15
 8001158:	4013      	ands	r3, r2
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_RCC_ClockConfig+0x194>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	000a      	movs	r2, r1
 8001160:	40da      	lsrs	r2, r3
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_RCC_ClockConfig+0x198>)
 8001164:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff f958 	bl	800041c <HAL_InitTick>
  
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	40022000 	.word	0x40022000
 800117c:	40021000 	.word	0x40021000
 8001180:	00001388 	.word	0x00001388
 8001184:	fffff8ff 	.word	0xfffff8ff
 8001188:	08003d6c 	.word	0x08003d6c
 800118c:	200000b0 	.word	0x200000b0

08001190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08f      	sub	sp, #60	; 0x3c
 8001194:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001196:	2314      	movs	r3, #20
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	4a28      	ldr	r2, [pc, #160]	; (800123c <HAL_RCC_GetSysClockFreq+0xac>)
 800119c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800119e:	c313      	stmia	r3!, {r0, r1, r4}
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011aa:	c313      	stmia	r3!, {r0, r1, r4}
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	220c      	movs	r2, #12
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d002      	beq.n	80011da <HAL_RCC_GetSysClockFreq+0x4a>
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d003      	beq.n	80011e0 <HAL_RCC_GetSysClockFreq+0x50>
 80011d8:	e027      	b.n	800122a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011de:	e027      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	220f      	movs	r2, #15
 80011e6:	4013      	ands	r3, r2
 80011e8:	2214      	movs	r2, #20
 80011ea:	18ba      	adds	r2, r7, r2
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	220f      	movs	r2, #15
 80011f6:	4013      	ands	r3, r2
 80011f8:	1d3a      	adds	r2, r7, #4
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80011fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	025b      	lsls	r3, r3, #9
 8001204:	4013      	ands	r3, r2
 8001206:	d009      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb8>)
 800120c:	f7fe ff7c 	bl	8000108 <__udivsi3>
 8001210:	0003      	movs	r3, r0
 8001212:	001a      	movs	r2, r3
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	4353      	muls	r3, r2
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
 800121a:	e003      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001220:	4353      	muls	r3, r2
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001228:	e002      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb8>)
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800122e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b00f      	add	sp, #60	; 0x3c
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	080036b8 	.word	0x080036b8
 8001240:	080036c8 	.word	0x080036c8
 8001244:	40021000 	.word	0x40021000
 8001248:	007a1200 	.word	0x007a1200
 800124c:	003d0900 	.word	0x003d0900

08001250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <HAL_RCC_GetHCLKFreq+0x10>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	200000b0 	.word	0x200000b0

08001264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001268:	f7ff fff2 	bl	8001250 <HAL_RCC_GetHCLKFreq>
 800126c:	0001      	movs	r1, r0
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	2207      	movs	r2, #7
 8001276:	4013      	ands	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_RCC_GetPCLK1Freq+0x28>)
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	40d9      	lsrs	r1, r3
 800127e:	000b      	movs	r3, r1
}    
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	40021000 	.word	0x40021000
 800128c:	08003d7c 	.word	0x08003d7c

08001290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	4013      	ands	r3, r2
 80012aa:	d100      	bne.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80012ac:	e08e      	b.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2317      	movs	r3, #23
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	055b      	lsls	r3, r3, #21
 80012be:	4013      	ands	r3, r2
 80012c0:	d111      	bne.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012c4:	4a53      	ldr	r2, [pc, #332]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012c6:	69d2      	ldr	r2, [r2, #28]
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0549      	lsls	r1, r1, #21
 80012cc:	430a      	orrs	r2, r1
 80012ce:	61da      	str	r2, [r3, #28]
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012d2:	69da      	ldr	r2, [r3, #28]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	055b      	lsls	r3, r3, #21
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012de:	2317      	movs	r3, #23
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d11a      	bne.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0049      	lsls	r1, r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001300:	f7ff f8d2 	bl	80004a8 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff f8cd 	bl	80004a8 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	; 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e076      	b.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d0f0      	beq.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800132a:	6a1a      	ldr	r2, [r3, #32]
 800132c:	23c0      	movs	r3, #192	; 0xc0
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d034      	beq.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	23c0      	movs	r3, #192	; 0xc0
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	401a      	ands	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	d02c      	beq.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001356:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001358:	6a12      	ldr	r2, [r2, #32]
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0249      	lsls	r1, r1, #9
 800135e:	430a      	orrs	r2, r1
 8001360:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001364:	4a2b      	ldr	r2, [pc, #172]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001366:	6a12      	ldr	r2, [r2, #32]
 8001368:	492d      	ldr	r1, [pc, #180]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800136a:	400a      	ands	r2, r1
 800136c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	4013      	ands	r3, r2
 800137a:	d013      	beq.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff f894 	bl	80004a8 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	e009      	b.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff f88f 	bl	80004a8 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e037      	b.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	491c      	ldr	r1, [pc, #112]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80013ac:	4019      	ands	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	430b      	orrs	r3, r1
 80013b4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013b6:	2317      	movs	r3, #23
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013c4:	69d2      	ldr	r2, [r2, #28]
 80013c6:	4918      	ldr	r1, [pc, #96]	; (8001428 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	d009      	beq.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	2103      	movs	r1, #3
 80013de:	438b      	bics	r3, r1
 80013e0:	0019      	movs	r1, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	430b      	orrs	r3, r1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2220      	movs	r2, #32
 80013f0:	4013      	ands	r3, r2
 80013f2:	d009      	beq.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	2110      	movs	r1, #16
 80013fc:	438b      	bics	r3, r1
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	430b      	orrs	r3, r1
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b006      	add	sp, #24
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40021000 	.word	0x40021000
 8001418:	40007000 	.word	0x40007000
 800141c:	fffffcff 	.word	0xfffffcff
 8001420:	fffeffff 	.word	0xfffeffff
 8001424:	00001388 	.word	0x00001388
 8001428:	efffffff 	.word	0xefffffff

0800142c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e088      	b.n	8001550 <HAL_SPI_Init+0x124>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	225d      	movs	r2, #93	; 0x5d
 8001448:	5c9b      	ldrb	r3, [r3, r2]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	225c      	movs	r2, #92	; 0x5c
 8001454:	2100      	movs	r1, #0
 8001456:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	0018      	movs	r0, r3
 800145c:	f002 f808 	bl	8003470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	225d      	movs	r2, #93	; 0x5d
 8001464:	2102      	movs	r1, #2
 8001466:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	438a      	bics	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	23e0      	movs	r3, #224	; 0xe0
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	429a      	cmp	r2, r3
 8001482:	d902      	bls.n	800148a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e002      	b.n	8001490 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	015b      	lsls	r3, r3, #5
 800148e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	23f0      	movs	r3, #240	; 0xf0
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	429a      	cmp	r2, r3
 800149a:	d008      	beq.n	80014ae <HAL_SPI_Init+0x82>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	23e0      	movs	r3, #224	; 0xe0
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d002      	beq.n	80014ae <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	23e0      	movs	r3, #224	; 0xe0
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	429a      	cmp	r2, r3
 80014c0:	d903      	bls.n	80014ca <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2202      	movs	r2, #2
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
 80014c8:	e002      	b.n	80014d0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6851      	ldr	r1, [r2, #4]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6892      	ldr	r2, [r2, #8]
 80014dc:	4311      	orrs	r1, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6912      	ldr	r2, [r2, #16]
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6952      	ldr	r2, [r2, #20]
 80014e8:	4311      	orrs	r1, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6990      	ldr	r0, [r2, #24]
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4002      	ands	r2, r0
 80014f4:	4311      	orrs	r1, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	69d2      	ldr	r2, [r2, #28]
 80014fa:	4311      	orrs	r1, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6a12      	ldr	r2, [r2, #32]
 8001500:	4311      	orrs	r1, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6992      	ldr	r2, [r2, #24]
 8001512:	0c12      	lsrs	r2, r2, #16
 8001514:	2104      	movs	r1, #4
 8001516:	4011      	ands	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800151c:	4311      	orrs	r1, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68d2      	ldr	r2, [r2, #12]
 8001528:	4311      	orrs	r1, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	69d2      	ldr	r2, [r2, #28]
 800153a:	4907      	ldr	r1, [pc, #28]	; (8001558 <HAL_SPI_Init+0x12c>)
 800153c:	400a      	ands	r2, r1
 800153e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	225d      	movs	r2, #93	; 0x5d
 800154a:	2101      	movs	r1, #1
 800154c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b004      	add	sp, #16
 8001556:	bd80      	pop	{r7, pc}
 8001558:	fffff7ff 	.word	0xfffff7ff

0800155c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800156c:	231f      	movs	r3, #31
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	225c      	movs	r2, #92	; 0x5c
 8001578:	5c9b      	ldrb	r3, [r3, r2]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_SPI_Transmit+0x26>
 800157e:	2302      	movs	r3, #2
 8001580:	e169      	b.n	8001856 <HAL_SPI_Transmit+0x2fa>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	225c      	movs	r2, #92	; 0x5c
 8001586:	2101      	movs	r1, #1
 8001588:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800158a:	f7fe ff8d 	bl	80004a8 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001592:	2316      	movs	r3, #22
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	1dba      	adds	r2, r7, #6
 8001598:	8812      	ldrh	r2, [r2, #0]
 800159a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	225d      	movs	r2, #93	; 0x5d
 80015a0:	5c9b      	ldrb	r3, [r3, r2]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d004      	beq.n	80015b2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80015a8:	231f      	movs	r3, #31
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2202      	movs	r2, #2
 80015ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80015b0:	e146      	b.n	8001840 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_SPI_Transmit+0x64>
 80015b8:	1dbb      	adds	r3, r7, #6
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d104      	bne.n	80015ca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80015c0:	231f      	movs	r3, #31
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80015c8:	e13a      	b.n	8001840 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	225d      	movs	r2, #93	; 0x5d
 80015ce:	2103      	movs	r1, #3
 80015d0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1dba      	adds	r2, r7, #6
 80015e2:	8812      	ldrh	r2, [r2, #0]
 80015e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1dba      	adds	r2, r7, #6
 80015ea:	8812      	ldrh	r2, [r2, #0]
 80015ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2244      	movs	r2, #68	; 0x44
 80015f8:	2100      	movs	r1, #0
 80015fa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2246      	movs	r2, #70	; 0x46
 8001600:	2100      	movs	r1, #0
 8001602:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	429a      	cmp	r2, r3
 800161a:	d108      	bne.n	800162e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	01c9      	lsls	r1, r1, #7
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2240      	movs	r2, #64	; 0x40
 8001636:	4013      	ands	r3, r2
 8001638:	2b40      	cmp	r3, #64	; 0x40
 800163a:	d007      	beq.n	800164c <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	23e0      	movs	r3, #224	; 0xe0
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	429a      	cmp	r2, r3
 8001656:	d94e      	bls.n	80016f6 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <HAL_SPI_Transmit+0x10e>
 8001660:	2316      	movs	r3, #22
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d13f      	bne.n	80016ea <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001672:	8812      	ldrh	r2, [r2, #0]
 8001674:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	1c9a      	adds	r2, r3, #2
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800168e:	e02c      	b.n	80016ea <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d112      	bne.n	80016c4 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016a6:	8812      	ldrh	r2, [r2, #0]
 80016a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	1c9a      	adds	r2, r3, #2
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80016c2:	e012      	b.n	80016ea <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80016c4:	f7fe fef0 	bl	80004a8 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad2      	subs	r2, r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d302      	bcc.n	80016da <HAL_SPI_Transmit+0x17e>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	d102      	bne.n	80016e0 <HAL_SPI_Transmit+0x184>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80016e0:	231f      	movs	r3, #31
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	2203      	movs	r2, #3
 80016e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80016e8:	e0aa      	b.n	8001840 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1cd      	bne.n	8001690 <HAL_SPI_Transmit+0x134>
 80016f4:	e082      	b.n	80017fc <HAL_SPI_Transmit+0x2a0>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_SPI_Transmit+0x1ae>
 80016fe:	2316      	movs	r3, #22
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d000      	beq.n	800170a <HAL_SPI_Transmit+0x1ae>
 8001708:	e073      	b.n	80017f2 <HAL_SPI_Transmit+0x296>
    {
      if (hspi->TxXferCount > 1U)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d912      	bls.n	800173a <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800171c:	8812      	ldrh	r2, [r2, #0]
 800171e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	1c9a      	adds	r2, r3, #2
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b02      	subs	r3, #2
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001738:	e05b      	b.n	80017f2 <HAL_SPI_Transmit+0x296>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	330c      	adds	r3, #12
 8001740:	001a      	movs	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	7013      	strb	r3, [r2, #0]
        hspi->pTxBuffPtr ++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001762:	e046      	b.n	80017f2 <HAL_SPI_Transmit+0x296>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	2b02      	cmp	r3, #2
 8001770:	d12c      	bne.n	80017cc <HAL_SPI_Transmit+0x270>
      {
        if (hspi->TxXferCount > 1U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001776:	b29b      	uxth	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d912      	bls.n	80017a2 <HAL_SPI_Transmit+0x246>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	1c9a      	adds	r2, r3, #2
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b02      	subs	r3, #2
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80017a0:	e027      	b.n	80017f2 <HAL_SPI_Transmit+0x296>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	330c      	adds	r3, #12
 80017a8:	001a      	movs	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	7013      	strb	r3, [r2, #0]
          hspi->pTxBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80017ca:	e012      	b.n	80017f2 <HAL_SPI_Transmit+0x296>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017cc:	f7fe fe6c 	bl	80004a8 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad2      	subs	r2, r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d302      	bcc.n	80017e2 <HAL_SPI_Transmit+0x286>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_SPI_Transmit+0x28c>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <HAL_SPI_Transmit+0x296>
        {
          errorcode = HAL_TIMEOUT;
 80017e8:	231f      	movs	r3, #31
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2203      	movs	r2, #3
 80017ee:	701a      	strb	r2, [r3, #0]
          goto error;
 80017f0:	e026      	b.n	8001840 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1b3      	bne.n	8001764 <HAL_SPI_Transmit+0x208>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f910 	bl	8001a28 <SPI_EndRxTxTransaction>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d002      	beq.n	8001812 <HAL_SPI_Transmit+0x2b6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2220      	movs	r2, #32
 8001810:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <HAL_SPI_Transmit+0x2d4>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_SPI_Transmit+0x2e4>
  {
    errorcode = HAL_ERROR;
 8001838:	231f      	movs	r3, #31
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	225d      	movs	r2, #93	; 0x5d
 8001844:	2101      	movs	r1, #1
 8001846:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	225c      	movs	r2, #92	; 0x5c
 800184c:	2100      	movs	r1, #0
 800184e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001850:	231f      	movs	r3, #31
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	781b      	ldrb	r3, [r3, #0]
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b008      	add	sp, #32
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001870:	e050      	b.n	8001914 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	d04d      	beq.n	8001914 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001878:	f7fe fe16 	bl	80004a8 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d202      	bcs.n	800188e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d142      	bne.n	8001914 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	6852      	ldr	r2, [r2, #4]
 8001898:	21e0      	movs	r1, #224	; 0xe0
 800189a:	438a      	bics	r2, r1
 800189c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	2382      	movs	r3, #130	; 0x82
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d113      	bne.n	80018d2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d005      	beq.n	80018c2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	429a      	cmp	r2, r3
 80018c0:	d107      	bne.n	80018d2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	438a      	bics	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	429a      	cmp	r2, r3
 80018dc:	d110      	bne.n	8001900 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4914      	ldr	r1, [pc, #80]	; (800193c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80018ea:	400a      	ands	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0189      	lsls	r1, r1, #6
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	225d      	movs	r2, #93	; 0x5d
 8001904:	2101      	movs	r1, #1
 8001906:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	225c      	movs	r2, #92	; 0x5c
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e00f      	b.n	8001934 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	401a      	ands	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	425a      	negs	r2, r3
 8001924:	4153      	adcs	r3, r2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	001a      	movs	r2, r3
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d19f      	bne.n	8001872 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}
 800193c:	ffffdfff 	.word	0xffffdfff

08001940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800194e:	e05c      	b.n	8001a0a <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	429a      	cmp	r2, r3
 8001958:	d106      	bne.n	8001968 <SPI_WaitFifoStateUntilTimeout+0x28>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	330c      	adds	r3, #12
 8001966:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	d04d      	beq.n	8001a0a <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800196e:	f7fe fd9b 	bl	80004a8 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad2      	subs	r2, r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d202      	bcs.n	8001984 <SPI_WaitFifoStateUntilTimeout+0x44>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d142      	bne.n	8001a0a <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	6852      	ldr	r2, [r2, #4]
 800198e:	21e0      	movs	r1, #224	; 0xe0
 8001990:	438a      	bics	r2, r1
 8001992:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2382      	movs	r3, #130	; 0x82
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	429a      	cmp	r2, r3
 800199e:	d113      	bne.n	80019c8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d005      	beq.n	80019b8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d107      	bne.n	80019c8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	2140      	movs	r1, #64	; 0x40
 80019c4:	438a      	bics	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d110      	bne.n	80019f6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	4911      	ldr	r1, [pc, #68]	; (8001a24 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0189      	lsls	r1, r1, #6
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	225d      	movs	r2, #93	; 0x5d
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	225c      	movs	r2, #92	; 0x5c
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e008      	b.n	8001a1c <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d19a      	bne.n	8001950 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b004      	add	sp, #16
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	ffffdfff 	.word	0xffffdfff

08001a28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	23c0      	movs	r3, #192	; 0xc0
 8001a38:	0159      	lsls	r1, r3, #5
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	0013      	movs	r3, r2
 8001a42:	2200      	movs	r2, #0
 8001a44:	f7ff ff7c 	bl	8001940 <SPI_WaitFifoStateUntilTimeout>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d007      	beq.n	8001a5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a50:	2220      	movs	r2, #32
 8001a52:	431a      	orrs	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e027      	b.n	8001aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	0013      	movs	r3, r2
 8001a66:	2200      	movs	r2, #0
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	f7ff fef9 	bl	8001860 <SPI_WaitFlagStateUntilTimeout>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d007      	beq.n	8001a82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	2220      	movs	r2, #32
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e014      	b.n	8001aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	23c0      	movs	r3, #192	; 0xc0
 8001a86:	00d9      	lsls	r1, r3, #3
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	0013      	movs	r3, r2
 8001a90:	2200      	movs	r2, #0
 8001a92:	f7ff ff55 	bl	8001940 <SPI_WaitFifoStateUntilTimeout>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d007      	beq.n	8001aaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e000      	b.n	8001aac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b004      	add	sp, #16
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e044      	b.n	8001b50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2270      	movs	r2, #112	; 0x70
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f001 fd1b 	bl	8003514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2224      	movs	r2, #36	; 0x24
 8001ae2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f8d8 	bl	8001cac <UART_SetConfig>
 8001afc:	0003      	movs	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e024      	b.n	8001b50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 fa39 	bl	8001f88 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	6852      	ldr	r2, [r2, #4]
 8001b20:	490d      	ldr	r1, [pc, #52]	; (8001b58 <HAL_UART_Init+0xa4>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	6892      	ldr	r2, [r2, #8]
 8001b30:	2108      	movs	r1, #8
 8001b32:	438a      	bics	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fac9 	bl	80020e0 <UART_CheckIdleState>
 8001b4e:	0003      	movs	r3, r0
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	fffff7ff 	.word	0xfffff7ff

08001b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d000      	beq.n	8001b76 <HAL_UART_Transmit+0x1a>
 8001b74:	e095      	b.n	8001ca2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_UART_Transmit+0x28>
 8001b7c:	1dbb      	adds	r3, r7, #6
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e08d      	b.n	8001ca4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	015b      	lsls	r3, r3, #5
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d109      	bne.n	8001ba8 <HAL_UART_Transmit+0x4c>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e07d      	b.n	8001ca4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2270      	movs	r2, #112	; 0x70
 8001bac:	5c9b      	ldrb	r3, [r3, r2]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UART_Transmit+0x5a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e076      	b.n	8001ca4 <HAL_UART_Transmit+0x148>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2270      	movs	r2, #112	; 0x70
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001bca:	f7fe fc6d 	bl	80004a8 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1dba      	adds	r2, r7, #6
 8001bd6:	2150      	movs	r1, #80	; 0x50
 8001bd8:	8812      	ldrh	r2, [r2, #0]
 8001bda:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1dba      	adds	r2, r7, #6
 8001be0:	2152      	movs	r1, #82	; 0x52
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	015b      	lsls	r3, r3, #5
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d108      	bne.n	8001c04 <HAL_UART_Transmit+0xa8>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	e003      	b.n	8001c0c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c0c:	e02d      	b.n	8001c6a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	0013      	movs	r3, r2
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	f000 faa6 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8001c20:	1e03      	subs	r3, r0, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e03d      	b.n	8001ca4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10b      	bne.n	8001c46 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	8812      	ldrh	r2, [r2, #0]
 8001c36:	05d2      	lsls	r2, r2, #23
 8001c38:	0dd2      	lsrs	r2, r2, #23
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	3302      	adds	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	e008      	b.n	8001c58 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2252      	movs	r2, #82	; 0x52
 8001c5c:	5a9b      	ldrh	r3, [r3, r2]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b299      	uxth	r1, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2252      	movs	r2, #82	; 0x52
 8001c68:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2252      	movs	r2, #82	; 0x52
 8001c6e:	5a9b      	ldrh	r3, [r3, r2]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1cb      	bne.n	8001c0e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	0013      	movs	r3, r2
 8001c80:	2200      	movs	r2, #0
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	f000 fa72 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e009      	b.n	8001ca4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2270      	movs	r2, #112	; 0x70
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
  }
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b008      	add	sp, #32
 8001caa:	bd80      	pop	{r7, pc}

08001cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cb8:	2317      	movs	r3, #23
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	49a2      	ldr	r1, [pc, #648]	; (8001f6c <UART_SetConfig+0x2c0>)
 8001ce4:	4011      	ands	r1, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	6852      	ldr	r2, [r2, #4]
 8001cf6:	499e      	ldr	r1, [pc, #632]	; (8001f70 <UART_SetConfig+0x2c4>)
 8001cf8:	4011      	ands	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68d2      	ldr	r2, [r2, #12]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	6892      	ldr	r2, [r2, #8]
 8001d1c:	4995      	ldr	r1, [pc, #596]	; (8001f74 <UART_SetConfig+0x2c8>)
 8001d1e:	4011      	ands	r1, r2
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d26:	4b94      	ldr	r3, [pc, #592]	; (8001f78 <UART_SetConfig+0x2cc>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d00f      	beq.n	8001d52 <UART_SetConfig+0xa6>
 8001d32:	d304      	bcc.n	8001d3e <UART_SetConfig+0x92>
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d011      	beq.n	8001d5c <UART_SetConfig+0xb0>
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d005      	beq.n	8001d48 <UART_SetConfig+0x9c>
 8001d3c:	e013      	b.n	8001d66 <UART_SetConfig+0xba>
 8001d3e:	231f      	movs	r3, #31
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e012      	b.n	8001d6e <UART_SetConfig+0xc2>
 8001d48:	231f      	movs	r3, #31
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e00d      	b.n	8001d6e <UART_SetConfig+0xc2>
 8001d52:	231f      	movs	r3, #31
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2204      	movs	r2, #4
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e008      	b.n	8001d6e <UART_SetConfig+0xc2>
 8001d5c:	231f      	movs	r3, #31
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2208      	movs	r2, #8
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e003      	b.n	8001d6e <UART_SetConfig+0xc2>
 8001d66:	231f      	movs	r3, #31
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d000      	beq.n	8001d7e <UART_SetConfig+0xd2>
 8001d7c:	e080      	b.n	8001e80 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8001d7e:	231f      	movs	r3, #31
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d01c      	beq.n	8001dc2 <UART_SetConfig+0x116>
 8001d88:	dc02      	bgt.n	8001d90 <UART_SetConfig+0xe4>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <UART_SetConfig+0xee>
 8001d8e:	e04b      	b.n	8001e28 <UART_SetConfig+0x17c>
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d025      	beq.n	8001de0 <UART_SetConfig+0x134>
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d037      	beq.n	8001e08 <UART_SetConfig+0x15c>
 8001d98:	e046      	b.n	8001e28 <UART_SetConfig+0x17c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d9a:	f7ff fa63 	bl	8001264 <HAL_RCC_GetPCLK1Freq>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	005a      	lsls	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	18d2      	adds	r2, r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0019      	movs	r1, r3
 8001db4:	0010      	movs	r0, r2
 8001db6:	f7fe f9a7 	bl	8000108 <__udivsi3>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	61bb      	str	r3, [r7, #24]
        break;
 8001dc0:	e037      	b.n	8001e32 <UART_SetConfig+0x186>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	4a6c      	ldr	r2, [pc, #432]	; (8001f7c <UART_SetConfig+0x2d0>)
 8001dca:	189a      	adds	r2, r3, r2
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	f7fe f998 	bl	8000108 <__udivsi3>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	61bb      	str	r3, [r7, #24]
        break;
 8001dde:	e028      	b.n	8001e32 <UART_SetConfig+0x186>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001de0:	f7ff f9d6 	bl	8001190 <HAL_RCC_GetSysClockFreq>
 8001de4:	0003      	movs	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	005a      	lsls	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	18d2      	adds	r2, r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0010      	movs	r0, r2
 8001dfc:	f7fe f984 	bl	8000108 <__udivsi3>
 8001e00:	0003      	movs	r3, r0
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	61bb      	str	r3, [r7, #24]
        break;
 8001e06:	e014      	b.n	8001e32 <UART_SetConfig+0x186>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	0252      	lsls	r2, r2, #9
 8001e12:	189a      	adds	r2, r3, r2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0019      	movs	r1, r3
 8001e1a:	0010      	movs	r0, r2
 8001e1c:	f7fe f974 	bl	8000108 <__udivsi3>
 8001e20:	0003      	movs	r3, r0
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	61bb      	str	r3, [r7, #24]
        break;
 8001e26:	e004      	b.n	8001e32 <UART_SetConfig+0x186>
      default:
        ret = HAL_ERROR;
 8001e28:	2317      	movs	r3, #23
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
        break;
 8001e30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d91e      	bls.n	8001e76 <UART_SetConfig+0x1ca>
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <UART_SetConfig+0x2d4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d81a      	bhi.n	8001e76 <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	230a      	movs	r3, #10
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	210f      	movs	r1, #15
 8001e4a:	438a      	bics	r2, r1
 8001e4c:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2207      	movs	r2, #7
 8001e56:	4013      	ands	r3, r2
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	220a      	movs	r2, #10
 8001e60:	18ba      	adds	r2, r7, r2
 8001e62:	8812      	ldrh	r2, [r2, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	220a      	movs	r2, #10
 8001e6e:	18ba      	adds	r2, r7, r2
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	e06c      	b.n	8001f50 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e067      	b.n	8001f50 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8001e80:	231f      	movs	r3, #31
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d01b      	beq.n	8001ec2 <UART_SetConfig+0x216>
 8001e8a:	dc02      	bgt.n	8001e92 <UART_SetConfig+0x1e6>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <UART_SetConfig+0x1f0>
 8001e90:	e049      	b.n	8001f26 <UART_SetConfig+0x27a>
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d024      	beq.n	8001ee0 <UART_SetConfig+0x234>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d035      	beq.n	8001f06 <UART_SetConfig+0x25a>
 8001e9a:	e044      	b.n	8001f26 <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f7ff f9e2 	bl	8001264 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	085a      	lsrs	r2, r3, #1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	18d2      	adds	r2, r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	f7fe f927 	bl	8000108 <__udivsi3>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	61bb      	str	r3, [r7, #24]
        break;
 8001ec0:	e036      	b.n	8001f30 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	4a2e      	ldr	r2, [pc, #184]	; (8001f84 <UART_SetConfig+0x2d8>)
 8001eca:	189a      	adds	r2, r3, r2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	0010      	movs	r0, r2
 8001ed4:	f7fe f918 	bl	8000108 <__udivsi3>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	61bb      	str	r3, [r7, #24]
        break;
 8001ede:	e027      	b.n	8001f30 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ee0:	f7ff f956 	bl	8001190 <HAL_RCC_GetSysClockFreq>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	085a      	lsrs	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	18d2      	adds	r2, r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	0010      	movs	r0, r2
 8001efa:	f7fe f905 	bl	8000108 <__udivsi3>
 8001efe:	0003      	movs	r3, r0
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	61bb      	str	r3, [r7, #24]
        break;
 8001f04:	e014      	b.n	8001f30 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	0212      	lsls	r2, r2, #8
 8001f10:	189a      	adds	r2, r3, r2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	0019      	movs	r1, r3
 8001f18:	0010      	movs	r0, r2
 8001f1a:	f7fe f8f5 	bl	8000108 <__udivsi3>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	61bb      	str	r3, [r7, #24]
        break;
 8001f24:	e004      	b.n	8001f30 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 8001f26:	2317      	movs	r3, #23
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
        break;
 8001f2e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d908      	bls.n	8001f48 <UART_SetConfig+0x29c>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <UART_SetConfig+0x2d4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d804      	bhi.n	8001f48 <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	e003      	b.n	8001f50 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8001f48:	2317      	movs	r3, #23
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001f5c:	2317      	movs	r3, #23
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b008      	add	sp, #32
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	ffff69f3 	.word	0xffff69f3
 8001f70:	ffffcfff 	.word	0xffffcfff
 8001f74:	fffff4ff 	.word	0xfffff4ff
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	0000ffff 	.word	0x0000ffff
 8001f84:	007a1200 	.word	0x007a1200

08001f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00a      	beq.n	8001fb0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	6852      	ldr	r2, [r2, #4]
 8001fa4:	4945      	ldr	r1, [pc, #276]	; (80020bc <UART_AdvFeatureConfig+0x134>)
 8001fa6:	4011      	ands	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d00a      	beq.n	8001fd0 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	6852      	ldr	r2, [r2, #4]
 8001fc4:	493e      	ldr	r1, [pc, #248]	; (80020c0 <UART_AdvFeatureConfig+0x138>)
 8001fc6:	4011      	ands	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d00a      	beq.n	8001ff0 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	6852      	ldr	r2, [r2, #4]
 8001fe4:	4937      	ldr	r1, [pc, #220]	; (80020c4 <UART_AdvFeatureConfig+0x13c>)
 8001fe6:	4011      	ands	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d00a      	beq.n	8002010 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	6852      	ldr	r2, [r2, #4]
 8002004:	4930      	ldr	r1, [pc, #192]	; (80020c8 <UART_AdvFeatureConfig+0x140>)
 8002006:	4011      	ands	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2210      	movs	r2, #16
 8002016:	4013      	ands	r3, r2
 8002018:	d00a      	beq.n	8002030 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	6892      	ldr	r2, [r2, #8]
 8002024:	4929      	ldr	r1, [pc, #164]	; (80020cc <UART_AdvFeatureConfig+0x144>)
 8002026:	4011      	ands	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2220      	movs	r2, #32
 8002036:	4013      	ands	r3, r2
 8002038:	d00a      	beq.n	8002050 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6892      	ldr	r2, [r2, #8]
 8002044:	4922      	ldr	r1, [pc, #136]	; (80020d0 <UART_AdvFeatureConfig+0x148>)
 8002046:	4011      	ands	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2240      	movs	r2, #64	; 0x40
 8002056:	4013      	ands	r3, r2
 8002058:	d01b      	beq.n	8002092 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	6852      	ldr	r2, [r2, #4]
 8002064:	491b      	ldr	r1, [pc, #108]	; (80020d4 <UART_AdvFeatureConfig+0x14c>)
 8002066:	4011      	ands	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	035b      	lsls	r3, r3, #13
 8002078:	429a      	cmp	r2, r3
 800207a:	d10a      	bne.n	8002092 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	6852      	ldr	r2, [r2, #4]
 8002086:	4914      	ldr	r1, [pc, #80]	; (80020d8 <UART_AdvFeatureConfig+0x150>)
 8002088:	4011      	ands	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	4013      	ands	r3, r2
 800209a:	d00a      	beq.n	80020b2 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	6852      	ldr	r2, [r2, #4]
 80020a6:	490d      	ldr	r1, [pc, #52]	; (80020dc <UART_AdvFeatureConfig+0x154>)
 80020a8:	4011      	ands	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  }
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	fffdffff 	.word	0xfffdffff
 80020c0:	fffeffff 	.word	0xfffeffff
 80020c4:	fffbffff 	.word	0xfffbffff
 80020c8:	ffff7fff 	.word	0xffff7fff
 80020cc:	ffffefff 	.word	0xffffefff
 80020d0:	ffffdfff 	.word	0xffffdfff
 80020d4:	ffefffff 	.word	0xffefffff
 80020d8:	ff9fffff 	.word	0xff9fffff
 80020dc:	fff7ffff 	.word	0xfff7ffff

080020e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80020ee:	f7fe f9db 	bl	80004a8 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2208      	movs	r2, #8
 80020fe:	4013      	ands	r3, r2
 8002100:	2b08      	cmp	r3, #8
 8002102:	d10d      	bne.n	8002120 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	0399      	lsls	r1, r3, #14
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <UART_CheckIdleState+0x88>)
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	0013      	movs	r3, r2
 8002112:	2200      	movs	r2, #0
 8002114:	f000 f82a 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d001      	beq.n	8002120 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e01f      	b.n	8002160 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	2b04      	cmp	r3, #4
 800212c:	d10d      	bne.n	800214a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	03d9      	lsls	r1, r3, #15
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <UART_CheckIdleState+0x88>)
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	0013      	movs	r3, r2
 800213c:	2200      	movs	r2, #0
 800213e:	f000 f815 	bl	800216c <UART_WaitOnFlagUntilTimeout>
 8002142:	1e03      	subs	r3, r0, #0
 8002144:	d001      	beq.n	800214a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e00a      	b.n	8002160 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2270      	movs	r2, #112	; 0x70
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}
 8002168:	01ffffff 	.word	0x01ffffff

0800216c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217c:	e05d      	b.n	800223a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	3301      	adds	r3, #1
 8002182:	d05a      	beq.n	800223a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002184:	f7fe f990 	bl	80004a8 <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	429a      	cmp	r2, r3
 8002192:	d802      	bhi.n	800219a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d11b      	bne.n	80021d2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	492f      	ldr	r1, [pc, #188]	; (8002264 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6892      	ldr	r2, [r2, #8]
 80021b4:	2101      	movs	r1, #1
 80021b6:	438a      	bics	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2270      	movs	r2, #112	; 0x70
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e043      	b.n	800225a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2204      	movs	r2, #4
 80021da:	4013      	ands	r3, r2
 80021dc:	d02d      	beq.n	800223a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	401a      	ands	r2, r3
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d123      	bne.n	800223a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	4917      	ldr	r1, [pc, #92]	; (8002264 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	6892      	ldr	r2, [r2, #8]
 8002216:	2101      	movs	r1, #1
 8002218:	438a      	bics	r2, r1
 800221a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2270      	movs	r2, #112	; 0x70
 8002232:	2100      	movs	r1, #0
 8002234:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	425a      	negs	r2, r3
 800224a:	4153      	adcs	r3, r2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	001a      	movs	r2, r3
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d092      	beq.n	800217e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	fffffe5f 	.word	0xfffffe5f

08002268 <OledSetCursor>:
**		is clamped to be on the display.
*/

void
OledSetCursor(int xch, int ych)
	{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]

	/* Clamp the specified location to the display surface
	*/
	if (xch >= xchOledMax) {
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <OledSetCursor+0x5c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	db03      	blt.n	8002284 <OledSetCursor+0x1c>
		xch = xchOledMax-1;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <OledSetCursor+0x5c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	607b      	str	r3, [r7, #4]
	}

	if (ych >= ychOledMax) {
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <OledSetCursor+0x60>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	db03      	blt.n	8002296 <OledSetCursor+0x2e>
		ych = ychOledMax-1;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <OledSetCursor+0x60>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3b01      	subs	r3, #1
 8002294:	603b      	str	r3, [r7, #0]
	}

	/* Save the given character location.
	*/
	xchOledCur = xch;
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <OledSetCursor+0x64>)
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	601a      	str	r2, [r3, #0]
	ychOledCur = ych;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <OledSetCursor+0x68>)
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	601a      	str	r2, [r3, #0]

	/* Convert the character location to a frame buffer address.
	*/
	OledMoveTo(xch*dxcoOledFontCur, ych*dycoOledFontCur);
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <OledSetCursor+0x6c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	435a      	muls	r2, r3
 80022aa:	0010      	movs	r0, r2
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <OledSetCursor+0x70>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4353      	muls	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	f000 fa23 	bl	8002700 <OledMoveTo>

}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	200000d4 	.word	0x200000d4
 80022c8:	200001e4 	.word	0x200001e4
 80022cc:	200000d8 	.word	0x200000d8
 80022d0:	200000dc 	.word	0x200000dc
 80022d4:	20000400 	.word	0x20000400
 80022d8:	200003fc 	.word	0x200003fc

080022dc <OledPutString>:
**		display and advance the cursor.
*/

void
OledPutString(char * sz)
	{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

	while (*sz != '\0') {
 80022e4:	e009      	b.n	80022fa <OledPutString+0x1e>
		OledDrawGlyph(*sz);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f816 	bl	800231c <OledDrawGlyph>
		OledAdvanceCursor();
 80022f0:	f000 f85c 	bl	80023ac <OledAdvanceCursor>
		sz += 1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3301      	adds	r3, #1
 80022f8:	607b      	str	r3, [r7, #4]
	while (*sz != '\0') {
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f1      	bne.n	80022e6 <OledPutString+0xa>
	}

	if (fOledCharUpdate) {
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <OledPutString+0x3c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <OledPutString+0x32>
		OledUpdate();
 800230a:	f000 f979 	bl	8002600 <OledUpdate>
	}

}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	20000404 	.word	0x20000404

0800231c <OledDrawGlyph>:
**		current drawing position in the display buffer.
*/

void
OledDrawGlyph(char ch)
	{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	0002      	movs	r2, r0
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	701a      	strb	r2, [r3, #0]
	uint8_t *	pbFont;
	uint8_t *	pbBmp;
	int		ib;

	if ((ch & 0x80) != 0) {
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b25b      	sxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	db2f      	blt.n	8002392 <OledDrawGlyph+0x76>
		return;
	}

	if (ch < chOledUserMax) {
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b1f      	cmp	r3, #31
 8002338:	d807      	bhi.n	800234a <OledDrawGlyph+0x2e>
		pbFont = pbOledFontUser + ch*cbOledChar;
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <OledDrawGlyph+0x80>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1dfa      	adds	r2, r7, #7
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	00d2      	lsls	r2, r2, #3
 8002344:	189b      	adds	r3, r3, r2
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e00c      	b.n	8002364 <OledDrawGlyph+0x48>
	}
	else if ((ch & 0x80) == 0) {
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b25b      	sxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	db07      	blt.n	8002364 <OledDrawGlyph+0x48>
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <OledDrawGlyph+0x84>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1dfa      	adds	r2, r7, #7
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	3a20      	subs	r2, #32
 800235e:	00d2      	lsls	r2, r2, #3
 8002360:	189b      	adds	r3, r3, r2
 8002362:	617b      	str	r3, [r7, #20]
	}

	pbBmp = pbOledCur;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <OledDrawGlyph+0x88>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	613b      	str	r3, [r7, #16]

	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e00a      	b.n	8002386 <OledDrawGlyph+0x6a>
		*pbBmp++ = *pbFont++;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	613a      	str	r2, [r7, #16]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	1c51      	adds	r1, r2, #1
 800237a:	6179      	str	r1, [r7, #20]
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <OledDrawGlyph+0x8c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbef      	blt.n	8002370 <OledDrawGlyph+0x54>
 8002390:	e000      	b.n	8002394 <OledDrawGlyph+0x78>
		return;
 8002392:	46c0      	nop			; (mov r8, r8)
	}

}
 8002394:	46bd      	mov	sp, r7
 8002396:	b006      	add	sp, #24
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	2000040c 	.word	0x2000040c
 80023a0:	200003f8 	.word	0x200003f8
 80023a4:	200003f0 	.word	0x200003f0
 80023a8:	20000400 	.word	0x20000400

080023ac <OledAdvanceCursor>:
**		end of the display.
*/

void
OledAdvanceCursor()
	{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

	xchOledCur += 1;
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <OledAdvanceCursor+0x54>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <OledAdvanceCursor+0x54>)
 80023b8:	601a      	str	r2, [r3, #0]
	if (xchOledCur >= xchOledMax) {
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <OledAdvanceCursor+0x54>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <OledAdvanceCursor+0x58>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	db07      	blt.n	80023d6 <OledAdvanceCursor+0x2a>
		xchOledCur = 0;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <OledAdvanceCursor+0x54>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
		ychOledCur += 1;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <OledAdvanceCursor+0x5c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <OledAdvanceCursor+0x5c>)
 80023d4:	601a      	str	r2, [r3, #0]
	}
	if (ychOledCur >= ychOledMax) {
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <OledAdvanceCursor+0x5c>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <OledAdvanceCursor+0x60>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	db02      	blt.n	80023e8 <OledAdvanceCursor+0x3c>
		ychOledCur = 0;
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <OledAdvanceCursor+0x5c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
	}

	OledSetCursor(xchOledCur, ychOledCur);
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <OledAdvanceCursor+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <OledAdvanceCursor+0x5c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0019      	movs	r1, r3
 80023f2:	0010      	movs	r0, r2
 80023f4:	f7ff ff38 	bl	8002268 <OledSetCursor>

}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	200000d8 	.word	0x200000d8
 8002404:	200000d4 	.word	0x200000d4
 8002408:	200000dc 	.word	0x200000dc
 800240c:	200001e4 	.word	0x200001e4

08002410 <OledInit>:
**		Initialize the OLED display subsystem.
*/

void
OledInit()
	{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0

	/* Init the PIC32 peripherals used to talk to the display.
	*/
	OledHostInit();
 8002414:	f000 f809 	bl	800242a <OledHostInit>

	/* Init the memory variables used to control access to the
	** display.
	*/
	OledDvrInit();
 8002418:	f000 f82a 	bl	8002470 <OledDvrInit>

	/* Init the OLED display hardware.
	*/
	OledDevInit();
 800241c:	f000 f886 	bl	800252c <OledDevInit>

	/* Clear the display.
	*/
	OledClear();
 8002420:	f000 f8c8 	bl	80025b4 <OledClear>

}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <OledHostInit>:
**		SPI2. This needs to be generalized.
*/

void
OledHostInit()
	{
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0

	//pinMode(DataCmd, OUTPUT);
	//pinMode(VbatCtrl, OUTPUT);
	//pinMode(VddCtrl, OUTPUT);

	digitalWrite(DataCmd, HIGH);
 800242e:	2302      	movs	r3, #2
 8002430:	b29b      	uxth	r3, r3
 8002432:	2101      	movs	r1, #1
 8002434:	0018      	movs	r0, r3
 8002436:	f000 f94d 	bl	80026d4 <digitalWrite>
	digitalWrite(VbatCtrl, HIGH);
 800243a:	2308      	movs	r3, #8
 800243c:	b29b      	uxth	r3, r3
 800243e:	2101      	movs	r1, #1
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f947 	bl	80026d4 <digitalWrite>
	digitalWrite(VddCtrl, HIGH);
 8002446:	2310      	movs	r3, #16
 8002448:	b29b      	uxth	r3, r3
 800244a:	2101      	movs	r1, #1
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f941 	bl	80026d4 <digitalWrite>

	// pinMode(Reset, OUTPUT);
	digitalWrite(Reset, HIGH);
 8002452:	2304      	movs	r3, #4
 8002454:	b29b      	uxth	r3, r3
 8002456:	2101      	movs	r1, #1
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f93b 	bl	80026d4 <digitalWrite>


	digitalWrite(ChipSelect, LOW); //spiCon.setSelect(LOW);
 800245e:	2301      	movs	r3, #1
 8002460:	b29b      	uxth	r3, r3
 8002462:	2100      	movs	r1, #0
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f935 	bl	80026d4 <digitalWrite>

}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <OledDvrInit>:
**		Initialize the OLED software system
*/

void
OledDvrInit()
	{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
	int		ib;

	/* Init the parameters for the default font
	*/
	dxcoOledFontCur = cbOledChar;
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <OledDvrInit+0x8c>)
 8002478:	2208      	movs	r2, #8
 800247a:	601a      	str	r2, [r3, #0]
	dycoOledFontCur = 8;
 800247c:	4b20      	ldr	r3, [pc, #128]	; (8002500 <OledDvrInit+0x90>)
 800247e:	2208      	movs	r2, #8
 8002480:	601a      	str	r2, [r3, #0]
	pbOledFontCur = (uint8_t*)rgbOledFont0;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <OledDvrInit+0x94>)
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <OledDvrInit+0x98>)
 8002486:	601a      	str	r2, [r3, #0]
	pbOledFontUser = rgbOledFontUser;
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <OledDvrInit+0x9c>)
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <OledDvrInit+0xa0>)
 800248c:	601a      	str	r2, [r3, #0]

	for (ib = 0; ib < cbOledFontUser; ib++) {
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	e007      	b.n	80024a4 <OledDvrInit+0x34>
		rgbOledFontUser[ib] = 0;
 8002494:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <OledDvrInit+0xa0>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	18d3      	adds	r3, r2, r3
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < cbOledFontUser; ib++) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	ddf4      	ble.n	8002494 <OledDvrInit+0x24>
	}

	xchOledMax = ccolOledMax / dxcoOledFontCur;
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <OledDvrInit+0x8c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0019      	movs	r1, r3
 80024b0:	2080      	movs	r0, #128	; 0x80
 80024b2:	f7fd feb3 	bl	800021c <__divsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	001a      	movs	r2, r3
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <OledDvrInit+0xa4>)
 80024bc:	601a      	str	r2, [r3, #0]
	ychOledMax = crowOledMax / dycoOledFontCur;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <OledDvrInit+0x90>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0019      	movs	r1, r3
 80024c4:	2020      	movs	r0, #32
 80024c6:	f7fd fea9 	bl	800021c <__divsi3>
 80024ca:	0003      	movs	r3, r0
 80024cc:	001a      	movs	r2, r3
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <OledDvrInit+0xa8>)
 80024d0:	601a      	str	r2, [r3, #0]

	/* Set the default character cursor position.
	*/
	OledSetCursor(0, 0);
 80024d2:	2100      	movs	r1, #0
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7ff fec7 	bl	8002268 <OledSetCursor>

	/* Set the default foreground draw color and fill pattern
	*/
	clrOledCur = 0x01;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <OledDvrInit+0xac>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
	pbOledPatCur = (uint8_t*)rgbFillPat;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <OledDvrInit+0xb0>)
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <OledDvrInit+0xb4>)
 80024e4:	601a      	str	r2, [r3, #0]
	OledSetDrawMode(modOledSet);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f940 	bl	800276c <OledSetDrawMode>

	/* Default the character routines to automaticall
	** update the display.
	*/
	fOledCharUpdate = 1;
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <OledDvrInit+0xb8>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	20000400 	.word	0x20000400
 8002500:	200003fc 	.word	0x200003fc
 8002504:	200003f8 	.word	0x200003f8
 8002508:	080039ec 	.word	0x080039ec
 800250c:	2000040c 	.word	0x2000040c
 8002510:	200000e0 	.word	0x200000e0
 8002514:	200000d4 	.word	0x200000d4
 8002518:	200001e4 	.word	0x200001e4
 800251c:	20000408 	.word	0x20000408
 8002520:	200003f4 	.word	0x200003f4
 8002524:	08003cec 	.word	0x08003cec
 8002528:	20000404 	.word	0x20000404

0800252c <OledDevInit>:
**		Initialize the OLED display controller and turn the display on.
*/

void
OledDevInit()
	{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0

	/* We're going to be sending commands, so clear the Data/Cmd bit
	*/
	digitalWrite(DataCmd, LOW);
 8002530:	2302      	movs	r3, #2
 8002532:	b29b      	uxth	r3, r3
 8002534:	2100      	movs	r1, #0
 8002536:	0018      	movs	r0, r3
 8002538:	f000 f8cc 	bl	80026d4 <digitalWrite>

	/* Start by turning VDD on and wait a while for the power to come up.
	*/
	digitalWrite(VddCtrl, LOW);
 800253c:	2310      	movs	r3, #16
 800253e:	b29b      	uxth	r3, r3
 8002540:	2100      	movs	r1, #0
 8002542:	0018      	movs	r0, r3
 8002544:	f000 f8c6 	bl	80026d4 <digitalWrite>
	HAL_Delay(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f7fd ffb7 	bl	80004bc <HAL_Delay>
	//delay(1);

	/* Display off command
	*/
	Spi2PutByte(cmdOledDisplayOff);
 800254e:	20ae      	movs	r0, #174	; 0xae
 8002550:	f000 f8ac 	bl	80026ac <Spi2PutByte>

	/* Bring Reset low and then high
	*/
	digitalWrite(Reset, LOW);
 8002554:	2304      	movs	r3, #4
 8002556:	b29b      	uxth	r3, r3
 8002558:	2100      	movs	r1, #0
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f8ba 	bl	80026d4 <digitalWrite>
	//delay(1);
	digitalWrite(Reset, HIGH);
 8002560:	2304      	movs	r3, #4
 8002562:	b29b      	uxth	r3, r3
 8002564:	2101      	movs	r1, #1
 8002566:	0018      	movs	r0, r3
 8002568:	f000 f8b4 	bl	80026d4 <digitalWrite>

	/* Send the Set Charge Pump and Set Pre-Charge Period commands
	*/
	Spi2PutByte(0x8D);		//From Univision data sheet, not in SSD1306 data sheet
 800256c:	208d      	movs	r0, #141	; 0x8d
 800256e:	f000 f89d 	bl	80026ac <Spi2PutByte>
	Spi2PutByte(0x14);
 8002572:	2014      	movs	r0, #20
 8002574:	f000 f89a 	bl	80026ac <Spi2PutByte>

	Spi2PutByte(0xD9);		//From Univision data sheet, not in SSD1306 data sheet
 8002578:	20d9      	movs	r0, #217	; 0xd9
 800257a:	f000 f897 	bl	80026ac <Spi2PutByte>
	Spi2PutByte(0xF1);
 800257e:	20f1      	movs	r0, #241	; 0xf1
 8002580:	f000 f894 	bl	80026ac <Spi2PutByte>

	/* Turn on VCC and wait 100ms
	*/
	digitalWrite(VbatCtrl, LOW);
 8002584:	2308      	movs	r3, #8
 8002586:	b29b      	uxth	r3, r3
 8002588:	2100      	movs	r1, #0
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f8a2 	bl	80026d4 <digitalWrite>
	// delay(100);

	/* Send the commands to invert the display.
	*/
	Spi2PutByte(cmdOledSegRemap);		//remap columns
 8002590:	20a1      	movs	r0, #161	; 0xa1
 8002592:	f000 f88b 	bl	80026ac <Spi2PutByte>
	Spi2PutByte(cmdOledComDir);			//remap the rows
 8002596:	20c8      	movs	r0, #200	; 0xc8
 8002598:	f000 f888 	bl	80026ac <Spi2PutByte>

	/* Send the commands to select sequential COM configuration
	*/
	Spi2PutByte(cmdOledComConfig);		//set COM configuration command
 800259c:	20da      	movs	r0, #218	; 0xda
 800259e:	f000 f885 	bl	80026ac <Spi2PutByte>
	Spi2PutByte(0x20);					//sequential COM, left/right remap enabled
 80025a2:	2020      	movs	r0, #32
 80025a4:	f000 f882 	bl	80026ac <Spi2PutByte>

	/* Send Display On command
	*/
	Spi2PutByte(cmdOledDisplayOn);
 80025a8:	20af      	movs	r0, #175	; 0xaf
 80025aa:	f000 f87f 	bl	80026ac <Spi2PutByte>

}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <OledClear>:
**		updates the display.
*/

void
OledClear()
	{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0

	OledClearBuffer();
 80025b8:	f000 f806 	bl	80025c8 <OledClearBuffer>
	OledUpdate();
 80025bc:	f000 f820 	bl	8002600 <OledUpdate>

}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <OledClearBuffer>:
**		Clear the display memory buffer.
*/

void
OledClearBuffer()
	{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	int			ib;
	uint8_t *		pb;

	pb = rgbOledBmp;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <OledClearBuffer+0x30>)
 80025d0:	603b      	str	r3, [r7, #0]

	/* Fill the memory buffer with 0.
	*/
	for (ib = 0; ib < cbOledDispMax; ib++) {
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	e007      	b.n	80025e8 <OledClearBuffer+0x20>
		*pb++ = 0x00;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	603a      	str	r2, [r7, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < cbOledDispMax; ib++) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3301      	adds	r3, #1
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <OledClearBuffer+0x34>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	ddf3      	ble.n	80025d8 <OledClearBuffer+0x10>
	}

}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200001ec 	.word	0x200001ec
 80025fc:	000001ff 	.word	0x000001ff

08002600 <OledUpdate>:
**		Update the OLED display with the contents of the memory buffer
*/

void
OledUpdate()
	{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	int		ipag;
	int		icol;
	uint8_t *	pb;

	pb = rgbOledBmp;
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <OledUpdate+0x68>)
 8002608:	603b      	str	r3, [r7, #0]

	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	e024      	b.n	800265a <OledUpdate+0x5a>

		digitalWrite(DataCmd, LOW);
 8002610:	2302      	movs	r3, #2
 8002612:	b29b      	uxth	r3, r3
 8002614:	2100      	movs	r1, #0
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f85c 	bl	80026d4 <digitalWrite>

		/* Set the page address
		*/
		Spi2PutByte(0x22);		//Set page command
 800261c:	2022      	movs	r0, #34	; 0x22
 800261e:	f000 f845 	bl	80026ac <Spi2PutByte>
		Spi2PutByte(ipag);		//page number
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f840 	bl	80026ac <Spi2PutByte>

		/* Start at the left column
		*/
		Spi2PutByte(0x00);		//set low nybble of column
 800262c:	2000      	movs	r0, #0
 800262e:	f000 f83d 	bl	80026ac <Spi2PutByte>
		Spi2PutByte(0x10);		//set high nybble of column
 8002632:	2010      	movs	r0, #16
 8002634:	f000 f83a 	bl	80026ac <Spi2PutByte>

		digitalWrite(DataCmd, HIGH);
 8002638:	2302      	movs	r3, #2
 800263a:	b29b      	uxth	r3, r3
 800263c:	2101      	movs	r1, #1
 800263e:	0018      	movs	r0, r3
 8002640:	f000 f848 	bl	80026d4 <digitalWrite>

		/* Copy this memory page of display data.
		*/
		OledPutBuffer(ccolOledMax, pb);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	0019      	movs	r1, r3
 8002648:	2080      	movs	r0, #128	; 0x80
 800264a:	f000 f80f 	bl	800266c <OledPutBuffer>
		pb += ccolOledMax;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	3380      	adds	r3, #128	; 0x80
 8002652:	603b      	str	r3, [r7, #0]
	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3301      	adds	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b03      	cmp	r3, #3
 800265e:	ddd7      	ble.n	8002610 <OledUpdate+0x10>

	}

}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001ec 	.word	0x200001ec

0800266c <OledPutBuffer>:
**		Send the bytes specified in rgbTx to the slave and return
**		the bytes read from the slave in rgbRx
*/
void
OledPutBuffer(int cb, uint8_t * rgbTx)
	{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	int		ib;
	uint8_t	bTmp;

	/* Write/Read the data
	*/
	for (ib = 0; ib < cb; ib++) {
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e00c      	b.n	8002696 <OledPutBuffer+0x2a>

	    HAL_SPI_Transmit(&hspi1, rgbTx, 1, HAL_MAX_DELAY);
 800267c:	2301      	movs	r3, #1
 800267e:	425b      	negs	r3, r3
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	4809      	ldr	r0, [pc, #36]	; (80026a8 <OledPutBuffer+0x3c>)
 8002684:	2201      	movs	r2, #1
 8002686:	f7fe ff69 	bl	800155c <HAL_SPI_Transmit>
	    rgbTx++;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	603b      	str	r3, [r7, #0]
	for (ib = 0; ib < cb; ib++) {
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3301      	adds	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	dbee      	blt.n	800267c <OledPutBuffer+0x10>
		//bTmp = spiCon.transfer(*rgbTx++);

	}

}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	2000049c 	.word	0x2000049c

080026ac <Spi2PutByte>:
**	Description:
**		Write/Read a byte on SPI port 2
*/
uint8_t
Spi2PutByte(uint8_t bVal)
	{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	0002      	movs	r2, r0
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	701a      	strb	r2, [r3, #0]
	uint8_t	bRx;

    HAL_SPI_Transmit(&hspi1, &bVal, 1, HAL_MAX_DELAY);
 80026b8:	2301      	movs	r3, #1
 80026ba:	425b      	negs	r3, r3
 80026bc:	1df9      	adds	r1, r7, #7
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <Spi2PutByte+0x24>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	f7fe ff4b 	bl	800155c <HAL_SPI_Transmit>

	// bRx = spiCon.transfer(bVal);
	
	//return bRx;
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000049c 	.word	0x2000049c

080026d4 <digitalWrite>:

void digitalWrite(uint16_t mypin, unsigned char cLevel){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	0002      	movs	r2, r0
 80026dc:	1dbb      	adds	r3, r7, #6
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	1d7b      	adds	r3, r7, #5
 80026e2:	1c0a      	adds	r2, r1, #0
 80026e4:	701a      	strb	r2, [r3, #0]
	
	
	HAL_GPIO_WritePin(GPIOA, mypin, cLevel);
 80026e6:	1d7b      	adds	r3, r7, #5
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	1dbb      	adds	r3, r7, #6
 80026ec:	8819      	ldrh	r1, [r3, #0]
 80026ee:	2390      	movs	r3, #144	; 0x90
 80026f0:	05db      	lsls	r3, r3, #23
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fe f947 	bl	8000986 <HAL_GPIO_WritePin>

	
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}

08002700 <OledMoveTo>:
**		Set the current graphics drawing position.
*/

void
OledMoveTo(int xco, int yco)
	{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]

	/* Clamp the specified coordinates to the display surface
	*/
	xco = OledClampXco(xco);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f000 f8e5 	bl	80028dc <OledClampXco>
 8002712:	0003      	movs	r3, r0
 8002714:	607b      	str	r3, [r7, #4]
	yco = OledClampYco(yco);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f8f2 	bl	8002902 <OledClampYco>
 800271e:	0003      	movs	r3, r0
 8002720:	603b      	str	r3, [r7, #0]

	/* Save the current position.
	*/
	xcoOledCur = xco;
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <OledMoveTo+0x58>)
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	601a      	str	r2, [r3, #0]
	ycoOledCur = yco;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <OledMoveTo+0x5c>)
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	601a      	str	r2, [r3, #0]

	/* Compute the display access parameters corresponding to
	** the specified position.
	*/
	pbOledCur = &rgbOledBmp[((yco/8) * ccolOledMax) + xco];
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da00      	bge.n	8002736 <OledMoveTo+0x36>
 8002734:	3307      	adds	r3, #7
 8002736:	10db      	asrs	r3, r3, #3
 8002738:	01da      	lsls	r2, r3, #7
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	18d2      	adds	r2, r2, r3
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <OledMoveTo+0x60>)
 8002740:	18d2      	adds	r2, r2, r3
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <OledMoveTo+0x64>)
 8002744:	601a      	str	r2, [r3, #0]
	bnOledCur = yco & 7;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2207      	movs	r2, #7
 800274a:	401a      	ands	r2, r3
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <OledMoveTo+0x68>)
 800274e:	601a      	str	r2, [r3, #0]

}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200003ec 	.word	0x200003ec
 800275c:	200001e8 	.word	0x200001e8
 8002760:	200001ec 	.word	0x200001ec
 8002764:	200003f0 	.word	0x200003f0
 8002768:	20000410 	.word	0x20000410

0800276c <OledSetDrawMode>:
**		Set the specified mode as the current drawing mode.
*/

void
OledSetDrawMode(int mod)
	{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

	modOledCur = mod;
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <OledSetDrawMode+0x5c>)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]

	switch(mod) {
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d00c      	beq.n	800279a <OledSetDrawMode+0x2e>
 8002780:	dc02      	bgt.n	8002788 <OledSetDrawMode+0x1c>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <OledSetDrawMode+0x26>
 8002786:	e014      	b.n	80027b2 <OledSetDrawMode+0x46>
 8002788:	2b02      	cmp	r3, #2
 800278a:	d00a      	beq.n	80027a2 <OledSetDrawMode+0x36>
 800278c:	2b03      	cmp	r3, #3
 800278e:	d00c      	beq.n	80027aa <OledSetDrawMode+0x3e>
 8002790:	e00f      	b.n	80027b2 <OledSetDrawMode+0x46>
		case	modOledSet:
			pfnDoRop = OledRopSet;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <OledSetDrawMode+0x60>)
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <OledSetDrawMode+0x64>)
 8002796:	601a      	str	r2, [r3, #0]
			break;
 8002798:	e011      	b.n	80027be <OledSetDrawMode+0x52>

		case	modOledOr:
			pfnDoRop = OledRopOr;
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <OledSetDrawMode+0x60>)
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <OledSetDrawMode+0x68>)
 800279e:	601a      	str	r2, [r3, #0]
			break;
 80027a0:	e00d      	b.n	80027be <OledSetDrawMode+0x52>

		case	modOledAnd:
			pfnDoRop = OledRopAnd;
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <OledSetDrawMode+0x60>)
 80027a4:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <OledSetDrawMode+0x6c>)
 80027a6:	601a      	str	r2, [r3, #0]
			break;
 80027a8:	e009      	b.n	80027be <OledSetDrawMode+0x52>

		case	modOledXor:
			pfnDoRop = OledRopXor;
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <OledSetDrawMode+0x60>)
 80027ac:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <OledSetDrawMode+0x70>)
 80027ae:	601a      	str	r2, [r3, #0]
			break;
 80027b0:	e005      	b.n	80027be <OledSetDrawMode+0x52>

		default:
			modOledCur = modOledSet;
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <OledSetDrawMode+0x5c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
			pfnDoRop = OledRopSet;
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <OledSetDrawMode+0x60>)
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <OledSetDrawMode+0x64>)
 80027bc:	601a      	str	r2, [r3, #0]
	}

}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	20000414 	.word	0x20000414
 80027cc:	20000418 	.word	0x20000418
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	0800282f 	.word	0x0800282f
 80027d8:	08002869 	.word	0x08002869
 80027dc:	080028a3 	.word	0x080028a3

080027e0 <OledRopSet>:
**
*/

uint8_t
OledRopSet(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0004      	movs	r4, r0
 80027e8:	0008      	movs	r0, r1
 80027ea:	0011      	movs	r1, r2
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	1c22      	adds	r2, r4, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	1dbb      	adds	r3, r7, #6
 80027f4:	1c02      	adds	r2, r0, #0
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	1d7b      	adds	r3, r7, #5
 80027fa:	1c0a      	adds	r2, r1, #0
 80027fc:	701a      	strb	r2, [r3, #0]

	return (bDsp & ~mskPix) | (bPix & mskPix);
 80027fe:	1d7b      	adds	r3, r7, #5
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b25b      	sxtb	r3, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	b25b      	sxtb	r3, r3
 8002808:	1dba      	adds	r2, r7, #6
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	b252      	sxtb	r2, r2
 800280e:	4013      	ands	r3, r2
 8002810:	b25a      	sxtb	r2, r3
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	1d79      	adds	r1, r7, #5
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	7809      	ldrb	r1, [r1, #0]
 800281a:	400b      	ands	r3, r1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	b25b      	sxtb	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b25b      	sxtb	r3, r3
 8002824:	b2db      	uxtb	r3, r3

}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b003      	add	sp, #12
 800282c:	bd90      	pop	{r4, r7, pc}

0800282e <OledRopOr>:
**
*/

uint8_t
OledRopOr(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 800282e:	b590      	push	{r4, r7, lr}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	0004      	movs	r4, r0
 8002836:	0008      	movs	r0, r1
 8002838:	0011      	movs	r1, r2
 800283a:	1dfb      	adds	r3, r7, #7
 800283c:	1c22      	adds	r2, r4, #0
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	1dbb      	adds	r3, r7, #6
 8002842:	1c02      	adds	r2, r0, #0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	1d7b      	adds	r3, r7, #5
 8002848:	1c0a      	adds	r2, r1, #0
 800284a:	701a      	strb	r2, [r3, #0]

	return bDsp | (bPix & mskPix);
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	1d7a      	adds	r2, r7, #5
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	4013      	ands	r3, r2
 8002856:	b2da      	uxtb	r2, r3
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	b2db      	uxtb	r3, r3

}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b003      	add	sp, #12
 8002866:	bd90      	pop	{r4, r7, pc}

08002868 <OledRopAnd>:
**
*/

uint8_t
OledRopAnd(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	0004      	movs	r4, r0
 8002870:	0008      	movs	r0, r1
 8002872:	0011      	movs	r1, r2
 8002874:	1dfb      	adds	r3, r7, #7
 8002876:	1c22      	adds	r2, r4, #0
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	1dbb      	adds	r3, r7, #6
 800287c:	1c02      	adds	r2, r0, #0
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	1d7b      	adds	r3, r7, #5
 8002882:	1c0a      	adds	r2, r1, #0
 8002884:	701a      	strb	r2, [r3, #0]

	return bDsp & (bPix & mskPix);
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	1d7a      	adds	r2, r7, #5
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	4013      	ands	r3, r2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	1dba      	adds	r2, r7, #6
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	4013      	ands	r3, r2
 8002898:	b2db      	uxtb	r3, r3

}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b003      	add	sp, #12
 80028a0:	bd90      	pop	{r4, r7, pc}

080028a2 <OledRopXor>:
**
*/

uint8_t
OledRopXor(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 80028a2:	b590      	push	{r4, r7, lr}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	0004      	movs	r4, r0
 80028aa:	0008      	movs	r0, r1
 80028ac:	0011      	movs	r1, r2
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	1c22      	adds	r2, r4, #0
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	1dbb      	adds	r3, r7, #6
 80028b6:	1c02      	adds	r2, r0, #0
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	1d7b      	adds	r3, r7, #5
 80028bc:	1c0a      	adds	r2, r1, #0
 80028be:	701a      	strb	r2, [r3, #0]

	return bDsp ^ (bPix & mskPix);
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	1d7a      	adds	r2, r7, #5
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	4013      	ands	r3, r2
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	1dbb      	adds	r3, r7, #6
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4053      	eors	r3, r2
 80028d2:	b2db      	uxtb	r3, r3

}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b003      	add	sp, #12
 80028da:	bd90      	pop	{r4, r7, pc}

080028dc <OledClampXco>:
**		This routine forces the x value to be on the display.
*/

int
OledClampXco(int xco)
	{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	if (xco < 0) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da01      	bge.n	80028ee <OledClampXco+0x12>
		xco = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
	}
	if (xco >= ccolOledMax) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b7f      	cmp	r3, #127	; 0x7f
 80028f2:	dd01      	ble.n	80028f8 <OledClampXco+0x1c>
		xco = ccolOledMax-1;
 80028f4:	237f      	movs	r3, #127	; 0x7f
 80028f6:	607b      	str	r3, [r7, #4]
	}

	return xco;
 80028f8:	687b      	ldr	r3, [r7, #4]

}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}

08002902 <OledClampYco>:
**		This routine forces the y value to be on the display.
*/

int
OledClampYco(int yco)
	{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
	if (yco < 0) {
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	da01      	bge.n	8002914 <OledClampYco+0x12>
		yco = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	607b      	str	r3, [r7, #4]
	}
	if (yco >= crowOledMax) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b1f      	cmp	r3, #31
 8002918:	dd01      	ble.n	800291e <OledClampYco+0x1c>
		yco = crowOledMax-1;
 800291a:	231f      	movs	r3, #31
 800291c:	607b      	str	r3, [r7, #4]
	}

	return yco;
 800291e:	687b      	ldr	r3, [r7, #4]

}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <delay>:
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(equivalencia[pino][0], &GPIO_InitStruct);
	}
}

delay(int time){
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f7fd fdc2 	bl	80004bc <HAL_Delay>
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <digitalEscrever>:

digitalEscrever(int pino, int modo){
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	if(modo==1){
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10f      	bne.n	8002974 <digitalEscrever+0x30>
		HAL_GPIO_WritePin(equivalencia[pino][0], equivalencia[pino][1], GPIO_PIN_SET);
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <digitalEscrever+0x60>)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	58d3      	ldr	r3, [r2, r3]
 800295c:	0018      	movs	r0, r3
 800295e:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <digitalEscrever+0x60>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	3304      	adds	r3, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	2201      	movs	r2, #1
 800296e:	0019      	movs	r1, r3
 8002970:	f7fe f809 	bl	8000986 <HAL_GPIO_WritePin>
	}
	if(modo==0){
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <digitalEscrever+0x56>
		HAL_GPIO_WritePin(equivalencia[pino][0], equivalencia[pino][1], GPIO_PIN_RESET);
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <digitalEscrever+0x60>)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	00d2      	lsls	r2, r2, #3
 8002980:	58d3      	ldr	r3, [r2, r3]
 8002982:	0018      	movs	r0, r3
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <digitalEscrever+0x60>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	18d3      	adds	r3, r2, r3
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	2200      	movs	r2, #0
 8002994:	0019      	movs	r1, r3
 8002996:	f7fd fff6 	bl	8000986 <HAL_GPIO_WritePin>
	}
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000008 	.word	0x20000008

080029a8 <digitalRead>:

digitalRead(int pino){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_ReadPin(equivalencia[pino][0], equivalencia[pino][1]);
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <digitalRead+0x30>)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	00d2      	lsls	r2, r2, #3
 80029b6:	58d3      	ldr	r3, [r2, r3]
 80029b8:	0018      	movs	r0, r3
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <digitalRead+0x30>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	0019      	movs	r1, r3
 80029ca:	f7fd ffbf 	bl	800094c <HAL_GPIO_ReadPin>
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000008 	.word	0x20000008

080029dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const short ent3 = 2;
 80029e2:	2314      	movs	r3, #20
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2202      	movs	r2, #2
 80029e8:	801a      	strh	r2, [r3, #0]
	const short ent2 = 3;
 80029ea:	2312      	movs	r3, #18
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	2203      	movs	r2, #3
 80029f0:	801a      	strh	r2, [r3, #0]
	const short ent1 = 9;
 80029f2:	2310      	movs	r3, #16
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2209      	movs	r2, #9
 80029f8:	801a      	strh	r2, [r3, #0]
	const short ent0 = 10;
 80029fa:	230e      	movs	r3, #14
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	220a      	movs	r2, #10
 8002a00:	801a      	strh	r2, [r3, #0]
	short valor1 = 0;
 8002a02:	230c      	movs	r3, #12
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2200      	movs	r2, #0
 8002a08:	801a      	strh	r2, [r3, #0]
	short valor2 = 0;
 8002a0a:	230a      	movs	r3, #10
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2200      	movs	r2, #0
 8002a10:	801a      	strh	r2, [r3, #0]
	short val0 = 0;
 8002a12:	231e      	movs	r3, #30
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]
	short val1 = 0;
 8002a1a:	231c      	movs	r3, #28
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2200      	movs	r2, #0
 8002a20:	801a      	strh	r2, [r3, #0]
	short val2 = 0;
 8002a22:	231a      	movs	r3, #26
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	2200      	movs	r2, #0
 8002a28:	801a      	strh	r2, [r3, #0]
	short val3 = 0;
 8002a2a:	2318      	movs	r3, #24
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2200      	movs	r2, #0
 8002a30:	801a      	strh	r2, [r3, #0]
	const short led1 = 14;
 8002a32:	2308      	movs	r3, #8
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	220e      	movs	r2, #14
 8002a38:	801a      	strh	r2, [r3, #0]
	const short led2 = 12;
 8002a3a:	1dbb      	adds	r3, r7, #6
 8002a3c:	220c      	movs	r2, #12
 8002a3e:	801a      	strh	r2, [r3, #0]
	short printa = 0;
 8002a40:	2316      	movs	r3, #22
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a48:	f7fd fcd4 	bl	80003f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a4c:	f000 fb76 	bl	800313c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a50:	f000 fc42 	bl	80032d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002a54:	f000 fbd2 	bl	80031fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a58:	f000 fc0e 	bl	8003278 <MX_USART1_UART_Init>
  OledInit();
 8002a5c:	f7ff fcd8 	bl	8002410 <OledInit>
  BemVindo();
 8002a60:	f000 fb50 	bl	8003104 <BemVindo>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  valor1 = ((val3*8)+(val2*4)+(val1*2)+(val0*1));
 8002a64:	2318      	movs	r3, #24
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	5e9b      	ldrsh	r3, [r3, r2]
 8002a6c:	005a      	lsls	r2, r3, #1
 8002a6e:	231a      	movs	r3, #26
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2100      	movs	r1, #0
 8002a74:	5e5b      	ldrsh	r3, [r3, r1]
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	005a      	lsls	r2, r3, #1
 8002a7a:	231c      	movs	r3, #28
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5e5b      	ldrsh	r3, [r3, r1]
 8002a82:	18d3      	adds	r3, r2, r3
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	18db      	adds	r3, r3, r3
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	231e      	movs	r3, #30
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	18d3      	adds	r3, r2, r3
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	230c      	movs	r3, #12
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	801a      	strh	r2, [r3, #0]

	  	  val0 = digitalRead(ent0);
 8002a9a:	230e      	movs	r3, #14
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	5e9b      	ldrsh	r3, [r3, r2]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7ff ff80 	bl	80029a8 <digitalRead>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	231e      	movs	r3, #30
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	801a      	strh	r2, [r3, #0]
	  	  val1 = digitalRead(ent1);
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff ff75 	bl	80029a8 <digitalRead>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	231c      	movs	r3, #28
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	801a      	strh	r2, [r3, #0]
	  	  val2 = digitalRead(ent2);
 8002ac6:	2312      	movs	r3, #18
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2200      	movs	r2, #0
 8002acc:	5e9b      	ldrsh	r3, [r3, r2]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ff6a 	bl	80029a8 <digitalRead>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	231a      	movs	r3, #26
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	801a      	strh	r2, [r3, #0]
	  	  val3 = digitalRead(ent3);
 8002adc:	2314      	movs	r3, #20
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	5e9b      	ldrsh	r3, [r3, r2]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff ff5f 	bl	80029a8 <digitalRead>
 8002aea:	0002      	movs	r2, r0
 8002aec:	2318      	movs	r3, #24
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	801a      	strh	r2, [r3, #0]


	  	  valor2 = ((val3*8)+(val2*4)+(val1*2)+(val0*1));
 8002af2:	2318      	movs	r3, #24
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2200      	movs	r2, #0
 8002af8:	5e9b      	ldrsh	r3, [r3, r2]
 8002afa:	005a      	lsls	r2, r3, #1
 8002afc:	231a      	movs	r3, #26
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2100      	movs	r1, #0
 8002b02:	5e5b      	ldrsh	r3, [r3, r1]
 8002b04:	18d3      	adds	r3, r2, r3
 8002b06:	005a      	lsls	r2, r3, #1
 8002b08:	231c      	movs	r3, #28
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5e5b      	ldrsh	r3, [r3, r1]
 8002b10:	18d3      	adds	r3, r2, r3
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	18db      	adds	r3, r3, r3
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	231e      	movs	r3, #30
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	18d3      	adds	r3, r2, r3
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	230a      	movs	r3, #10
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	801a      	strh	r2, [r3, #0]
	  	  if(valor1==valor2){
 8002b28:	230c      	movs	r3, #12
 8002b2a:	18fa      	adds	r2, r7, r3
 8002b2c:	230a      	movs	r3, #10
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2100      	movs	r1, #0
 8002b32:	5e52      	ldrsh	r2, [r2, r1]
 8002b34:	2100      	movs	r1, #0
 8002b36:	5e5b      	ldrsh	r3, [r3, r1]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d107      	bne.n	8002b4c <main+0x170>
	  		  printa = 0;
 8002b3c:	2316      	movs	r3, #22
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	801a      	strh	r2, [r3, #0]
	  		  delay(50);
 8002b44:	2032      	movs	r0, #50	; 0x32
 8002b46:	f7ff feef 	bl	8002928 <delay>
 8002b4a:	e006      	b.n	8002b5a <main+0x17e>
	  	  }
	  	  else{
	  		  printa = 1;
 8002b4c:	2316      	movs	r3, #22
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2201      	movs	r2, #1
 8002b52:	801a      	strh	r2, [r3, #0]
	  		  delay(50);
 8002b54:	2032      	movs	r0, #50	; 0x32
 8002b56:	f7ff fee7 	bl	8002928 <delay>
	  	  }
	  	  valor1 = valor2;
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	220a      	movs	r2, #10
 8002b60:	18ba      	adds	r2, r7, r2
 8002b62:	8812      	ldrh	r2, [r2, #0]
 8002b64:	801a      	strh	r2, [r3, #0]
	  	  delay(50);
 8002b66:	2032      	movs	r0, #50	; 0x32
 8002b68:	f7ff fede 	bl	8002928 <delay>


	  	  //ficar piscando enquanto a senha est� sendo redefinida
	  	  if(valor1==5){
 8002b6c:	230c      	movs	r3, #12
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	5e9b      	ldrsh	r3, [r3, r2]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d117      	bne.n	8002ba8 <main+0x1cc>
	  		  digitalEscrever(led2, 1);
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fedf 	bl	8002944 <digitalEscrever>
	  		  delay(500);
 8002b86:	23fa      	movs	r3, #250	; 0xfa
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff fecc 	bl	8002928 <delay>
	  		  digitalEscrever(led2, 0);
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	2200      	movs	r2, #0
 8002b94:	5e9b      	ldrsh	r3, [r3, r2]
 8002b96:	2100      	movs	r1, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff fed3 	bl	8002944 <digitalEscrever>
	  		  delay(500);
 8002b9e:	23fa      	movs	r3, #250	; 0xfa
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7ff fec0 	bl	8002928 <delay>
	  	  }

	  	  if(printa > 0)
 8002ba8:	2316      	movs	r3, #22
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2200      	movs	r2, #0
 8002bae:	5e9b      	ldrsh	r3, [r3, r2]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	dc00      	bgt.n	8002bb6 <main+0x1da>
 8002bb4:	e756      	b.n	8002a64 <main+0x88>
	  	  {
	  		  switch(valor1){
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2200      	movs	r2, #0
 8002bbc:	5e9b      	ldrsh	r3, [r3, r2]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d900      	bls.n	8002bc4 <main+0x1e8>
 8002bc2:	e289      	b.n	80030d8 <main+0x6fc>
 8002bc4:	009a      	lsls	r2, r3, #2
 8002bc6:	4bee      	ldr	r3, [pc, #952]	; (8002f80 <main+0x5a4>)
 8002bc8:	18d3      	adds	r3, r2, r3
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	469f      	mov	pc, r3
	  		  case 0: OledClear();
 8002bce:	f7ff fcf1 	bl	80025b4 <OledClear>
	  		  	  	  OledSetCursor(0,0);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7ff fb47 	bl	8002268 <OledSetCursor>
	  		  	  	  OledPutString("Senha Mestre");
 8002bda:	4bea      	ldr	r3, [pc, #936]	; (8002f84 <main+0x5a8>)
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fb7d 	bl	80022dc <OledPutString>
	  		  	  	  OledSetCursor(0,1);
 8002be2:	2101      	movs	r1, #1
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff fb3f 	bl	8002268 <OledSetCursor>
	  		  	  	  OledPutString("digitada com    sucesso!");
 8002bea:	4be7      	ldr	r3, [pc, #924]	; (8002f88 <main+0x5ac>)
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff fb75 	bl	80022dc <OledPutString>
	  		  	  	  delay(2000);
 8002bf2:	23fa      	movs	r3, #250	; 0xfa
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff fe96 	bl	8002928 <delay>
	  		  	  	  OledClear();
 8002bfc:	f7ff fcda 	bl	80025b4 <OledClear>
	  		  	  	  BemVindo();
 8002c00:	f000 fa80 	bl	8003104 <BemVindo>
	  				  break;
 8002c04:	e269      	b.n	80030da <main+0x6fe>

	  		  case 1:
	  			  	  HAL_UART_Transmit(&huart1,(uint8_t *)"TITULAR: Rodrigo\nAPARTAMENTO: 1\nEntrada Liberada\n\n",52, 100);
 8002c06:	49e1      	ldr	r1, [pc, #900]	; (8002f8c <main+0x5b0>)
 8002c08:	48e1      	ldr	r0, [pc, #900]	; (8002f90 <main+0x5b4>)
 8002c0a:	2364      	movs	r3, #100	; 0x64
 8002c0c:	2234      	movs	r2, #52	; 0x34
 8002c0e:	f7fe ffa5 	bl	8001b5c <HAL_UART_Transmit>
	  				  OledClear();
 8002c12:	f7ff fccf 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002c16:	2100      	movs	r1, #0
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7ff fb25 	bl	8002268 <OledSetCursor>
	  				  OledPutString("ENTRADA LIBERADA");
 8002c1e:	4bdd      	ldr	r3, [pc, #884]	; (8002f94 <main+0x5b8>)
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff fb5b 	bl	80022dc <OledPutString>
	  				  OledSetCursor(0,1);
 8002c26:	2101      	movs	r1, #1
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7ff fb1d 	bl	8002268 <OledSetCursor>
	  				  OledPutString("APARTAMENTO 1");
 8002c2e:	4bda      	ldr	r3, [pc, #872]	; (8002f98 <main+0x5bc>)
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7ff fb53 	bl	80022dc <OledPutString>
	  				  digitalEscrever(led1, 1);
 8002c36:	2308      	movs	r3, #8
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	5e9b      	ldrsh	r3, [r3, r2]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7ff fe7f 	bl	8002944 <digitalEscrever>
	  				  delay(3000);
 8002c46:	4bd5      	ldr	r3, [pc, #852]	; (8002f9c <main+0x5c0>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fe6d 	bl	8002928 <delay>
					  OledClear();
 8002c4e:	f7ff fcb1 	bl	80025b4 <OledClear>
					  BemVindo();
 8002c52:	f000 fa57 	bl	8003104 <BemVindo>
					  digitalEscrever(led1, 0);
 8002c56:	2308      	movs	r3, #8
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	5e9b      	ldrsh	r3, [r3, r2]
 8002c5e:	2100      	movs	r1, #0
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff fe6f 	bl	8002944 <digitalEscrever>


	  				  break;
 8002c66:	e238      	b.n	80030da <main+0x6fe>
	  		  case 2: HAL_UART_Transmit(&huart1,(uint8_t *)"TITULAR: Thierry\nAPARTAMENTO: 2\nEntrada Liberada\n\n",52, 100);
 8002c68:	49cd      	ldr	r1, [pc, #820]	; (8002fa0 <main+0x5c4>)
 8002c6a:	48c9      	ldr	r0, [pc, #804]	; (8002f90 <main+0x5b4>)
 8002c6c:	2364      	movs	r3, #100	; 0x64
 8002c6e:	2234      	movs	r2, #52	; 0x34
 8002c70:	f7fe ff74 	bl	8001b5c <HAL_UART_Transmit>
	  				  OledClear();
 8002c74:	f7ff fc9e 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7ff faf4 	bl	8002268 <OledSetCursor>
	  				  OledPutString("ENTRADA LIBERADA");
 8002c80:	4bc4      	ldr	r3, [pc, #784]	; (8002f94 <main+0x5b8>)
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff fb2a 	bl	80022dc <OledPutString>
	  				  OledSetCursor(0,1);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7ff faec 	bl	8002268 <OledSetCursor>
	  				  OledPutString("APARTAMENTO 2");
 8002c90:	4bc4      	ldr	r3, [pc, #784]	; (8002fa4 <main+0x5c8>)
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff fb22 	bl	80022dc <OledPutString>
	  				  digitalEscrever(led1, 1);
 8002c98:	2308      	movs	r3, #8
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff fe4e 	bl	8002944 <digitalEscrever>
					  delay(3000);
 8002ca8:	4bbc      	ldr	r3, [pc, #752]	; (8002f9c <main+0x5c0>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff fe3c 	bl	8002928 <delay>
					  OledClear();
 8002cb0:	f7ff fc80 	bl	80025b4 <OledClear>
					  BemVindo();
 8002cb4:	f000 fa26 	bl	8003104 <BemVindo>
					  digitalEscrever(led1, 0);
 8002cb8:	2308      	movs	r3, #8
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff fe3e 	bl	8002944 <digitalEscrever>
	  				  break;
 8002cc8:	e207      	b.n	80030da <main+0x6fe>
	  		  case 3: HAL_UART_Transmit(&huart1,(uint8_t *)"TITULAR: Gabriela\nAPARTAMENTO: 3\nEntrada Liberada\n\n",52, 100);
 8002cca:	49b7      	ldr	r1, [pc, #732]	; (8002fa8 <main+0x5cc>)
 8002ccc:	48b0      	ldr	r0, [pc, #704]	; (8002f90 <main+0x5b4>)
 8002cce:	2364      	movs	r3, #100	; 0x64
 8002cd0:	2234      	movs	r2, #52	; 0x34
 8002cd2:	f7fe ff43 	bl	8001b5c <HAL_UART_Transmit>
	  				  OledClear();
 8002cd6:	f7ff fc6d 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7ff fac3 	bl	8002268 <OledSetCursor>
	  				  OledPutString("ENTRADA LIBERADA");
 8002ce2:	4bac      	ldr	r3, [pc, #688]	; (8002f94 <main+0x5b8>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff faf9 	bl	80022dc <OledPutString>
	  				  OledSetCursor(0,1);
 8002cea:	2101      	movs	r1, #1
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7ff fabb 	bl	8002268 <OledSetCursor>
	  				  OledPutString("APARTAMENTO 3");
 8002cf2:	4bae      	ldr	r3, [pc, #696]	; (8002fac <main+0x5d0>)
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff faf1 	bl	80022dc <OledPutString>
	  				  digitalEscrever(led1, 1);
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2200      	movs	r2, #0
 8002d00:	5e9b      	ldrsh	r3, [r3, r2]
 8002d02:	2101      	movs	r1, #1
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff fe1d 	bl	8002944 <digitalEscrever>
					  delay(3000);
 8002d0a:	4ba4      	ldr	r3, [pc, #656]	; (8002f9c <main+0x5c0>)
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff fe0b 	bl	8002928 <delay>
					  OledClear();
 8002d12:	f7ff fc4f 	bl	80025b4 <OledClear>
					  BemVindo();
 8002d16:	f000 f9f5 	bl	8003104 <BemVindo>
					  digitalEscrever(led1, 0);
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2200      	movs	r2, #0
 8002d20:	5e9b      	ldrsh	r3, [r3, r2]
 8002d22:	2100      	movs	r1, #0
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fe0d 	bl	8002944 <digitalEscrever>
	  				  break;
 8002d2a:	e1d6      	b.n	80030da <main+0x6fe>
	  		  case 4: HAL_UART_Transmit(&huart1,(uint8_t *)"TITULAR: Gabriel\nAPARTAMENTO: 4\nEntrada Liberada\n\n",52, 100);
 8002d2c:	49a0      	ldr	r1, [pc, #640]	; (8002fb0 <main+0x5d4>)
 8002d2e:	4898      	ldr	r0, [pc, #608]	; (8002f90 <main+0x5b4>)
 8002d30:	2364      	movs	r3, #100	; 0x64
 8002d32:	2234      	movs	r2, #52	; 0x34
 8002d34:	f7fe ff12 	bl	8001b5c <HAL_UART_Transmit>
	  				  OledClear();
 8002d38:	f7ff fc3c 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7ff fa92 	bl	8002268 <OledSetCursor>
	  				  OledPutString("ENTRADA LIBERADA");
 8002d44:	4b93      	ldr	r3, [pc, #588]	; (8002f94 <main+0x5b8>)
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff fac8 	bl	80022dc <OledPutString>
	  				  OledSetCursor(0,1);
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7ff fa8a 	bl	8002268 <OledSetCursor>
	  				  OledPutString("APARTAMENTO 4");
 8002d54:	4b97      	ldr	r3, [pc, #604]	; (8002fb4 <main+0x5d8>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff fac0 	bl	80022dc <OledPutString>
	  				  digitalEscrever(led1, 1);
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	5e9b      	ldrsh	r3, [r3, r2]
 8002d64:	2101      	movs	r1, #1
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fdec 	bl	8002944 <digitalEscrever>
					  delay(3000);
 8002d6c:	4b8b      	ldr	r3, [pc, #556]	; (8002f9c <main+0x5c0>)
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f7ff fdda 	bl	8002928 <delay>
					  OledClear();
 8002d74:	f7ff fc1e 	bl	80025b4 <OledClear>
					  BemVindo();
 8002d78:	f000 f9c4 	bl	8003104 <BemVindo>
					  digitalEscrever(led1, 0);
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2200      	movs	r2, #0
 8002d82:	5e9b      	ldrsh	r3, [r3, r2]
 8002d84:	2100      	movs	r1, #0
 8002d86:	0018      	movs	r0, r3
 8002d88:	f7ff fddc 	bl	8002944 <digitalEscrever>
	  				  break;
 8002d8c:	e1a5      	b.n	80030da <main+0x6fe>
	  		  case 5: OledClear();
 8002d8e:	f7ff fc11 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002d92:	2100      	movs	r1, #0
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fa67 	bl	8002268 <OledSetCursor>
	  				  OledPutString("REDEFINICAO DE");
 8002d9a:	4b87      	ldr	r3, [pc, #540]	; (8002fb8 <main+0x5dc>)
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff fa9d 	bl	80022dc <OledPutString>
	  				  OledSetCursor(0,1);
 8002da2:	2101      	movs	r1, #1
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7ff fa5f 	bl	8002268 <OledSetCursor>
	  				  OledPutString("SENHA");
 8002daa:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <main+0x5e0>)
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff fa95 	bl	80022dc <OledPutString>
	  				  HAL_Delay(2000);
 8002db2:	23fa      	movs	r3, #250	; 0xfa
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7fd fb80 	bl	80004bc <HAL_Delay>
	  				  OledClear();
 8002dbc:	f7ff fbfa 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7ff fa50 	bl	8002268 <OledSetCursor>
	  				  OledPutString("Digite o usuarioe a senha mestre");
 8002dc8:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <main+0x5e4>)
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff fa86 	bl	80022dc <OledPutString>
	  				  HAL_UART_Transmit(&huart1,(uint8_t *)"A SENHA ESTA SENDO REDEFINIDA\n\n", 32, 100);
 8002dd0:	497c      	ldr	r1, [pc, #496]	; (8002fc4 <main+0x5e8>)
 8002dd2:	486f      	ldr	r0, [pc, #444]	; (8002f90 <main+0x5b4>)
 8002dd4:	2364      	movs	r3, #100	; 0x64
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f7fe fec0 	bl	8001b5c <HAL_UART_Transmit>
	  				  break;
 8002ddc:	e17d      	b.n	80030da <main+0x6fe>
	  		  case 6: HAL_UART_Transmit(&huart1,(uint8_t *)"SISTEMA TRAVADO, COMPARECA A ENTRADA\n\n",40, 100);
 8002dde:	497a      	ldr	r1, [pc, #488]	; (8002fc8 <main+0x5ec>)
 8002de0:	486b      	ldr	r0, [pc, #428]	; (8002f90 <main+0x5b4>)
 8002de2:	2364      	movs	r3, #100	; 0x64
 8002de4:	2228      	movs	r2, #40	; 0x28
 8002de6:	f7fe feb9 	bl	8001b5c <HAL_UART_Transmit>
	  				  OledClear();
 8002dea:	f7ff fbe3 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002dee:	2100      	movs	r1, #0
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7ff fa39 	bl	8002268 <OledSetCursor>
	  				  OledPutString("3 ERROS         SISTEMA TRAVADO");
 8002df6:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <main+0x5f0>)
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff fa6f 	bl	80022dc <OledPutString>
	  				  OledSetCursor(0,2);
 8002dfe:	2102      	movs	r1, #2
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff fa31 	bl	8002268 <OledSetCursor>
	  				  OledPutString("Espere porteiro");
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <main+0x5f4>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff fa67 	bl	80022dc <OledPutString>
	  				  digitalEscrever(led2, 1);
 8002e0e:	1dbb      	adds	r3, r7, #6
 8002e10:	2200      	movs	r2, #0
 8002e12:	5e9b      	ldrsh	r3, [r3, r2]
 8002e14:	2101      	movs	r1, #1
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7ff fd94 	bl	8002944 <digitalEscrever>
	  				  digitalEscrever(led1, 1);
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2200      	movs	r2, #0
 8002e22:	5e9b      	ldrsh	r3, [r3, r2]
 8002e24:	2101      	movs	r1, #1
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7ff fd8c 	bl	8002944 <digitalEscrever>
	  				  break;
 8002e2c:	e155      	b.n	80030da <main+0x6fe>
	  		  case 7: OledClear();
 8002e2e:	f7ff fbc1 	bl	80025b4 <OledClear>
	  				  OledSetCursor(0,0);
 8002e32:	2100      	movs	r1, #0
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7ff fa17 	bl	8002268 <OledSetCursor>
	  				  OledPutString("Digite a nova   senha");
 8002e3a:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <main+0x5f8>)
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7ff fa4d 	bl	80022dc <OledPutString>
	  				  break;
 8002e42:	e14a      	b.n	80030da <main+0x6fe>
	  		  case 8: OledClear();
 8002e44:	f7ff fbb6 	bl	80025b4 <OledClear>
					  OledSetCursor(0,0);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7ff fa0c 	bl	8002268 <OledSetCursor>
					  OledPutString("SENHA INCORRETA");
 8002e50:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <main+0x5fc>)
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7ff fa42 	bl	80022dc <OledPutString>
					  OledSetCursor(0,1);
 8002e58:	2101      	movs	r1, #1
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7ff fa04 	bl	8002268 <OledSetCursor>
					  OledPutString("Digite novamente");
 8002e60:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <main+0x600>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff fa3a 	bl	80022dc <OledPutString>
					  OledSetCursor(0,2);
 8002e68:	2102      	movs	r1, #2
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7ff f9fc 	bl	8002268 <OledSetCursor>
					  OledPutString("Ha 2 tentativas");
 8002e70:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <main+0x604>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fa32 	bl	80022dc <OledPutString>
					  digitalEscrever(led2, 1);
 8002e78:	1dbb      	adds	r3, r7, #6
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e7e:	2101      	movs	r1, #1
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff fd5f 	bl	8002944 <digitalEscrever>
					  delay(3000);
 8002e86:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <main+0x5c0>)
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff fd4d 	bl	8002928 <delay>
					  digitalEscrever(led2, 0);
 8002e8e:	1dbb      	adds	r3, r7, #6
 8002e90:	2200      	movs	r2, #0
 8002e92:	5e9b      	ldrsh	r3, [r3, r2]
 8002e94:	2100      	movs	r1, #0
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7ff fd54 	bl	8002944 <digitalEscrever>
					  OledClear();
 8002e9c:	f7ff fb8a 	bl	80025b4 <OledClear>
	  				  BemVindo();
 8002ea0:	f000 f930 	bl	8003104 <BemVindo>
	  				  break;
 8002ea4:	e119      	b.n	80030da <main+0x6fe>
	  		  case 9: OledClear();
 8002ea6:	f7ff fb85 	bl	80025b4 <OledClear>
			  	  	  OledSetCursor(0,0);
 8002eaa:	2100      	movs	r1, #0
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7ff f9db 	bl	8002268 <OledSetCursor>
			  	  	  OledPutString("SENHA INCORRETA");
 8002eb2:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <main+0x5fc>)
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff fa11 	bl	80022dc <OledPutString>
			  	  	  OledSetCursor(0,1);
 8002eba:	2101      	movs	r1, #1
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff f9d3 	bl	8002268 <OledSetCursor>
			  	  	  OledPutString("Digite novamente");
 8002ec2:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <main+0x600>)
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff fa09 	bl	80022dc <OledPutString>
			  	  	  OledSetCursor(0,2);
 8002eca:	2102      	movs	r1, #2
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7ff f9cb 	bl	8002268 <OledSetCursor>
			  	  	  OledPutString("Ha 1 tentativa");
 8002ed2:	4b44      	ldr	r3, [pc, #272]	; (8002fe4 <main+0x608>)
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff fa01 	bl	80022dc <OledPutString>
			  	  	  digitalEscrever(led2, 1);
 8002eda:	1dbb      	adds	r3, r7, #6
 8002edc:	2200      	movs	r2, #0
 8002ede:	5e9b      	ldrsh	r3, [r3, r2]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff fd2e 	bl	8002944 <digitalEscrever>
			  	  	  delay(3000);
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <main+0x5c0>)
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff fd1c 	bl	8002928 <delay>
			  	   	  digitalEscrever(led2, 0);
 8002ef0:	1dbb      	adds	r3, r7, #6
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fd23 	bl	8002944 <digitalEscrever>
			  	  	  OledClear();
 8002efe:	f7ff fb59 	bl	80025b4 <OledClear>
			  	  	  BemVindo();
 8002f02:	f000 f8ff 	bl	8003104 <BemVindo>
	  				  break;
 8002f06:	e0e8      	b.n	80030da <main+0x6fe>
	  		  case 10:OledClear();
 8002f08:	f7ff fb54 	bl	80025b4 <OledClear>
	  		  	  	  OledSetCursor(0,0);
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7ff f9aa 	bl	8002268 <OledSetCursor>
	  		  	  	  OledPutString("DESTRAVADO");
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <main+0x60c>)
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7ff f9e0 	bl	80022dc <OledPutString>
	  		  	  	  delay(2000);
 8002f1c:	23fa      	movs	r3, #250	; 0xfa
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff fd01 	bl	8002928 <delay>
	  		  	  	  BemVindo();
 8002f26:	f000 f8ed 	bl	8003104 <BemVindo>
	  		  	      digitalEscrever(led2, 0);
 8002f2a:	1dbb      	adds	r3, r7, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f30:	2100      	movs	r1, #0
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff fd06 	bl	8002944 <digitalEscrever>
	  		  	      digitalEscrever(led1, 0);
 8002f38:	2308      	movs	r3, #8
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f40:	2100      	movs	r1, #0
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff fcfe 	bl	8002944 <digitalEscrever>
	  				  break;
 8002f48:	e0c7      	b.n	80030da <main+0x6fe>
	  		  case 11:OledSetCursor(0,4);
 8002f4a:	2104      	movs	r1, #4
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff f98b 	bl	8002268 <OledSetCursor>
	  	  	  	  	  OledPutString("*");
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <main+0x610>)
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff f9c1 	bl	80022dc <OledPutString>
	  	  	  	  	  break;
 8002f5a:	e0be      	b.n	80030da <main+0x6fe>
	  		  case 12:OledSetCursor(0,4);
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7ff f982 	bl	8002268 <OledSetCursor>
	  			  	  OledPutString("**");
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <main+0x614>)
 8002f66:	0018      	movs	r0, r3
 8002f68:	f7ff f9b8 	bl	80022dc <OledPutString>
	  				  break;
 8002f6c:	e0b5      	b.n	80030da <main+0x6fe>
	  		  case 13:OledSetCursor(0,4);
 8002f6e:	2104      	movs	r1, #4
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff f979 	bl	8002268 <OledSetCursor>
	  	  	  	  	  OledPutString("***");
 8002f76:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <main+0x618>)
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7ff f9af 	bl	80022dc <OledPutString>
	  				  break;
 8002f7e:	e0ac      	b.n	80030da <main+0x6fe>
 8002f80:	08003d2c 	.word	0x08003d2c
 8002f84:	080036d8 	.word	0x080036d8
 8002f88:	080036e8 	.word	0x080036e8
 8002f8c:	08003704 	.word	0x08003704
 8002f90:	2000041c 	.word	0x2000041c
 8002f94:	08003738 	.word	0x08003738
 8002f98:	0800374c 	.word	0x0800374c
 8002f9c:	00000bb8 	.word	0x00000bb8
 8002fa0:	0800375c 	.word	0x0800375c
 8002fa4:	08003790 	.word	0x08003790
 8002fa8:	080037a0 	.word	0x080037a0
 8002fac:	080037d4 	.word	0x080037d4
 8002fb0:	080037e4 	.word	0x080037e4
 8002fb4:	08003818 	.word	0x08003818
 8002fb8:	08003828 	.word	0x08003828
 8002fbc:	08003838 	.word	0x08003838
 8002fc0:	08003840 	.word	0x08003840
 8002fc4:	08003864 	.word	0x08003864
 8002fc8:	08003884 	.word	0x08003884
 8002fcc:	080038ac 	.word	0x080038ac
 8002fd0:	080038cc 	.word	0x080038cc
 8002fd4:	080038dc 	.word	0x080038dc
 8002fd8:	080038f4 	.word	0x080038f4
 8002fdc:	08003904 	.word	0x08003904
 8002fe0:	08003918 	.word	0x08003918
 8002fe4:	08003928 	.word	0x08003928
 8002fe8:	08003938 	.word	0x08003938
 8002fec:	08003944 	.word	0x08003944
 8002ff0:	08003948 	.word	0x08003948
 8002ff4:	0800394c 	.word	0x0800394c
	  		  case 14:OledClear();
 8002ff8:	f7ff fadc 	bl	80025b4 <OledClear>
	  			  	  OledSetCursor(0,0);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7ff f932 	bl	8002268 <OledSetCursor>
	  	  	  	  	  OledPutString("SENHA OU USUARIOINCORRETO");
 8003004:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <main+0x70c>)
 8003006:	0018      	movs	r0, r3
 8003008:	f7ff f968 	bl	80022dc <OledPutString>
	  	  	  	  	  OledSetCursor(0,2);
 800300c:	2102      	movs	r1, #2
 800300e:	2000      	movs	r0, #0
 8003010:	f7ff f92a 	bl	8002268 <OledSetCursor>
	  	  	  	  	  OledPutString("Operacao");
 8003014:	4b35      	ldr	r3, [pc, #212]	; (80030ec <main+0x710>)
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff f960 	bl	80022dc <OledPutString>
	  	  	  	  	  OledSetCursor(0,3);
 800301c:	2103      	movs	r1, #3
 800301e:	2000      	movs	r0, #0
 8003020:	f7ff f922 	bl	8002268 <OledSetCursor>
	  	  	  	  	  OledPutString("Invalida");
 8003024:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <main+0x714>)
 8003026:	0018      	movs	r0, r3
 8003028:	f7ff f958 	bl	80022dc <OledPutString>
	  	  	  	  	  digitalEscrever(led2, 1);
 800302c:	1dbb      	adds	r3, r7, #6
 800302e:	2200      	movs	r2, #0
 8003030:	5e9b      	ldrsh	r3, [r3, r2]
 8003032:	2101      	movs	r1, #1
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff fc85 	bl	8002944 <digitalEscrever>
					  delay(3000);
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <main+0x718>)
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fc73 	bl	8002928 <delay>
					  digitalEscrever(led2, 0);
 8003042:	1dbb      	adds	r3, r7, #6
 8003044:	2200      	movs	r2, #0
 8003046:	5e9b      	ldrsh	r3, [r3, r2]
 8003048:	2100      	movs	r1, #0
 800304a:	0018      	movs	r0, r3
 800304c:	f7ff fc7a 	bl	8002944 <digitalEscrever>
	  	  	  		  BemVindo();
 8003050:	f000 f858 	bl	8003104 <BemVindo>
	  				  break;
 8003054:	e041      	b.n	80030da <main+0x6fe>
	  		  case 15:HAL_UART_Transmit(&huart1,(uint8_t *)"A SENHA FOI REDEFINIDA\n\n",26, 100);
 8003056:	4928      	ldr	r1, [pc, #160]	; (80030f8 <main+0x71c>)
 8003058:	4828      	ldr	r0, [pc, #160]	; (80030fc <main+0x720>)
 800305a:	2364      	movs	r3, #100	; 0x64
 800305c:	221a      	movs	r2, #26
 800305e:	f7fe fd7d 	bl	8001b5c <HAL_UART_Transmit>
	  		  	  	  OledClear();
 8003062:	f7ff faa7 	bl	80025b4 <OledClear>
	  		  	  	  OledSetCursor(0,0);
 8003066:	2100      	movs	r1, #0
 8003068:	2000      	movs	r0, #0
 800306a:	f7ff f8fd 	bl	8002268 <OledSetCursor>
	  		  	  	  OledPutString("Senha redefinida");
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <main+0x724>)
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff f933 	bl	80022dc <OledPutString>
	  		  	  	  delay(1000);
 8003076:	23fa      	movs	r3, #250	; 0xfa
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fc54 	bl	8002928 <delay>
	  		  	  	  digitalEscrever(led1, 1);
 8003080:	2308      	movs	r3, #8
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2200      	movs	r2, #0
 8003086:	5e9b      	ldrsh	r3, [r3, r2]
 8003088:	2101      	movs	r1, #1
 800308a:	0018      	movs	r0, r3
 800308c:	f7ff fc5a 	bl	8002944 <digitalEscrever>
	  		  	  	  delay(200);
 8003090:	20c8      	movs	r0, #200	; 0xc8
 8003092:	f7ff fc49 	bl	8002928 <delay>
	  		  	  	  digitalEscrever(led1, 0);
 8003096:	2308      	movs	r3, #8
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2200      	movs	r2, #0
 800309c:	5e9b      	ldrsh	r3, [r3, r2]
 800309e:	2100      	movs	r1, #0
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff fc4f 	bl	8002944 <digitalEscrever>
	  		  	  	  delay(200);
 80030a6:	20c8      	movs	r0, #200	; 0xc8
 80030a8:	f7ff fc3e 	bl	8002928 <delay>
	  		  	      digitalEscrever(led1, 1);
 80030ac:	2308      	movs	r3, #8
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	5e9b      	ldrsh	r3, [r3, r2]
 80030b4:	2101      	movs	r1, #1
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fc44 	bl	8002944 <digitalEscrever>
	  		  	  	  delay(200);
 80030bc:	20c8      	movs	r0, #200	; 0xc8
 80030be:	f7ff fc33 	bl	8002928 <delay>
	  		  	  	  digitalEscrever(led1, 0);
 80030c2:	2308      	movs	r3, #8
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	2200      	movs	r2, #0
 80030c8:	5e9b      	ldrsh	r3, [r3, r2]
 80030ca:	2100      	movs	r1, #0
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff fc39 	bl	8002944 <digitalEscrever>
	  		  	  	  BemVindo();
 80030d2:	f000 f817 	bl	8003104 <BemVindo>
	  				  break;
 80030d6:	e000      	b.n	80030da <main+0x6fe>
	  		  default:
	  			  break;
 80030d8:	46c0      	nop			; (mov r8, r8)
	  		  }
	  		  delay(1000);
 80030da:	23fa      	movs	r3, #250	; 0xfa
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	0018      	movs	r0, r3
 80030e0:	f7ff fc22 	bl	8002928 <delay>
	  valor1 = ((val3*8)+(val2*4)+(val1*2)+(val0*1));
 80030e4:	e4be      	b.n	8002a64 <main+0x88>
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	08003950 	.word	0x08003950
 80030ec:	0800396c 	.word	0x0800396c
 80030f0:	08003978 	.word	0x08003978
 80030f4:	00000bb8 	.word	0x00000bb8
 80030f8:	08003984 	.word	0x08003984
 80030fc:	2000041c 	.word	0x2000041c
 8003100:	080039a0 	.word	0x080039a0

08003104 <BemVindo>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void BemVindo(){
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
	  OledClear();
 8003108:	f7ff fa54 	bl	80025b4 <OledClear>
	  OledSetCursor(0,0);
 800310c:	2100      	movs	r1, #0
 800310e:	2000      	movs	r0, #0
 8003110:	f7ff f8aa 	bl	8002268 <OledSetCursor>
	  OledPutString("CONDOMINIO DEDEL");
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <BemVindo+0x30>)
 8003116:	0018      	movs	r0, r3
 8003118:	f7ff f8e0 	bl	80022dc <OledPutString>
	  OledSetCursor(0,1);
 800311c:	2101      	movs	r1, #1
 800311e:	2000      	movs	r0, #0
 8003120:	f7ff f8a2 	bl	8002268 <OledSetCursor>
	  OledPutString("Pressione # e   digite sua senha");
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <BemVindo+0x34>)
 8003126:	0018      	movs	r0, r3
 8003128:	f7ff f8d8 	bl	80022dc <OledPutString>
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	080039b4 	.word	0x080039b4
 8003138:	080039c8 	.word	0x080039c8

0800313c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b094      	sub	sp, #80	; 0x50
 8003140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003142:	2320      	movs	r3, #32
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	0018      	movs	r0, r3
 8003148:	2330      	movs	r3, #48	; 0x30
 800314a:	001a      	movs	r2, r3
 800314c:	2100      	movs	r1, #0
 800314e:	f000 fa9f 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003152:	2310      	movs	r3, #16
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	0018      	movs	r0, r3
 8003158:	2310      	movs	r3, #16
 800315a:	001a      	movs	r2, r3
 800315c:	2100      	movs	r1, #0
 800315e:	f000 fa97 	bl	8003690 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003162:	003b      	movs	r3, r7
 8003164:	0018      	movs	r0, r3
 8003166:	2310      	movs	r3, #16
 8003168:	001a      	movs	r2, r3
 800316a:	2100      	movs	r1, #0
 800316c:	f000 fa90 	bl	8003690 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003170:	2320      	movs	r3, #32
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2202      	movs	r2, #2
 8003176:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003178:	2320      	movs	r3, #32
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2201      	movs	r2, #1
 800317e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003180:	2320      	movs	r3, #32
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2210      	movs	r2, #16
 8003186:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003188:	2320      	movs	r3, #32
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2200      	movs	r2, #0
 800318e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003190:	2320      	movs	r3, #32
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	0018      	movs	r0, r3
 8003196:	f7fd fc13 	bl	80009c0 <HAL_RCC_OscConfig>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d001      	beq.n	80031a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800319e:	f000 f93d 	bl	800341c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031a2:	2310      	movs	r3, #16
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2207      	movs	r2, #7
 80031a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031aa:	2310      	movs	r3, #16
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2200      	movs	r2, #0
 80031b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b2:	2310      	movs	r3, #16
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031ba:	2310      	movs	r3, #16
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031c2:	2310      	movs	r3, #16
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2100      	movs	r1, #0
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fd ff13 	bl	8000ff4 <HAL_RCC_ClockConfig>
 80031ce:	1e03      	subs	r3, r0, #0
 80031d0:	d001      	beq.n	80031d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80031d2:	f000 f923 	bl	800341c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031d6:	003b      	movs	r3, r7
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80031dc:	003b      	movs	r3, r7
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031e2:	003b      	movs	r3, r7
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7fe f853 	bl	8001290 <HAL_RCCEx_PeriphCLKConfig>
 80031ea:	1e03      	subs	r3, r0, #0
 80031ec:	d001      	beq.n	80031f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80031ee:	f000 f915 	bl	800341c <Error_Handler>
  }
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b014      	add	sp, #80	; 0x50
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <MX_SPI1_Init+0x74>)
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <MX_SPI1_Init+0x78>)
 8003204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <MX_SPI1_Init+0x74>)
 8003208:	2282      	movs	r2, #130	; 0x82
 800320a:	0052      	lsls	r2, r2, #1
 800320c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <MX_SPI1_Init+0x74>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <MX_SPI1_Init+0x74>)
 8003216:	22e0      	movs	r2, #224	; 0xe0
 8003218:	00d2      	lsls	r2, r2, #3
 800321a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <MX_SPI1_Init+0x74>)
 800321e:	2202      	movs	r2, #2
 8003220:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <MX_SPI1_Init+0x74>)
 8003224:	2201      	movs	r2, #1
 8003226:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <MX_SPI1_Init+0x74>)
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <MX_SPI1_Init+0x74>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <MX_SPI1_Init+0x74>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <MX_SPI1_Init+0x74>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <MX_SPI1_Init+0x74>)
 8003244:	2200      	movs	r2, #0
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <MX_SPI1_Init+0x74>)
 800324a:	2207      	movs	r2, #7
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <MX_SPI1_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <MX_SPI1_Init+0x74>)
 8003256:	2200      	movs	r2, #0
 8003258:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <MX_SPI1_Init+0x74>)
 800325c:	0018      	movs	r0, r3
 800325e:	f7fe f8e5 	bl	800142c <HAL_SPI_Init>
 8003262:	1e03      	subs	r3, r0, #0
 8003264:	d001      	beq.n	800326a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003266:	f000 f8d9 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	2000049c 	.word	0x2000049c
 8003274:	40013000 	.word	0x40013000

08003278 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <MX_USART1_UART_Init+0x5c>)
 8003280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 8003284:	2296      	movs	r2, #150	; 0x96
 8003286:	0192      	lsls	r2, r2, #6
 8003288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 800329e:	220c      	movs	r2, #12
 80032a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <MX_USART1_UART_Init+0x58>)
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fe fbf9 	bl	8001ab4 <HAL_UART_Init>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80032c6:	f000 f8a9 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2000041c 	.word	0x2000041c
 80032d4:	40013800 	.word	0x40013800

080032d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032de:	230c      	movs	r3, #12
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	0018      	movs	r0, r3
 80032e4:	2314      	movs	r3, #20
 80032e6:	001a      	movs	r2, r3
 80032e8:	2100      	movs	r1, #0
 80032ea:	f000 f9d1 	bl	8003690 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ee:	4b48      	ldr	r3, [pc, #288]	; (8003410 <MX_GPIO_Init+0x138>)
 80032f0:	4a47      	ldr	r2, [pc, #284]	; (8003410 <MX_GPIO_Init+0x138>)
 80032f2:	6952      	ldr	r2, [r2, #20]
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	03c9      	lsls	r1, r1, #15
 80032f8:	430a      	orrs	r2, r1
 80032fa:	615a      	str	r2, [r3, #20]
 80032fc:	4b44      	ldr	r3, [pc, #272]	; (8003410 <MX_GPIO_Init+0x138>)
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	03db      	lsls	r3, r3, #15
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <MX_GPIO_Init+0x138>)
 800330c:	4a40      	ldr	r2, [pc, #256]	; (8003410 <MX_GPIO_Init+0x138>)
 800330e:	6952      	ldr	r2, [r2, #20]
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	0289      	lsls	r1, r1, #10
 8003314:	430a      	orrs	r2, r1
 8003316:	615a      	str	r2, [r3, #20]
 8003318:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <MX_GPIO_Init+0x138>)
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	4013      	ands	r3, r2
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <MX_GPIO_Init+0x138>)
 8003328:	4a39      	ldr	r2, [pc, #228]	; (8003410 <MX_GPIO_Init+0x138>)
 800332a:	6952      	ldr	r2, [r2, #20]
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	02c9      	lsls	r1, r1, #11
 8003330:	430a      	orrs	r2, r1
 8003332:	615a      	str	r2, [r3, #20]
 8003334:	4b36      	ldr	r3, [pc, #216]	; (8003410 <MX_GPIO_Init+0x138>)
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	02db      	lsls	r3, r3, #11
 800333c:	4013      	ands	r3, r2
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8003342:	2390      	movs	r3, #144	; 0x90
 8003344:	05db      	lsls	r3, r3, #23
 8003346:	2200      	movs	r2, #0
 8003348:	2147      	movs	r1, #71	; 0x47
 800334a:	0018      	movs	r0, r3
 800334c:	f7fd fb1b 	bl	8000986 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8003350:	4b30      	ldr	r3, [pc, #192]	; (8003414 <MX_GPIO_Init+0x13c>)
 8003352:	2200      	movs	r2, #0
 8003354:	2102      	movs	r1, #2
 8003356:	0018      	movs	r0, r3
 8003358:	f7fd fb15 	bl	8000986 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800335c:	230c      	movs	r3, #12
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2203      	movs	r2, #3
 8003362:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003364:	230c      	movs	r3, #12
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	2200      	movs	r2, #0
 800336a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	230c      	movs	r3, #12
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003374:	230c      	movs	r3, #12
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <MX_GPIO_Init+0x140>)
 800337a:	0019      	movs	r1, r3
 800337c:	0010      	movs	r0, r2
 800337e:	f7fd f975 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8003382:	230c      	movs	r3, #12
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	2247      	movs	r2, #71	; 0x47
 8003388:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338a:	230c      	movs	r3, #12
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	2201      	movs	r2, #1
 8003390:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	230c      	movs	r3, #12
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	230c      	movs	r3, #12
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a2:	230c      	movs	r3, #12
 80033a4:	18fa      	adds	r2, r7, r3
 80033a6:	2390      	movs	r3, #144	; 0x90
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	0011      	movs	r1, r2
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fd f95d 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80033b2:	230c      	movs	r3, #12
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	2218      	movs	r2, #24
 80033b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ba:	230c      	movs	r3, #12
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	230c      	movs	r3, #12
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ca:	230c      	movs	r3, #12
 80033cc:	18fa      	adds	r2, r7, r3
 80033ce:	2390      	movs	r3, #144	; 0x90
 80033d0:	05db      	lsls	r3, r3, #23
 80033d2:	0011      	movs	r1, r2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fd f949 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80033da:	230c      	movs	r3, #12
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2202      	movs	r2, #2
 80033e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e2:	230c      	movs	r3, #12
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	2201      	movs	r2, #1
 80033e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ea:	230c      	movs	r3, #12
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	230c      	movs	r3, #12
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fa:	230c      	movs	r3, #12
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	4a05      	ldr	r2, [pc, #20]	; (8003414 <MX_GPIO_Init+0x13c>)
 8003400:	0019      	movs	r1, r3
 8003402:	0010      	movs	r0, r2
 8003404:	f7fd f932 	bl	800066c <HAL_GPIO_Init>

}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b008      	add	sp, #32
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	48000400 	.word	0x48000400
 8003418:	48001400 	.word	0x48001400

0800341c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_MspInit+0x44>)
 8003430:	4a0e      	ldr	r2, [pc, #56]	; (800346c <HAL_MspInit+0x44>)
 8003432:	6992      	ldr	r2, [r2, #24]
 8003434:	2101      	movs	r1, #1
 8003436:	430a      	orrs	r2, r1
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_MspInit+0x44>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2201      	movs	r2, #1
 8003440:	4013      	ands	r3, r2
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_MspInit+0x44>)
 8003448:	4a08      	ldr	r2, [pc, #32]	; (800346c <HAL_MspInit+0x44>)
 800344a:	69d2      	ldr	r2, [r2, #28]
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	0549      	lsls	r1, r1, #21
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_MspInit+0x44>)
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	055b      	lsls	r3, r3, #21
 800345c:	4013      	ands	r3, r2
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	40021000 	.word	0x40021000

08003470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	2314      	movs	r3, #20
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	0018      	movs	r0, r3
 800347e:	2314      	movs	r3, #20
 8003480:	001a      	movs	r2, r3
 8003482:	2100      	movs	r1, #0
 8003484:	f000 f904 	bl	8003690 <memset>
  if(hspi->Instance==SPI1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1f      	ldr	r2, [pc, #124]	; (800350c <HAL_SPI_MspInit+0x9c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d137      	bne.n	8003502 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_SPI_MspInit+0xa0>)
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <HAL_SPI_MspInit+0xa0>)
 8003496:	6992      	ldr	r2, [r2, #24]
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	0149      	lsls	r1, r1, #5
 800349c:	430a      	orrs	r2, r1
 800349e:	619a      	str	r2, [r3, #24]
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_SPI_MspInit+0xa0>)
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_SPI_MspInit+0xa0>)
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <HAL_SPI_MspInit+0xa0>)
 80034b2:	6952      	ldr	r2, [r2, #20]
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	0289      	lsls	r1, r1, #10
 80034b8:	430a      	orrs	r2, r1
 80034ba:	615a      	str	r2, [r3, #20]
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_SPI_MspInit+0xa0>)
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	4013      	ands	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80034ca:	2314      	movs	r3, #20
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	22a0      	movs	r2, #160	; 0xa0
 80034d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2314      	movs	r3, #20
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	2202      	movs	r2, #2
 80034d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2314      	movs	r3, #20
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034e2:	2314      	movs	r3, #20
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	2203      	movs	r2, #3
 80034e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80034ea:	2314      	movs	r3, #20
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	2314      	movs	r3, #20
 80034f4:	18fa      	adds	r2, r7, r3
 80034f6:	2390      	movs	r3, #144	; 0x90
 80034f8:	05db      	lsls	r3, r3, #23
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fd f8b5 	bl	800066c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b00a      	add	sp, #40	; 0x28
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	40013000 	.word	0x40013000
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	2314      	movs	r3, #20
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	0018      	movs	r0, r3
 8003522:	2314      	movs	r3, #20
 8003524:	001a      	movs	r2, r3
 8003526:	2100      	movs	r1, #0
 8003528:	f000 f8b2 	bl	8003690 <memset>
  if(huart->Instance==USART1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_UART_MspInit+0x9c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d138      	bne.n	80035a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <HAL_UART_MspInit+0xa0>)
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_UART_MspInit+0xa0>)
 800353a:	6992      	ldr	r2, [r2, #24]
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	01c9      	lsls	r1, r1, #7
 8003540:	430a      	orrs	r2, r1
 8003542:	619a      	str	r2, [r3, #24]
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_UART_MspInit+0xa0>)
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	01db      	lsls	r3, r3, #7
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_UART_MspInit+0xa0>)
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_UART_MspInit+0xa0>)
 8003556:	6952      	ldr	r2, [r2, #20]
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0289      	lsls	r1, r1, #10
 800355c:	430a      	orrs	r2, r1
 800355e:	615a      	str	r2, [r3, #20]
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_UART_MspInit+0xa0>)
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	4013      	ands	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800356e:	2314      	movs	r3, #20
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	22c0      	movs	r2, #192	; 0xc0
 8003574:	00d2      	lsls	r2, r2, #3
 8003576:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2314      	movs	r3, #20
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2202      	movs	r2, #2
 800357e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2314      	movs	r3, #20
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003588:	2314      	movs	r3, #20
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	2203      	movs	r2, #3
 800358e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003590:	2314      	movs	r3, #20
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2201      	movs	r2, #1
 8003596:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	2314      	movs	r3, #20
 800359a:	18fa      	adds	r2, r7, r3
 800359c:	2390      	movs	r3, #144	; 0x90
 800359e:	05db      	lsls	r3, r3, #23
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fd f862 	bl	800066c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b00a      	add	sp, #40	; 0x28
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40013800 	.word	0x40013800
 80035b4:	40021000 	.word	0x40021000

080035b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c6:	e7fe      	b.n	80035c6 <HardFault_Handler+0x4>

080035c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e0:	f7fc ff50 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035f4:	480d      	ldr	r0, [pc, #52]	; (800362c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f8:	480d      	ldr	r0, [pc, #52]	; (8003630 <LoopForever+0x6>)
  ldr r1, =_edata
 80035fa:	490e      	ldr	r1, [pc, #56]	; (8003634 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035fc:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <LoopForever+0xe>)
  movs r3, #0
 80035fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003600:	e002      	b.n	8003608 <LoopCopyDataInit>

08003602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003606:	3304      	adds	r3, #4

08003608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800360a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800360c:	d3f9      	bcc.n	8003602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800360e:	4a0b      	ldr	r2, [pc, #44]	; (800363c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003610:	4c0b      	ldr	r4, [pc, #44]	; (8003640 <LoopForever+0x16>)
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003614:	e001      	b.n	800361a <LoopFillZerobss>

08003616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003618:	3204      	adds	r2, #4

0800361a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800361a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800361c:	d3fb      	bcc.n	8003616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800361e:	f7ff ffe4 	bl	80035ea <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003622:	f000 f811 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003626:	f7ff f9d9 	bl	80029dc <main>

0800362a <LoopForever>:

LoopForever:
    b LoopForever
 800362a:	e7fe      	b.n	800362a <LoopForever>
  ldr   r0, =_estack
 800362c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003634:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003638:	08003d8c 	.word	0x08003d8c
  ldr r2, =_sbss
 800363c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8003640:	20000500 	.word	0x20000500

08003644 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003644:	e7fe      	b.n	8003644 <ADC1_IRQHandler>
	...

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	2600      	movs	r6, #0
 800364c:	4d0c      	ldr	r5, [pc, #48]	; (8003680 <__libc_init_array+0x38>)
 800364e:	4c0d      	ldr	r4, [pc, #52]	; (8003684 <__libc_init_array+0x3c>)
 8003650:	1b64      	subs	r4, r4, r5
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	2600      	movs	r6, #0
 800365a:	f000 f821 	bl	80036a0 <_init>
 800365e:	4d0a      	ldr	r5, [pc, #40]	; (8003688 <__libc_init_array+0x40>)
 8003660:	4c0a      	ldr	r4, [pc, #40]	; (800368c <__libc_init_array+0x44>)
 8003662:	1b64      	subs	r4, r4, r5
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	00b3      	lsls	r3, r6, #2
 800366e:	58eb      	ldr	r3, [r5, r3]
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	00b3      	lsls	r3, r6, #2
 8003678:	58eb      	ldr	r3, [r5, r3]
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	08003d84 	.word	0x08003d84
 8003684:	08003d84 	.word	0x08003d84
 8003688:	08003d84 	.word	0x08003d84
 800368c:	08003d88 	.word	0x08003d88

08003690 <memset>:
 8003690:	0003      	movs	r3, r0
 8003692:	1882      	adds	r2, r0, r2
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	7019      	strb	r1, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <_init>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr

080036ac <_fini>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr
